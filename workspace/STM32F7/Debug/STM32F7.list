
STM32F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070d4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000097c  080072d4  080072d4  000172d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c50  08007c50  0002018c  2**0
                  CONTENTS
  4 .ARM          00000000  08007c50  08007c50  0002018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c50  08007c50  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007c50  08007c50  00017c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c58  08007c58  00017c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08007c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  2000018c  08007de8  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08007de8  00020360  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000d6f1  00000000  00000000  000201ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00023550  00000000  00000000  0002d8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cba  00000000  00000000  00050dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f8  00000000  00000000  00052ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d5586  00000000  00000000  00053db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000012a0  00000000  00000000  00129338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025f64  00000000  00000000  0012a5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015053c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d70  00000000  00000000  00150590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  00156300  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0015633c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000018c 	.word	0x2000018c
 800021c:	00000000 	.word	0x00000000
 8000220:	080072bc 	.word	0x080072bc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000190 	.word	0x20000190
 800023c:	080072bc 	.word	0x080072bc

08000240 <save_context>:
.type    save_context, %function
.global load_context
.type    load_context, %function

save_context:
               MRS    r0, msp
 8000240:	f3ef 8008 	mrs	r0, MSP
               STMDB  r0!, {r4-r11}
 8000244:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
               MSR    msp, r0
 8000248:	f380 8808 	msr	MSP, r0
               VPUSH.32  {s0-s15}
 800024c:	ed2d 0a10 	vpush	{s0-s15}
               VPUSH.32  {s16-s31}
 8000250:	ed2d 8a10 	vpush	{s16-s31}
               MRS    r0, msp
 8000254:	f3ef 8008 	mrs	r0, MSP
               BX     lr
 8000258:	4770      	bx	lr

0800025a <load_context>:


load_context:


               MSR    msp, r0
 800025a:	f380 8808 	msr	MSP, r0
               VPOP.32  {s16-s31}
 800025e:	ecbd 8a10 	vpop	{s16-s31}
               VPOP.32  {s0-s15}
 8000262:	ecbd 0a10 	vpop	{s0-s15}
               MRS    r0, msp
 8000266:	f3ef 8008 	mrs	r0, MSP
               LDMFD  r0!, {r4-r11}
 800026a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
               MSR    msp, r0
 800026e:	f380 8808 	msr	MSP, r0
               BX     lr
 8000272:	4770      	bx	lr

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000330:	480d      	ldr	r0, [pc, #52]	; (8000368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000332:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000334:	f001 fc4a 	bl	8001bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000338:	480c      	ldr	r0, [pc, #48]	; (800036c <LoopForever+0x6>)
  ldr r1, =_edata
 800033a:	490d      	ldr	r1, [pc, #52]	; (8000370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800033c:	4a0d      	ldr	r2, [pc, #52]	; (8000374 <LoopForever+0xe>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000340:	e002      	b.n	8000348 <LoopCopyDataInit>

08000342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000346:	3304      	adds	r3, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800034c:	d3f9      	bcc.n	8000342 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034e:	4a0a      	ldr	r2, [pc, #40]	; (8000378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000350:	4c0a      	ldr	r4, [pc, #40]	; (800037c <LoopForever+0x16>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000354:	e001      	b.n	800035a <LoopFillZerobss>

08000356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000358:	3204      	adds	r2, #4

0800035a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800035c:	d3fb      	bcc.n	8000356 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035e:	f006 fab5 	bl	80068cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000362:	f006 f98f 	bl	8006684 <main>

08000366 <LoopForever>:

LoopForever:
    b LoopForever
 8000366:	e7fe      	b.n	8000366 <LoopForever>
  ldr   r0, =_estack
 8000368:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800036c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000370:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8000374:	08007c5c 	.word	0x08007c5c
  ldr r2, =_sbss
 8000378:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 800037c:	20000360 	.word	0x20000360

08000380 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000380:	e7fe      	b.n	8000380 <BusFault_Handler>
	...

08000384 <_ZN7cHwLTDC4InitEtt>:
			RCC->APB2RSTR |=  RCC_APB2RSTR_LTDCRST; // reset cycle
			RCC->APB2RSTR &= ~RCC_APB2RSTR_LTDCRST;
		}
  
		//---------------------------------------------------------------
		void Init( WORD Hsize, WORD Vsize )
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	460b      	mov	r3, r1
 800038e:	807b      	strh	r3, [r7, #2]
 8000390:	4613      	mov	r3, r2
 8000392:	803b      	strh	r3, [r7, #0]
		{
      DWORD h = 0;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
      DWORD v = 0;
 8000398:	2300      	movs	r3, #0
 800039a:	60bb      	str	r3, [r7, #8]
      
			// Global control register 
			LTDC->GCR = (!LTDC_GCR_HSPOL   // Horizontal Synchronization Polarity: activ low
 800039c:	4b23      	ldr	r3, [pc, #140]	; (800042c <_ZN7cHwLTDC4InitEtt+0xa8>)
 800039e:	2200      	movs	r2, #0
 80003a0:	619a      	str	r2, [r3, #24]
									|!LTDC_GCR_VSPOL   // Vertical Synchronization Polarity: activ low
									|!LTDC_GCR_DEPOL   // Not Data Enable Polarity: activ low
                  |!LTDC_GCR_PCPOL );// Pixel Clock Polarity: activ low

			// Synchronization size configuration register 
      h += 1; // add H-Sync
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	3301      	adds	r3, #1
 80003a6:	60fb      	str	r3, [r7, #12]
      v += 1; // add V-Sync
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	3301      	adds	r3, #1
 80003ac:	60bb      	str	r3, [r7, #8]
			LTDC->SSCR = ((h << 16)  // Horizontal Synchronization Width: 1
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	041a      	lsls	r2, r3, #16
 80003b2:	491e      	ldr	r1, [pc, #120]	; (800042c <_ZN7cHwLTDC4InitEtt+0xa8>)
                   |(v <<  0));// Vertical Synchronization Height: 1
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	4313      	orrs	r3, r2
			LTDC->SSCR = ((h << 16)  // Horizontal Synchronization Width: 1
 80003b8:	608b      	str	r3, [r1, #8]

			// Back porch configuration register 
      h += 1; // add H-Back porch
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	3301      	adds	r3, #1
 80003be:	60fb      	str	r3, [r7, #12]
      v += 1; // add V-Back porch
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	3301      	adds	r3, #1
 80003c4:	60bb      	str	r3, [r7, #8]
			LTDC->BPCR = ((h << 16)  // Accumulated Horizontal back porch
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	041a      	lsls	r2, r3, #16
 80003ca:	4918      	ldr	r1, [pc, #96]	; (800042c <_ZN7cHwLTDC4InitEtt+0xa8>)
                   |(v <<  0));// Accumulated Vertical back porch
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	4313      	orrs	r3, r2
			LTDC->BPCR = ((h << 16)  // Accumulated Horizontal back porch
 80003d0:	60cb      	str	r3, [r1, #12]

			// Active width configuration register
      h += Hsize;
 80003d2:	887b      	ldrh	r3, [r7, #2]
 80003d4:	68fa      	ldr	r2, [r7, #12]
 80003d6:	4413      	add	r3, r2
 80003d8:	60fb      	str	r3, [r7, #12]
      v += Vsize;      
 80003da:	883b      	ldrh	r3, [r7, #0]
 80003dc:	68ba      	ldr	r2, [r7, #8]
 80003de:	4413      	add	r3, r2
 80003e0:	60bb      	str	r3, [r7, #8]
			LTDC->AWCR = ((h << 16)  // Accumulated Active Width
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	041a      	lsls	r2, r3, #16
 80003e6:	4911      	ldr	r1, [pc, #68]	; (800042c <_ZN7cHwLTDC4InitEtt+0xa8>)
                   |(v <<  0));// Accumulated Active Height 
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	4313      	orrs	r3, r2
			LTDC->AWCR = ((h << 16)  // Accumulated Active Width
 80003ec:	610b      	str	r3, [r1, #16]

			// Total width configuration register
      h += 1; // add H-Front porch
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	3301      	adds	r3, #1
 80003f2:	60fb      	str	r3, [r7, #12]
      v += 1; // add V-Front porch      
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	3301      	adds	r3, #1
 80003f8:	60bb      	str	r3, [r7, #8]
			LTDC->TWCR = ((h << 16)  // Total Width 
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	041a      	lsls	r2, r3, #16
 80003fe:	490b      	ldr	r1, [pc, #44]	; (800042c <_ZN7cHwLTDC4InitEtt+0xa8>)
                   |(v <<  0));// Total Height
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	4313      	orrs	r3, r2
			LTDC->TWCR = ((h << 16)  // Total Width 
 8000404:	614b      	str	r3, [r1, #20]

			// Background color configuration register 
			LTDC->BCCR = ( (0x00 << 16)    // Red value
 8000406:	4b09      	ldr	r3, [pc, #36]	; (800042c <_ZN7cHwLTDC4InitEtt+0xa8>)
 8000408:	2200      	movs	r2, #0
 800040a:	62da      	str	r2, [r3, #44]	; 0x2c
                   | (0x00 <<  8)    // Green value
                   | (0x00 <<  0) ); // Blue value

      // Interrupt enable register
      LTDC->IER = 0; // no interrupts
 800040c:	4b07      	ldr	r3, [pc, #28]	; (800042c <_ZN7cHwLTDC4InitEtt+0xa8>)
 800040e:	2200      	movs	r2, #0
 8000410:	635a      	str	r2, [r3, #52]	; 0x34

			// Global control register 
			LTDC->GCR |= LTDC_GCR_LTDCEN; // LTDC enable
 8000412:	4b06      	ldr	r3, [pc, #24]	; (800042c <_ZN7cHwLTDC4InitEtt+0xa8>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	4a05      	ldr	r2, [pc, #20]	; (800042c <_ZN7cHwLTDC4InitEtt+0xa8>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6193      	str	r3, [r2, #24]
		}
 800041e:	bf00      	nop
 8000420:	3714      	adds	r7, #20
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40016800 	.word	0x40016800

08000430 <_ZN7cHwLTDC11LayerConfigEmmh>:
  
    //---------------------------------------------------------------
    uint32_t LayerConfig( uint32_t width, uint32_t height, uint8_t layerID = 0 )
 8000430:	b480      	push	{r7}
 8000432:	b089      	sub	sp, #36	; 0x24
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	607a      	str	r2, [r7, #4]
 800043c:	70fb      	strb	r3, [r7, #3]
		{
      LTDC_Layer_TypeDef *layer = (layerID) ? LTDC_Layer2 : LTDC_Layer1; 
 800043e:	78fb      	ldrb	r3, [r7, #3]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <_ZN7cHwLTDC11LayerConfigEmmh+0x18>
 8000444:	4b2a      	ldr	r3, [pc, #168]	; (80004f0 <_ZN7cHwLTDC11LayerConfigEmmh+0xc0>)
 8000446:	e000      	b.n	800044a <_ZN7cHwLTDC11LayerConfigEmmh+0x1a>
 8000448:	4b2a      	ldr	r3, [pc, #168]	; (80004f4 <_ZN7cHwLTDC11LayerConfigEmmh+0xc4>)
 800044a:	61fb      	str	r3, [r7, #28]
     
      uint32_t hbp  = (LTDC->BPCR & LTDC_BPCR_AHBP) >> 16; // H-Back porch
 800044c:	4b2a      	ldr	r3, [pc, #168]	; (80004f8 <_ZN7cHwLTDC11LayerConfigEmmh+0xc8>)
 800044e:	68db      	ldr	r3, [r3, #12]
 8000450:	0c1b      	lsrs	r3, r3, #16
 8000452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000456:	61bb      	str	r3, [r7, #24]
      uint32_t vbp  = (LTDC->BPCR & LTDC_BPCR_AVBP) >> 0;  // V-Back porch
 8000458:	4b27      	ldr	r3, [pc, #156]	; (80004f8 <_ZN7cHwLTDC11LayerConfigEmmh+0xc8>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000460:	617b      	str	r3, [r7, #20]
      uint32_t bpp  = 2; // RGB565: 16-Bit pixel format = 2 bytes per pixel
 8000462:	2302      	movs	r3, #2
 8000464:	613b      	str	r3, [r7, #16]
            
      // Layerx window horizontal position configuration register
      layer->WHPCR = ( ((width       + hbp) << 16)    // Window Horizontal Stop Position
 8000466:	68ba      	ldr	r2, [r7, #8]
 8000468:	69bb      	ldr	r3, [r7, #24]
 800046a:	4413      	add	r3, r2
 800046c:	041a      	lsls	r2, r3, #16
                     | ((0/*X0*/ + 1 + hbp) <<  0) ); // Window Horizontal Start Position
 800046e:	69bb      	ldr	r3, [r7, #24]
 8000470:	3301      	adds	r3, #1
 8000472:	431a      	orrs	r2, r3
      layer->WHPCR = ( ((width       + hbp) << 16)    // Window Horizontal Stop Position
 8000474:	69fb      	ldr	r3, [r7, #28]
 8000476:	605a      	str	r2, [r3, #4]

      // Layerx window vertical position configuration register
      layer->WVPCR = ( ((height      + vbp) << 16)    // Window Vertical Stop Position
 8000478:	687a      	ldr	r2, [r7, #4]
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	4413      	add	r3, r2
 800047e:	041a      	lsls	r2, r3, #16
                     | ((0/*Y0*/ + 1 + vbp) <<  0) ); // Window Vertical Start Position
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	3301      	adds	r3, #1
 8000484:	431a      	orrs	r2, r3
      layer->WVPCR = ( ((height      + vbp) << 16)    // Window Vertical Stop Position
 8000486:	69fb      	ldr	r3, [r7, #28]
 8000488:	609a      	str	r2, [r3, #8]

      // Layerx pixel format configuration register
      layer->PFCR = 0x02; // PixelFormat: RGB565
 800048a:	69fb      	ldr	r3, [r7, #28]
 800048c:	2202      	movs	r2, #2
 800048e:	611a      	str	r2, [r3, #16]

      // Layerx default color configuration register
      layer->DCCR = ( (0x00 << 24)    // Alpha
 8000490:	69fb      	ldr	r3, [r7, #28]
 8000492:	2200      	movs	r2, #0
 8000494:	619a      	str	r2, [r3, #24]
                    | (0x00 << 16)    // Red
                    | (0x00 <<  8)    // Green
                    | (0x00 <<  0) ); // Blue

      // Layerx constant alpha configuration register
      layer->CACR = (0xFF); // Alpha
 8000496:	69fb      	ldr	r3, [r7, #28]
 8000498:	22ff      	movs	r2, #255	; 0xff
 800049a:	615a      	str	r2, [r3, #20]

      // Layerx blending factors configuration register
      layer->BFCR = ( (0x06 << 8)   // Blending Factor 1:Pixel Alpha x Constant Alpha
 800049c:	69fb      	ldr	r3, [r7, #28]
 800049e:	f240 6207 	movw	r2, #1543	; 0x607
 80004a2:	61da      	str	r2, [r3, #28]
                    | (0x07 << 0) );// Blending Factor 2:1-(Pixel Alpha x Constant Alpha)

      // Layerx color frame buffer address register
      layer->CFBAR = startAddr;
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	69fb      	ldr	r3, [r7, #28]
 80004aa:	629a      	str	r2, [r3, #40]	; 0x28

      
      // Layerx color frame buffer length register
      layer->CFBLR  = ( ((((width          )*bpp)  ) << 16)   // Color Frame Buffer Pitch in bytes
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	693a      	ldr	r2, [r7, #16]
 80004b0:	fb02 f303 	mul.w	r3, r2, r3
 80004b4:	041a      	lsls	r2, r3, #16
                      | ((((width - 0/*X0*/)*bpp)+3) <<  0) );// Color Frame Buffer Line Length
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	6939      	ldr	r1, [r7, #16]
 80004ba:	fb01 f303 	mul.w	r3, r1, r3
 80004be:	3303      	adds	r3, #3
 80004c0:	431a      	orrs	r2, r3
      layer->CFBLR  = ( ((((width          )*bpp)  ) << 16)   // Color Frame Buffer Pitch in bytes
 80004c2:	69fb      	ldr	r3, [r7, #28]
 80004c4:	62da      	str	r2, [r3, #44]	; 0x2c

      // Layerx color frame buffer line number register
      layer->CFBLNR = height; // Frame Buffer Number of Lines 
 80004c6:	69fb      	ldr	r3, [r7, #28]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	631a      	str	r2, [r3, #48]	; 0x30

      // Layerx control register 
      layer->CR |= LTDC_LxCR_LEN; // Layer Enable
 80004cc:	69fb      	ldr	r3, [r7, #28]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f043 0201 	orr.w	r2, r3, #1
 80004d4:	69fb      	ldr	r3, [r7, #28]
 80004d6:	601a      	str	r2, [r3, #0]

      // Shadow reload configuration register 
			LTDC->SRCR = LTDC_SRCR_IMR; // Immediate Reload: enable
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <_ZN7cHwLTDC11LayerConfigEmmh+0xc8>)
 80004da:	2201      	movs	r2, #1
 80004dc:	625a      	str	r2, [r3, #36]	; 0x24

      return( startAddr );
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	681b      	ldr	r3, [r3, #0]
		}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3724      	adds	r7, #36	; 0x24
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40016904 	.word	0x40016904
 80004f4:	40016884 	.word	0x40016884
 80004f8:	40016800 	.word	0x40016800
 80004fc:	00000000 	.word	0x00000000

08000500 <_ZN6cHwDSI4InitEttb>:
			RCC->APB2RSTR |=  RCC_APB2RSTR_DSIRST;
			RCC->APB2RSTR &= ~RCC_APB2RSTR_DSIRST;
		}
    
		//-----------------------------------------------------------------
		void Init( WORD Hsize, WORD Vsize, bool useLTDC )
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	4608      	mov	r0, r1
 800050a:	4611      	mov	r1, r2
 800050c:	461a      	mov	r2, r3
 800050e:	4603      	mov	r3, r0
 8000510:	817b      	strh	r3, [r7, #10]
 8000512:	460b      	mov	r3, r1
 8000514:	813b      	strh	r3, [r7, #8]
 8000516:	4613      	mov	r3, r2
 8000518:	71fb      	strb	r3, [r7, #7]
		{
			DSI->WCR   &= ~DSI_WCR_DSIEN;   // Wrapper disable
 800051a:	4b6d      	ldr	r3, [pc, #436]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 800051c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000520:	4a6b      	ldr	r2, [pc, #428]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 8000522:	f023 0308 	bic.w	r3, r3, #8
 8000526:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			DSI->CR    &= ~DSI_CR_EN;       // DSI disable
 800052a:	4b69      	ldr	r3, [pc, #420]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	4a68      	ldr	r2, [pc, #416]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 8000530:	f023 0301 	bic.w	r3, r3, #1
 8000534:	6053      	str	r3, [r2, #4]
			DSI->PCTLR &= ~DSI_PCTLR_CKE;   // D-PHY clock disable
 8000536:	4b66      	ldr	r3, [pc, #408]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 8000538:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800053c:	4a64      	ldr	r2, [pc, #400]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 800053e:	f023 0304 	bic.w	r3, r3, #4
 8000542:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
			DSI->PCTLR &= ~DSI_PCTLR_DEN;   // Digital disable
 8000546:	4b62      	ldr	r3, [pc, #392]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 8000548:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800054c:	4a60      	ldr	r2, [pc, #384]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 800054e:	f023 0302 	bic.w	r3, r3, #2
 8000552:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
			DSI->WRPCR &= ~DSI_WRPCR_PLLEN; // PLL disable
 8000556:	4b5e      	ldr	r3, [pc, #376]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 8000558:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800055c:	4a5c      	ldr	r2, [pc, #368]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 800055e:	f023 0301 	bic.w	r3, r3, #1
 8000562:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
			DSI->WRPCR &= ~DSI_WRPCR_REGEN; // Regulator disable
 8000566:	4b5a      	ldr	r3, [pc, #360]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 8000568:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800056c:	4a58      	ldr	r2, [pc, #352]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 800056e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000572:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
		       
			// Turn on the regulator and enable the DSI PLL
			//---------------------------------------------
			DSI->WRPCR |= DSI_WRPCR_REGEN; // Regulator Enable
 8000576:	4b56      	ldr	r3, [pc, #344]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 8000578:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800057c:	4a54      	ldr	r2, [pc, #336]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 800057e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000582:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

			// TODO: timeout
			while( !(DSI->WISR & DSI_WISR_RRS) ); // Wait until the regulator is ready
 8000586:	4b52      	ldr	r3, [pc, #328]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 8000588:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800058c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000590:	2b00      	cmp	r3, #0
 8000592:	bf0c      	ite	eq
 8000594:	2301      	moveq	r3, #1
 8000596:	2300      	movne	r3, #0
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	d000      	beq.n	80005a0 <_ZN6cHwDSI4InitEttb+0xa0>
 800059e:	e7f2      	b.n	8000586 <_ZN6cHwDSI4InitEttb+0x86>
			//   F_PHI = (_HSE_CLK / IDF) * NDIV /(2^ODF) * kHz
			// 
			// here: _HSE_CLK = 25000, NDIV=100, IDF=5; ODF=0 
			//       => F_PHI = 25E3/5*100/(2^0)*kHz = 500 MHz

   	  double F_PHI = 500E6; /*Hz*/
 80005a0:	a347      	add	r3, pc, #284	; (adr r3, 80006c0 <_ZN6cHwDSI4InitEttb+0x1c0>)
 80005a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
			
			DSI->WRPCR &= ~( DSI_WRPCR_PLL_NDIV 
 80005aa:	4b49      	ldr	r3, [pc, #292]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 80005ac:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80005b0:	4947      	ldr	r1, [pc, #284]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 80005b2:	4b48      	ldr	r3, [pc, #288]	; (80006d4 <_ZN6cHwDSI4InitEttb+0x1d4>)
 80005b4:	4013      	ands	r3, r2
 80005b6:	f8c1 3430 	str.w	r3, [r1, #1072]	; 0x430
										 | DSI_WRPCR_PLL_IDF 
										 | DSI_WRPCR_PLL_ODF );
			DSI->WRPCR |=  ( (100 <<  2)   // PLL N-Div
 80005ba:	4b45      	ldr	r3, [pc, #276]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 80005bc:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80005c0:	4943      	ldr	r1, [pc, #268]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 80005c2:	f642 1390 	movw	r3, #10640	; 0x2990
 80005c6:	4313      	orrs	r3, r2
 80005c8:	f8c1 3430 	str.w	r3, [r1, #1072]	; 0x430
										 | (5   << 11)   // PLL IDF
										 | (0   << 16)); // PLL ODF
				
			DSI->WRPCR |= DSI_WRPCR_PLLEN; // PLL Enable
 80005cc:	4b40      	ldr	r3, [pc, #256]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 80005ce:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80005d2:	4a3f      	ldr	r2, [pc, #252]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
				
			// TODO: timeout	
			while( !(DSI->WISR & DSI_WISR_PLLLS) ); // Wait for the lock of the PLL
 80005dc:	4b3c      	ldr	r3, [pc, #240]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 80005de:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80005e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	bf0c      	ite	eq
 80005ea:	2301      	moveq	r3, #1
 80005ec:	2300      	movne	r3, #0
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d000      	beq.n	80005f6 <_ZN6cHwDSI4InitEttb+0xf6>
 80005f4:	e7f2      	b.n	80005dc <_ZN6cHwDSI4InitEttb+0xdc>
					
      // Set Host PHY
			//-------------
			// D-PHY clock and digital lane
			DSI->PCTLR  = ( DSI_PCTLR_CKE    // Clock Enable
 80005f6:	4b36      	ldr	r3, [pc, #216]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 80005f8:	2206      	movs	r2, #6
 80005fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
										| DSI_PCTLR_DEN ); // Digital Enable
          
			// Clock Lane Configuration
			DSI->CLCR  =  ( DSI_CLCR_DPCC    // D-PHY Clock Control: High-Speed mode
 80005fe:	4b34      	ldr	r3, [pc, #208]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 8000600:	2201      	movs	r2, #1
 8000602:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			              |!DSI_CLCR_ACR );  // Automatic Clock lane Control: disabled
				
		  // Host PHY Configuration Register 
			DSI->PCONFR  =  ( (10 <<8 )      // Stop Wait Time: 10
 8000606:	4b32      	ldr	r3, [pc, #200]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 8000608:	f640 2201 	movw	r2, #2561	; 0xa01
 800060c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			                | 0x01 );        // Number of Lanes: 2 
											
			// Set Clock configuration
			//------------------------
			// Clock Control register
      DSI->CCR  =  ( (0 << 8)          // Timeout Clock Division
 8000610:	4b2f      	ldr	r3, [pc, #188]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 8000612:	2204      	movs	r2, #4
 8000614:	609a      	str	r2, [r3, #8]
			             | (4 << 0) );       // TX Escape Clock Division
          
			//  Wrapper PHY Configuration Register 0
      DSI->WPCR[0] = (WORD)(1.0/(0.25E-9*F_PHI)); // Unit Interval multiplied by 4
 8000616:	ed97 7b04 	vldr	d7, [r7, #16]
 800061a:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 80006c8 <_ZN6cHwDSI4InitEttb+0x1c8>
 800061e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000622:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000626:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800062a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800062e:	ee17 3a90 	vmov	r3, s15
 8000632:	b29a      	uxth	r2, r3
 8000634:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 8000636:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
        
   		// Disable all error interrupts
			DSI->IER[0] = 0;
 800063a:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 800063c:	2200      	movs	r2, #0
 800063e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
			DSI->IER[1] = 0;
 8000642:	4b23      	ldr	r3, [pc, #140]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 8000644:	2200      	movs	r2, #0
 8000646:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 
			// Host mode Configuration Register 
      DSI->MCR = DSI_MCR_CMDM; // Command mode: Command
 800064a:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 800064c:	2201      	movs	r2, #1
 800064e:	635a      	str	r2, [r3, #52]	; 0x34
			
			//  Wrapper     Configuration Register 
			DSI->WCFGR  = ( DSI_WCFGR_DSIM    // Video transmission mode: Adapted Command mode
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 8000652:	220b      	movs	r2, #11
 8000654:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
										| !DSI_WCFGR_AR     // Automatic Refresh: disable
										| !DSI_WCFGR_VSPOL  // VSync Polarity: fallig edge
										| (0x05<<1) );      // Color multiplexing used by DSI Host: 24 bit
										 
			// Host LTDC VCID Register 
			DSI->LVCIDR = 0;                // Virtual Channel ID
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  
			//  Host LTDC Polarity Configuration Register 
			DSI->LPCR  =  (!DSI_LPCR_DEP    // Data Enable Polarity: active high
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 8000660:	2200      	movs	r2, #0
 8000662:	615a      	str	r2, [r3, #20]
			              |!DSI_LPCR_VSP    // VSYNC Polarity: shutdown pin active high
                    |!DSI_LPCR_HSP ); // HSYNC Polarity: HSYNC pin active high
  
			// Host LTDC Color Coding Register
			DSI->LCOLCR = ( !DSI_LCOLCR_LPE  // Loosely Packet Enable: disable
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 8000666:	2205      	movs	r2, #5
 8000668:	611a      	str	r2, [r3, #16]
										| 0x05      		 );// Color Coding: 24 bit
  
			// Host LTDC Command Configuration Register 
			DSI->LCCR = Hsize; // Command Size, max size for LTDC write memory command (pixel)
 800066a:	4a19      	ldr	r2, [pc, #100]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 800066c:	897b      	ldrh	r3, [r7, #10]
 800066e:	6653      	str	r3, [r2, #100]	; 0x64
   
  		// Host Command mode Configuration Register, 
			// select High-speed or Low-power mode:
			// Enable Low-power command
			DSI->CMCR = ( DSI_CMCR_GSW0TX
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 8000672:	4a19      	ldr	r2, [pc, #100]	; (80006d8 <_ZN6cHwDSI4InitEttb+0x1d8>)
 8000674:	669a      	str	r2, [r3, #104]	; 0x68
									| DSI_CMCR_DSR0TX   
									| DSI_CMCR_DLWTX      
									| 0   // Maximum Read Packet Size: High-speed
									| 0); // Acknowledge Request Enable: disable  
	    
			if( useLTDC )
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d006      	beq.n	800068a <_ZN6cHwDSI4InitEttb+0x18a>
			{
				hwLTDC.Init( Hsize, Vsize );
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3304      	adds	r3, #4
 8000680:	893a      	ldrh	r2, [r7, #8]
 8000682:	8979      	ldrh	r1, [r7, #10]
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fe7d 	bl	8000384 <_ZN7cHwLTDC4InitEtt>
			}
			      
			// DSI and wrapper enable
			DSI->CR  |= DSI_CR_EN;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	4a10      	ldr	r2, [pc, #64]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6053      	str	r3, [r2, #4]
			DSI->WCR |= DSI_WCR_DSIEN;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 8000698:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800069c:	4a0c      	ldr	r2, [pc, #48]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 800069e:	f043 0308 	orr.w	r3, r3, #8
 80006a2:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Host Clock Lane Timer Configuration Register
			// 
      // see: https://www.keil.com/boards2/stmicroelectronics/stm32f746g_discovery, Keil.STM32F7xx_DFP.2.9.0.pack
			//      "But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.
      // 			 Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME."
			DSI->CLTCR = ( (35 <<  0)    // Low-Power to High-Speed Time
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 80006a8:	f04f 1223 	mov.w	r2, #2293795	; 0x230023
 80006ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 			             | (35 << 16) ); // High-Speed to Low-Power Time
  
			//  Host Data Lane Timer Configuration Register 
			DSI->DLTCR = ( ( 0 <<  0 )   // Maximum Read Time
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <_ZN6cHwDSI4InitEttb+0x1d0>)
 80006b2:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <_ZN6cHwDSI4InitEttb+0x1dc>)
 80006b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
									 | (35 << 16 )   // Low-Power To High-Speed Time
									 | (35 << 24 ) );// High-Speed To Low-Power Time
  
		} // end of init()
 80006b8:	bf00      	nop
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	00000000 	.word	0x00000000
 80006c4:	41bdcd65 	.word	0x41bdcd65
 80006c8:	e826d695 	.word	0xe826d695
 80006cc:	3df12e0b 	.word	0x3df12e0b
 80006d0:	40016c00 	.word	0x40016c00
 80006d4:	fffc8603 	.word	0xfffc8603
 80006d8:	000e7f00 	.word	0x000e7f00
 80006dc:	23230000 	.word	0x23230000

080006e0 <_ZN6cHwDSI9startLTDCEtt>:
  
    //---------------------------------------------------------------
	  uint32_t startLTDC( WORD Hsize, WORD Vsize )
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	807b      	strh	r3, [r7, #2]
 80006ec:	4613      	mov	r3, r2
 80006ee:	803b      	strh	r3, [r7, #0]
	  {
			// Host Command mode Configuration Register, 
			// select High-speed or Low-power mode
			// Disable Low-power command
			DSI->CMCR = (!DSI_CMCR_GSW0TX
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <_ZN6cHwDSI9startLTDCEtt+0x3c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	669a      	str	r2, [r3, #104]	; 0x68
									|!DSI_CMCR_DLWTX 
									| 0   // Maximum Read Packet Size: High-speed
									| 0); // Acknowledge Request Enable: disable
		
			// Host Protocol Configuration Register 
			DSI->PCR =  (!DSI_PCR_CRCRXE
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <_ZN6cHwDSI9startLTDCEtt+0x3c>)
 80006f8:	2204      	movs	r2, #4
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
									|!DSI_PCR_ECCRXE
									| DSI_PCR_BTAE
									|!DSI_PCR_ETRXE
									|!DSI_PCR_ETTXE );
			
			DisplayRefresh();
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f000 f80f 	bl	8000720 <_ZN6cHwDSI14DisplayRefreshEv>
			
			return( hwLTDC.LayerConfig(Hsize, Vsize) );
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	1d18      	adds	r0, r3, #4
 8000706:	8879      	ldrh	r1, [r7, #2]
 8000708:	883a      	ldrh	r2, [r7, #0]
 800070a:	2300      	movs	r3, #0
 800070c:	f7ff fe90 	bl	8000430 <_ZN7cHwLTDC11LayerConfigEmmh>
 8000710:	4603      	mov	r3, r0
		}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40016c00 	.word	0x40016c00

08000720 <_ZN6cHwDSI14DisplayRefreshEv>:
				          | ( 0         << 6)    // Virtual channel ID 
						      | ((N&0xFFFF) << 8) ); // Word Count MSB+LSB
		}
	
    //---------------------------------------------------------------
		void DisplayRefresh()
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
		{
			DSI->WCR |= DSI_WCR_LTDCEN;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <_ZN6cHwDSI14DisplayRefreshEv+0x24>)
 800072a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800072e:	4a05      	ldr	r2, [pc, #20]	; (8000744 <_ZN6cHwDSI14DisplayRefreshEv+0x24>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
		}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	40016c00 	.word	0x40016c00

08000748 <_ZN17cHwDisplayGraphic7refreshEv>:
                            WORD        h,
                            const WORD *bitmap );
    
    //---------------------------------------------------------------
		// TODO: write comment
    virtual void refresh( void ) 
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
    {
    }
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <_ZN17cHwDisplayGraphic14getDefaultFontEv>:

    //---------------------------------------------------------------
    /*! /todo comment
    */
    virtual cHwDisplayFont getDefaultFont( void )
 800075c:	b490      	push	{r4, r7}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
    {
      return( font );
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	4614      	mov	r4, r2
 800076c:	3314      	adds	r3, #20
 800076e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000772:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bc90      	pop	{r4, r7}
 800077e:	4770      	bx	lr

08000780 <_ZN17cHwDisplayGraphic8getWidthEv>:
		
		//---------------------------------------------------------------
    /*! Get horizontal display size
        \return Number of pixel
    */
    virtual WORD getWidth( void )
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
		{
			return( Hsize );
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	b29b      	uxth	r3, r3
		}
 800078e:	4618      	mov	r0, r3
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <_ZN17cHwDisplayGraphic9getHeightEv>:

    //---------------------------------------------------------------
    /*! Get vertical display size
        \return Number of pixel
    */
    virtual WORD getHeight( void )
 800079a:	b480      	push	{r7}
 800079c:	b083      	sub	sp, #12
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
		{
			return( Vsize );
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	691b      	ldr	r3, [r3, #16]
 80007a6:	b29b      	uxth	r3, r3
		}
 80007a8:	4618      	mov	r0, r3
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <_ZN16cHwDisp_OTM8009AC1ER6cHwDSIRN7cHwPort3PinENS_11OrientationE14cHwDisplayFonth>:

		} Cmd_type;

  protected:
    //---------------------------------------------------------------
    cHwDisp_OTM8009A( cHwDSI         &hwDSI_in,
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af02      	add	r7, sp, #8
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
 80007c0:	70fb      	strb	r3, [r7, #3]
	                    Orientation     orientation_in,
                      cHwDisplayFont  font,
                      BYTE            zoom = 1 )
	
    : cHwDisplayGraphic( font, zoom ),
      hwDSI            ( hwDSI_in )
 80007c2:	68f8      	ldr	r0, [r7, #12]
 80007c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	f107 0318 	add.w	r3, r7, #24
 80007ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007d0:	f003 ff1a 	bl	8004608 <_ZN17cHwDisplayGraphicC1E14cHwDisplayFonth>
 80007d4:	4a28      	ldr	r2, [pc, #160]	; (8000878 <_ZN16cHwDisp_OTM8009AC1ER6cHwDSIRN7cHwPort3PinENS_11OrientationE14cHwDisplayFonth+0xc4>)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	68ba      	ldr	r2, [r7, #8]
 80007de:	629a      	str	r2, [r3, #40]	; 0x28
    {
      orientation = orientation_in;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	78fa      	ldrb	r2, [r7, #3]
 80007e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			
			if( orientation & LANDSCAPE )
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d008      	beq.n	8000808 <_ZN16cHwDisp_OTM8009AC1ER6cHwDSIRN7cHwPort3PinENS_11OrientationE14cHwDisplayFonth+0x54>
			{
				Hsize = lcd_x_size;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80007fc:	60da      	str	r2, [r3, #12]
			  Vsize = lcd_y_size;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000804:	611a      	str	r2, [r3, #16]
 8000806:	e007      	b.n	8000818 <_ZN16cHwDisp_OTM8009AC1ER6cHwDSIRN7cHwPort3PinENS_11OrientationE14cHwDisplayFonth+0x64>
			}
			else
			{
				Hsize = lcd_y_size;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800080e:	60da      	str	r2, [r3, #12]
			  Vsize = lcd_x_size;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000816:	611a      	str	r2, [r3, #16]
			}
				
			ax = 0;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	2200      	movs	r2, #0
 800081c:	85da      	strh	r2, [r3, #46]	; 0x2e
      ay = 0;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2200      	movs	r2, #0
 8000822:	861a      	strh	r2, [r3, #48]	; 0x30
      aw = 0;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2200      	movs	r2, #0
 8000828:	865a      	strh	r2, [r3, #50]	; 0x32
      ah = 0;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2200      	movs	r2, #0
 800082e:	869a      	strh	r2, [r3, #52]	; 0x34
			xpos = 0;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2200      	movs	r2, #0
 8000834:	86da      	strh	r2, [r3, #54]	; 0x36
			ypos = 0;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	2200      	movs	r2, #0
 800083a:	871a      	strh	r2, [r3, #56]	; 0x38
			
			// Reset LCD  
			resetPin.setMode( cHwPort::OutPP );
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2101      	movs	r1, #1
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	4798      	blx	r3
			resetPin.clr();
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	330c      	adds	r3, #12
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	4798      	blx	r3
			cSystem::delayMilliSec(20);
 8000854:	2014      	movs	r0, #20
 8000856:	f001 f9a4 	bl	8001ba2 <_ZN7cSystem13delayMilliSecEt>
			resetPin.set();
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	3304      	adds	r3, #4
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	4798      	blx	r3
			cSystem::delayMilliSec(20);
 8000866:	2014      	movs	r0, #20
 8000868:	f001 f99b 	bl	8001ba2 <_ZN7cSystem13delayMilliSecEt>
    }
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	4618      	mov	r0, r3
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	08007484 	.word	0x08007484

0800087c <_ZN16cHwDisp_OTM8009A4initEv>:
	  hwDSI.writeShort( CMD_NOP, (cmd)&0xFF);        \
		hwDSI.writeLong( (BYTE*)data, sizeof(data)  ); }

//---------------------------------------------------------------
void cHwDisp_OTM8009A::init( )
{
 800087c:	b5b0      	push	{r4, r5, r7, lr}
 800087e:	b0e8      	sub	sp, #416	; 0x1a0
 8000880:	af00      	add	r7, sp, #0
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	6018      	str	r0, [r3, #0]
                                                       // Enable CMD2 to access vendor specific commands
	WRITE_CUSTOMER_ARRAY( CMD2_ENA1,   0x80,0x09,0x01 ); // Enter in command 2 mode and set EXTC to enable address shift function (0x00)
 8000886:	4ba9      	ldr	r3, [pc, #676]	; (8000b2c <_ZN16cHwDisp_OTM8009A4initEv+0x2b0>)
 8000888:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2200      	movs	r2, #0
 800089e:	2100      	movs	r1, #0
 80008a0:	4798      	blx	r3
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	3304      	adds	r3, #4
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 80008b8:	2204      	movs	r2, #4
 80008ba:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( CMD2_ENA2,   0x80,0x09      ); // Enter ORISE Command 2: Shift address to 0x80
 80008bc:	4a9c      	ldr	r2, [pc, #624]	; (8000b30 <_ZN16cHwDisp_OTM8009A4initEv+0x2b4>)
 80008be:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80008c2:	6812      	ldr	r2, [r2, #0]
 80008c4:	4611      	mov	r1, r2
 80008c6:	8019      	strh	r1, [r3, #0]
 80008c8:	3302      	adds	r3, #2
 80008ca:	0c12      	lsrs	r2, r2, #16
 80008cc:	701a      	strb	r2, [r3, #0]
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2280      	movs	r2, #128	; 0x80
 80008e0:	2100      	movs	r1, #0
 80008e2:	4798      	blx	r3
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	3304      	adds	r3, #4
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 80008fa:	2203      	movs	r2, #3
 80008fc:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( SD_PCH_CTRL, 0x30           ); // SD_PT: Source output level during porch and non-display area to GND
 80008fe:	f243 03c4 	movw	r3, #12484	; 0x30c4
 8000902:	f8a7 3194 	strh.w	r3, [r7, #404]	; 0x194
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	2100      	movs	r1, #0
 800091a:	4798      	blx	r3
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	3304      	adds	r3, #4
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8000932:	2202      	movs	r2, #2
 8000934:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( NO_DOC1,     0x40           ); // undocumented!
 8000936:	f244 03c4 	movw	r3, #16580	; 0x40c4
 800093a:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	228a      	movs	r2, #138	; 0x8a
 8000950:	2100      	movs	r1, #0
 8000952:	4798      	blx	r3
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	3304      	adds	r3, #4
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 800096a:	2202      	movs	r2, #2
 800096c:	4798      	blx	r3

  cSystem::delayMilliSec(10);
 800096e:	200a      	movs	r0, #10
 8000970:	f001 f917 	bl	8001ba2 <_ZN7cSystem13delayMilliSecEt>

  WRITE_CUSTOMER_ARRAY( PWR_CTRL4 + 1, 0xA9); // gvdd_en_test: enable GVDD test mode
 8000974:	f64a 13c5 	movw	r3, #43461	; 0xa9c5
 8000978:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	22b1      	movs	r2, #177	; 0xb1
 800098e:	2100      	movs	r1, #0
 8000990:	4798      	blx	r3
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	3304      	adds	r3, #4
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f507 71c6 	add.w	r1, r7, #396	; 0x18c
 80009a8:	2202      	movs	r2, #2
 80009aa:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PWR_CTRL2 + 1, 0x34); // pump 4 vgh voltage: 15.0v down to 13.0v
 80009ac:	f243 43c5 	movw	r3, #13509	; 0x34c5
 80009b0:	f8a7 3188 	strh.w	r3, [r7, #392]	; 0x188
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2291      	movs	r2, #145	; 0x91
 80009c6:	2100      	movs	r1, #0
 80009c8:	4798      	blx	r3
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3304      	adds	r3, #4
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 80009e0:	2202      	movs	r2, #2
 80009e2:	4798      	blx	r3
	                                            // pump 5 vgh voltage: -12.0v downto -9.0v
  WRITE_CUSTOMER_ARRAY( P_DRV_M,       0x50); // Column inversion
 80009e4:	f245 03c0 	movw	r3, #20672	; 0x50c0
 80009e8:	f8a7 3184 	strh.w	r3, [r7, #388]	; 0x184
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	22b4      	movs	r2, #180	; 0xb4
 80009fe:	2100      	movs	r1, #0
 8000a00:	4798      	blx	r3
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	3304      	adds	r3, #4
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 8000a18:	2202      	movs	r2, #2
 8000a1a:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( VCOMDC,        0x4E); // VCOM Voltage: -1.0000v downto -1.2625v
 8000a1c:	f644 63d9 	movw	r3, #20185	; 0x4ed9
 8000a20:	f8a7 3180 	strh.w	r3, [r7, #384]	; 0x180
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	4798      	blx	r3
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	3304      	adds	r3, #4
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8000a50:	2202      	movs	r2, #2
 8000a52:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( OSC_ADJ,       0x66); // Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz)
 8000a54:	f246 63c1 	movw	r3, #26305	; 0x66c1
 8000a58:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2281      	movs	r2, #129	; 0x81
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4798      	blx	r3
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3304      	adds	r3, #4
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8000a88:	2202      	movs	r2, #2
 8000a8a:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( RGB_VIDEO_SET, 0x08); // Video mode internal
 8000a8c:	f640 03c1 	movw	r3, #2241	; 0x8c1
 8000a90:	f8a7 3178 	strh.w	r3, [r7, #376]	; 0x178
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	22a1      	movs	r2, #161	; 0xa1
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4798      	blx	r3
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PWR_CTRL2 + 2, 0x01); // pump 4&5 x6: ONLY VALID when PUMP4_EN_ASDM_HV = "0" 
 8000ac4:	f240 13c5 	movw	r3, #453	; 0x1c5
 8000ac8:	f8a7 3174 	strh.w	r3, [r7, #372]	; 0x174
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2292      	movs	r2, #146	; 0x92
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4798      	blx	r3
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	3304      	adds	r3, #4
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f507 71ba 	add.w	r1, r7, #372	; 0x174
 8000af8:	2202      	movs	r2, #2
 8000afa:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PWR_CTRL2 + 5, 0x36); // pump4 clock ratio: 1/2 line
 8000afc:	f243 63c5 	movw	r3, #14021	; 0x36c5
 8000b00:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2295      	movs	r2, #149	; 0x95
 8000b16:	2100      	movs	r1, #0
 8000b18:	4798      	blx	r3
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	e003      	b.n	8000b34 <_ZN16cHwDisp_OTM8009A4initEv+0x2b8>
 8000b2c:	010980ff 	.word	0x010980ff
 8000b30:	080072d4 	.word	0x080072d4
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( GVDDSET,       0x79,  // GVDD/NGVDD settings
 8000b3e:	4aa8      	ldr	r2, [pc, #672]	; (8000de0 <_ZN16cHwDisp_OTM8009A4initEv+0x564>)
 8000b40:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8000b44:	6812      	ldr	r2, [r2, #0]
 8000b46:	4611      	mov	r1, r2
 8000b48:	8019      	strh	r1, [r3, #0]
 8000b4a:	3302      	adds	r3, #2
 8000b4c:	0c12      	lsrs	r2, r2, #16
 8000b4e:	701a      	strb	r2, [r3, #0]
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	4798      	blx	r3
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	3304      	adds	r3, #4
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	4798      	blx	r3
	                                     0x79);
  WRITE_CUSTOMER_ARRAY( PWR_CTRL2 + 4, 0x33); // Rewrite the default value !
 8000b80:	f243 33c5 	movw	r3, #13253	; 0x33c5
 8000b84:	f8a7 3168 	strh.w	r3, [r7, #360]	; 0x168
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2294      	movs	r2, #148	; 0x94
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4798      	blx	r3
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	3304      	adds	r3, #4
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( SD_CTRL + 1,   0x1B); // Panel display timing Setting 3
 8000bb8:	f44f 53de 	mov.w	r3, #7104	; 0x1bc0
 8000bbc:	f8a7 3164 	strh.w	r3, [r7, #356]	; 0x164
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	22a3      	movs	r2, #163	; 0xa3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4798      	blx	r3
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	3304      	adds	r3, #4
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 8000bec:	2202      	movs	r2, #2
 8000bee:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PWR_CTRL1 + 2, 0x83); // Power control 1
 8000bf0:	f248 33c5 	movw	r3, #33733	; 0x83c5
 8000bf4:	f8a7 3160 	strh.w	r3, [r7, #352]	; 0x160
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2282      	movs	r2, #130	; 0x82
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4798      	blx	r3
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8000c24:	2202      	movs	r2, #2
 8000c26:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( SD_PCH_CTRL +1,0x83); // Source driver precharge
 8000c28:	f248 33c4 	movw	r3, #33732	; 0x83c4
 8000c2c:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2281      	movs	r2, #129	; 0x81
 8000c42:	2100      	movs	r1, #0
 8000c44:	4798      	blx	r3
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	3304      	adds	r3, #4
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( RGB_VIDEO_SET, 0x0E);
 8000c60:	f640 63c1 	movw	r3, #3777	; 0xec1
 8000c64:	f8a7 3158 	strh.w	r3, [r7, #344]	; 0x158
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	22a1      	movs	r2, #161	; 0xa1
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4798      	blx	r3
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8000c94:	2202      	movs	r2, #2
 8000c96:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANSET,        0x00,0x01);
 8000c98:	4a52      	ldr	r2, [pc, #328]	; (8000de4 <_ZN16cHwDisp_OTM8009A4initEv+0x568>)
 8000c9a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000c9e:	6812      	ldr	r2, [r2, #0]
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	8019      	strh	r1, [r3, #0]
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	0c12      	lsrs	r2, r2, #16
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	22a6      	movs	r2, #166	; 0xa6
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4798      	blx	r3
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3304      	adds	r3, #4
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	4798      	blx	r3
	
	WRITE_CUSTOMER_ARRAY( GOAVST,        0x85,0x01,0x00,0x84,0x01,0x00);
 8000cda:	4a43      	ldr	r2, [pc, #268]	; (8000de8 <_ZN16cHwDisp_OTM8009A4initEv+0x56c>)
 8000cdc:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8000ce0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ce4:	6018      	str	r0, [r3, #0]
 8000ce6:	3304      	adds	r3, #4
 8000ce8:	8019      	strh	r1, [r3, #0]
 8000cea:	3302      	adds	r3, #2
 8000cec:	0c0a      	lsrs	r2, r1, #16
 8000cee:	701a      	strb	r2, [r3, #0]
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	2100      	movs	r1, #0
 8000d04:	4798      	blx	r3
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3304      	adds	r3, #4
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 8000d1c:	2207      	movs	r2, #7
 8000d1e:	4798      	blx	r3
	WRITE_CUSTOMER_ARRAY( GOACLKA1,      0x18,0x04,0x03,0x39,0x00,0x00,0x00,0x18,0x03,0x03,0x3A,0x00,0x00,0x00);
 8000d20:	4b32      	ldr	r3, [pc, #200]	; (8000dec <_ZN16cHwDisp_OTM8009A4initEv+0x570>)
 8000d22:	f507 749e 	add.w	r4, r7, #316	; 0x13c
 8000d26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d28:	c407      	stmia	r4!, {r0, r1, r2}
 8000d2a:	8023      	strh	r3, [r4, #0]
 8000d2c:	3402      	adds	r4, #2
 8000d2e:	0c1b      	lsrs	r3, r3, #16
 8000d30:	7023      	strb	r3, [r4, #0]
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	22a0      	movs	r2, #160	; 0xa0
 8000d44:	2100      	movs	r1, #0
 8000d46:	4798      	blx	r3
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	3304      	adds	r3, #4
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8000d5e:	220f      	movs	r2, #15
 8000d60:	4798      	blx	r3
	WRITE_CUSTOMER_ARRAY( GOACLKA3,      0x18,0x02,0x03,0x3B,0x00,0x00,0x00,0x18,0x01,0x03,0x3C,0x00,0x00,0x00);
 8000d62:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <_ZN16cHwDisp_OTM8009A4initEv+0x574>)
 8000d64:	f507 7496 	add.w	r4, r7, #300	; 0x12c
 8000d68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d6a:	c407      	stmia	r4!, {r0, r1, r2}
 8000d6c:	8023      	strh	r3, [r4, #0]
 8000d6e:	3402      	adds	r4, #2
 8000d70:	0c1b      	lsrs	r3, r3, #16
 8000d72:	7023      	strb	r3, [r4, #0]
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	22b0      	movs	r2, #176	; 0xb0
 8000d86:	2100      	movs	r1, #0
 8000d88:	4798      	blx	r3
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 8000da0:	220f      	movs	r2, #15
 8000da2:	4798      	blx	r3
	WRITE_CUSTOMER_ARRAY( GOAECLK,       0x01,0x01,0x20,0x20,0x00,0x00,0x01,0x02,0x00,0x00);
 8000da4:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <_ZN16cHwDisp_OTM8009A4initEv+0x578>)
 8000da6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000daa:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dac:	c303      	stmia	r3!, {r0, r1}
 8000dae:	801a      	strh	r2, [r3, #0]
 8000db0:	3302      	adds	r3, #2
 8000db2:	0c12      	lsrs	r2, r2, #16
 8000db4:	701a      	strb	r2, [r3, #0]
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	22c0      	movs	r2, #192	; 0xc0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4798      	blx	r3
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	3304      	adds	r3, #4
 8000ddc:	e00c      	b.n	8000df8 <_ZN16cHwDisp_OTM8009A4initEv+0x57c>
 8000dde:	bf00      	nop
 8000de0:	080072d8 	.word	0x080072d8
 8000de4:	080072dc 	.word	0x080072dc
 8000de8:	080072e0 	.word	0x080072e0
 8000dec:	080072e8 	.word	0x080072e8
 8000df0:	080072f8 	.word	0x080072f8
 8000df4:	08007308 	.word	0x08007308
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8000dfe:	220b      	movs	r2, #11
 8000e00:	4798      	blx	r3
 
  WRITE_CUSTOMER_ARRAY( NO_DOC2,       0x00); // undocumented! 
 8000e02:	23cf      	movs	r3, #207	; 0xcf
 8000e04:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	22d0      	movs	r2, #208	; 0xd0
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4798      	blx	r3
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8000e34:	2202      	movs	r2, #2
 8000e36:	4798      	blx	r3
	
	WRITE_CUSTOMER_ARRAY( PANCTRLSET1,   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 8000e38:	4aa5      	ldr	r2, [pc, #660]	; (80010d0 <_ZN16cHwDisp_OTM8009A4initEv+0x854>)
 8000e3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e40:	c303      	stmia	r3!, {r0, r1}
 8000e42:	801a      	strh	r2, [r3, #0]
 8000e44:	3302      	adds	r3, #2
 8000e46:	0c12      	lsrs	r2, r2, #16
 8000e48:	701a      	strb	r2, [r3, #0]
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4798      	blx	r3
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	3304      	adds	r3, #4
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000e76:	220b      	movs	r2, #11
 8000e78:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET2,   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 8000e7a:	4b96      	ldr	r3, [pc, #600]	; (80010d4 <_ZN16cHwDisp_OTM8009A4initEv+0x858>)
 8000e7c:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8000e80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2290      	movs	r2, #144	; 0x90
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4798      	blx	r3
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	3304      	adds	r3, #4
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8000eb2:	2210      	movs	r2, #16
 8000eb4:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET3,   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 8000eb6:	4b87      	ldr	r3, [pc, #540]	; (80010d4 <_ZN16cHwDisp_OTM8009A4initEv+0x858>)
 8000eb8:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8000ebc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ebe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	22a0      	movs	r2, #160	; 0xa0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4798      	blx	r3
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8000eee:	2210      	movs	r2, #16
 8000ef0:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET4,   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 8000ef2:	4a77      	ldr	r2, [pc, #476]	; (80010d0 <_ZN16cHwDisp_OTM8009A4initEv+0x854>)
 8000ef4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ef8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000efa:	c303      	stmia	r3!, {r0, r1}
 8000efc:	801a      	strh	r2, [r3, #0]
 8000efe:	3302      	adds	r3, #2
 8000f00:	0c12      	lsrs	r2, r2, #16
 8000f02:	701a      	strb	r2, [r3, #0]
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	22b0      	movs	r2, #176	; 0xb0
 8000f16:	2100      	movs	r1, #0
 8000f18:	4798      	blx	r3
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 8000f30:	220b      	movs	r2, #11
 8000f32:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET5,   0x00,0x04,0x04,0x04,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 8000f34:	4b68      	ldr	r3, [pc, #416]	; (80010d8 <_ZN16cHwDisp_OTM8009A4initEv+0x85c>)
 8000f36:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 8000f3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	22c0      	movs	r2, #192	; 0xc0
 8000f52:	2100      	movs	r1, #0
 8000f54:	4798      	blx	r3
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3304      	adds	r3, #4
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET6,   0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x04,0x04,0x04,0x00,0x00,0x00,0x00);
 8000f70:	4b5a      	ldr	r3, [pc, #360]	; (80010dc <_ZN16cHwDisp_OTM8009A4initEv+0x860>)
 8000f72:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8000f76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	22d0      	movs	r2, #208	; 0xd0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4798      	blx	r3
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8000fa8:	2210      	movs	r2, #16
 8000faa:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET7,   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 8000fac:	4a48      	ldr	r2, [pc, #288]	; (80010d0 <_ZN16cHwDisp_OTM8009A4initEv+0x854>)
 8000fae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000fb2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fb4:	c303      	stmia	r3!, {r0, r1}
 8000fb6:	801a      	strh	r2, [r3, #0]
 8000fb8:	3302      	adds	r3, #2
 8000fba:	0c12      	lsrs	r2, r2, #16
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	22e0      	movs	r2, #224	; 0xe0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4798      	blx	r3
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8000fea:	220b      	movs	r2, #11
 8000fec:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET8,   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);
 8000fee:	4a3c      	ldr	r2, [pc, #240]	; (80010e0 <_ZN16cHwDisp_OTM8009A4initEv+0x864>)
 8000ff0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ff4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ff6:	c303      	stmia	r3!, {r0, r1}
 8000ff8:	801a      	strh	r2, [r3, #0]
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	0c12      	lsrs	r2, r2, #16
 8000ffe:	701a      	strb	r2, [r3, #0]
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	22f0      	movs	r2, #240	; 0xf0
 8001012:	2100      	movs	r1, #0
 8001014:	4798      	blx	r3
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	3304      	adds	r3, #4
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 800102c:	220b      	movs	r2, #11
 800102e:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANU2D1,       0x00,0x26,0x09,0x0B,0x01,0x25,0x00,0x00,0x00,0x00);
 8001030:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001034:	4a2b      	ldr	r2, [pc, #172]	; (80010e4 <_ZN16cHwDisp_OTM8009A4initEv+0x868>)
 8001036:	ca07      	ldmia	r2, {r0, r1, r2}
 8001038:	c303      	stmia	r3!, {r0, r1}
 800103a:	801a      	strh	r2, [r3, #0]
 800103c:	3302      	adds	r3, #2
 800103e:	0c12      	lsrs	r2, r2, #16
 8001040:	701a      	strb	r2, [r3, #0]
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2280      	movs	r2, #128	; 0x80
 8001054:	2100      	movs	r1, #0
 8001056:	4798      	blx	r3
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3304      	adds	r3, #4
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800106e:	220b      	movs	r2, #11
 8001070:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANU2D2,       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x26,0x0A,0x0C,0x02);
 8001072:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001076:	4a1c      	ldr	r2, [pc, #112]	; (80010e8 <_ZN16cHwDisp_OTM8009A4initEv+0x86c>)
 8001078:	461c      	mov	r4, r3
 800107a:	4613      	mov	r3, r2
 800107c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800107e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2290      	movs	r2, #144	; 0x90
 8001094:	2100      	movs	r1, #0
 8001096:	4798      	blx	r3
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	3304      	adds	r3, #4
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80010ae:	2210      	movs	r2, #16
 80010b0:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANU2D3,       0x25,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 80010b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80010b6:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <_ZN16cHwDisp_OTM8009A4initEv+0x870>)
 80010b8:	461c      	mov	r4, r3
 80010ba:	4613      	mov	r3, r2
 80010bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ce:	e00f      	b.n	80010f0 <_ZN16cHwDisp_OTM8009A4initEv+0x874>
 80010d0:	08007314 	.word	0x08007314
 80010d4:	08007320 	.word	0x08007320
 80010d8:	08007330 	.word	0x08007330
 80010dc:	08007340 	.word	0x08007340
 80010e0:	08007350 	.word	0x08007350
 80010e4:	0800735c 	.word	0x0800735c
 80010e8:	08007368 	.word	0x08007368
 80010ec:	08007378 	.word	0x08007378
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	22a0      	movs	r2, #160	; 0xa0
 80010f6:	2100      	movs	r1, #0
 80010f8:	4798      	blx	r3
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3304      	adds	r3, #4
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001110:	2210      	movs	r2, #16
 8001112:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PAND2U1,       0x00,0x25,0x0C,0x0A,0x02,0x26,0x00,0x00,0x00,0x00);
 8001114:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001118:	4aa2      	ldr	r2, [pc, #648]	; (80013a4 <_ZN16cHwDisp_OTM8009A4initEv+0xb28>)
 800111a:	ca07      	ldmia	r2, {r0, r1, r2}
 800111c:	c303      	stmia	r3!, {r0, r1}
 800111e:	801a      	strh	r2, [r3, #0]
 8001120:	3302      	adds	r3, #2
 8001122:	0c12      	lsrs	r2, r2, #16
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	22b0      	movs	r2, #176	; 0xb0
 8001138:	2100      	movs	r1, #0
 800113a:	4798      	blx	r3
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	3304      	adds	r3, #4
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001152:	220b      	movs	r2, #11
 8001154:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PAND2U2,       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x25,0x0B,0x09,0x01);
 8001156:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800115a:	4a93      	ldr	r2, [pc, #588]	; (80013a8 <_ZN16cHwDisp_OTM8009A4initEv+0xb2c>)
 800115c:	461c      	mov	r4, r3
 800115e:	4613      	mov	r3, r2
 8001160:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001162:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	22c0      	movs	r2, #192	; 0xc0
 8001178:	2100      	movs	r1, #0
 800117a:	4798      	blx	r3
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	3304      	adds	r3, #4
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001192:	2210      	movs	r2, #16
 8001194:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PAND2U3,       0x26,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 8001196:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800119a:	4a84      	ldr	r2, [pc, #528]	; (80013ac <_ZN16cHwDisp_OTM8009A4initEv+0xb30>)
 800119c:	461c      	mov	r4, r3
 800119e:	4613      	mov	r3, r2
 80011a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	22d0      	movs	r2, #208	; 0xd0
 80011b8:	2100      	movs	r1, #0
 80011ba:	4798      	blx	r3
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3304      	adds	r3, #4
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80011d2:	2210      	movs	r2, #16
 80011d4:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( PWR_CTRL1 + 1, 0x66); // Pump 1 min and max DM  
 80011d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011da:	f246 62c5 	movw	r2, #26309	; 0x66c5
 80011de:	801a      	strh	r2, [r3, #0]
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2281      	movs	r2, #129	; 0x81
 80011f2:	2100      	movs	r1, #0
 80011f4:	4798      	blx	r3
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3304      	adds	r3, #4
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800120c:	2202      	movs	r2, #2
 800120e:	4798      	blx	r3
	
  WRITE_CUSTOMER_ARRAY( PWM_PARA3,       32); // PWM-Freq, DBF=4,141 kHz (if PWM_FREQ_SEL[1:0]=01)
 8001210:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001214:	f242 02c6 	movw	r2, #8390	; 0x20c6
 8001218:	801a      	strh	r2, [r3, #0]
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	22b1      	movs	r2, #177	; 0xb1
 800122c:	2100      	movs	r1, #0
 800122e:	4798      	blx	r3
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3304      	adds	r3, #4
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001246:	2202      	movs	r2, #2
 8001248:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( NO_DOC3,       0x06); // undocumented, but important
 800124a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800124e:	f240 62f5 	movw	r2, #1781	; 0x6f5
 8001252:	801a      	strh	r2, [r3, #0]
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	22b6      	movs	r2, #182	; 0xb6
 8001266:	2100      	movs	r1, #0
 8001268:	4798      	blx	r3
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3304      	adds	r3, #4
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001280:	2202      	movs	r2, #2
 8001282:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( CMD2_ENA1,     0xFF,  // Exit CMD2 mode
 8001284:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001288:	f04f 32ff 	mov.w	r2, #4294967295
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	4798      	blx	r3
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	3304      	adds	r3, #4
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80012ba:	2204      	movs	r2, #4
 80012bc:	4798      	blx	r3
	                                     0xFF,0xFF);

  WRITE_SYS_CMD( CMD_NOP, 0x00 ); // NOP - goes back to DCS std command ?
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	4798      	blx	r3
          
  WRITE_CUSTOMER_ARRAY( GMCT2_2P,  0x00,0x09,0x0F,0x0E,0x07,0x10,0x0B,0x0A,0x04,0x07,0x0B,0x08,0x0F,0x10,0x0A,0x01);
 80012d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012d8:	4a35      	ldr	r2, [pc, #212]	; (80013b0 <_ZN16cHwDisp_OTM8009A4initEv+0xb34>)
 80012da:	461c      	mov	r4, r3
 80012dc:	4615      	mov	r5, r2
 80012de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012e2:	682b      	ldr	r3, [r5, #0]
 80012e4:	7023      	strb	r3, [r4, #0]
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	4798      	blx	r3
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3304      	adds	r3, #4
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001312:	2211      	movs	r2, #17
 8001314:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( GMCT2_2N,  0x00,0x09,0x0F,0x0E,0x07,0x10,0x0B,0x0A,0x04,0x07,0x0B,0x08,0x0F,0x10,0x0A,0x01);
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4a26      	ldr	r2, [pc, #152]	; (80013b4 <_ZN16cHwDisp_OTM8009A4initEv+0xb38>)
 800131c:	461c      	mov	r4, r3
 800131e:	4615      	mov	r5, r2
 8001320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001324:	682b      	ldr	r3, [r5, #0]
 8001326:	7023      	strb	r3, [r4, #0]
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	4798      	blx	r3
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3304      	adds	r3, #4
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f107 011c 	add.w	r1, r7, #28
 8001354:	2211      	movs	r2, #17
 8001356:	4798      	blx	r3
          
  WRITE_SYS_CMD( CMD_SLPOUT, 0x00 ); // Send Sleep Out command to display : no parameter 
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2200      	movs	r2, #0
 800136a:	2111      	movs	r1, #17
 800136c:	4798      	blx	r3
  
  cSystem::delayMilliSec(120);
 800136e:	2078      	movs	r0, #120	; 0x78
 8001370:	f000 fc17 	bl	8001ba2 <_ZN7cSystem13delayMilliSecEt>

  WRITE_SYS_CMD( CMD_COLMOD, 0x77 ); // RGB888, MCU: 24bit/pixel, RGB:24bit/pixel,1-times
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2277      	movs	r2, #119	; 0x77
 8001386:	213a      	movs	r1, #58	; 0x3a
 8001388:	4798      	blx	r3


  switch( orientation )
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001392:	2b03      	cmp	r3, #3
 8001394:	d034      	beq.n	8001400 <_ZN16cHwDisp_OTM8009A4initEv+0xb84>
 8001396:	2b03      	cmp	r3, #3
 8001398:	dc0e      	bgt.n	80013b8 <_ZN16cHwDisp_OTM8009A4initEv+0xb3c>
 800139a:	2b01      	cmp	r3, #1
 800139c:	d024      	beq.n	80013e8 <_ZN16cHwDisp_OTM8009A4initEv+0xb6c>
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d016      	beq.n	80013d0 <_ZN16cHwDisp_OTM8009A4initEv+0xb54>
 80013a2:	e009      	b.n	80013b8 <_ZN16cHwDisp_OTM8009A4initEv+0xb3c>
 80013a4:	08007388 	.word	0x08007388
 80013a8:	08007394 	.word	0x08007394
 80013ac:	080073a4 	.word	0x080073a4
 80013b0:	080073b4 	.word	0x080073b4
 80013b4:	080073c8 	.word	0x080073c8
	{
		default:                                      //MY     MX     MV
		case PORTRAIT_0:		WRITE_SYS_CMD( CMD_MADCTR, (0<<7)|(0<<6)|(0<<5) ); break;
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2200      	movs	r2, #0
 80013ca:	2136      	movs	r1, #54	; 0x36
 80013cc:	4798      	blx	r3
 80013ce:	e023      	b.n	8001418 <_ZN16cHwDisp_OTM8009A4initEv+0xb9c>
		case PORTRAIT_180:	WRITE_SYS_CMD( CMD_MADCTR, (1<<7)|(1<<6)|(0<<5) ); break;
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	22c0      	movs	r2, #192	; 0xc0
 80013e2:	2136      	movs	r1, #54	; 0x36
 80013e4:	4798      	blx	r3
 80013e6:	e017      	b.n	8001418 <_ZN16cHwDisp_OTM8009A4initEv+0xb9c>
		case LANDSCAPE_90:	WRITE_SYS_CMD( CMD_MADCTR, (0<<7)|(1<<6)|(1<<5) ); break;
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2260      	movs	r2, #96	; 0x60
 80013fa:	2136      	movs	r1, #54	; 0x36
 80013fc:	4798      	blx	r3
 80013fe:	e00b      	b.n	8001418 <_ZN16cHwDisp_OTM8009A4initEv+0xb9c>
		case LANDSCAPE_270:	WRITE_SYS_CMD( CMD_MADCTR, (1<<7)|(0<<6)|(1<<5) ); break;
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	22a0      	movs	r2, #160	; 0xa0
 8001412:	2136      	movs	r1, #54	; 0x36
 8001414:	4798      	blx	r3
 8001416:	bf00      	nop
	}
													 // Start-Addr,  End-Addr
	WRITE_SYS_ARRAY( CMD_CASET, 0x00, 0x00,  (Hsize-1)>>8, (Hsize-1)&0xFF );
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	711a      	strb	r2, [r3, #4]
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	222a      	movs	r2, #42	; 0x2a
 8001428:	701a      	strb	r2, [r3, #0]
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	3b01      	subs	r3, #1
 8001432:	0a1b      	lsrs	r3, r3, #8
 8001434:	b2da      	uxtb	r2, r3
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	70da      	strb	r2, [r3, #3]
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	3b01      	subs	r3, #1
 8001446:	b2da      	uxtb	r2, r3
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	711a      	strb	r2, [r3, #4]
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3304      	adds	r3, #4
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f107 0114 	add.w	r1, r7, #20
 8001464:	2205      	movs	r2, #5
 8001466:	4798      	blx	r3
	WRITE_SYS_ARRAY( CMD_PASET, 0x00, 0x00,  (Vsize-1)>>8, (Vsize-1)&0xFF );
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	711a      	strb	r2, [r3, #4]
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	222b      	movs	r2, #43	; 0x2b
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	3b01      	subs	r3, #1
 8001482:	0a1b      	lsrs	r3, r3, #8
 8001484:	b2da      	uxtb	r2, r3
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	70da      	strb	r2, [r3, #3]
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	3b01      	subs	r3, #1
 8001496:	b2da      	uxtb	r2, r3
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	711a      	strb	r2, [r3, #4]
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3304      	adds	r3, #4
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f107 010c 	add.w	r1, r7, #12
 80014b4:	2205      	movs	r2, #5
 80014b6:	4798      	blx	r3

  WRITE_SYS_CMD( CMD_WRDISBV,  0x7F ); // Display Brightness: medium
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	227f      	movs	r2, #127	; 0x7f
 80014ca:	2151      	movs	r1, #81	; 0x51
 80014cc:	4798      	blx	r3
  WRITE_SYS_CMD( CMD_WRCTRLD,  0x2C ); // Control Display: Brightness Control Block: On, 
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	222c      	movs	r2, #44	; 0x2c
 80014e0:	2153      	movs	r1, #83	; 0x53
 80014e2:	4798      	blx	r3
			                                 //                  Display Dimming: on
	                                     //                  BackLight: on
  WRITE_SYS_CMD( CMD_WRCABC,   0x02 ); // Content Adaptive Brightness: Still Picture
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2202      	movs	r2, #2
 80014f6:	2155      	movs	r1, #85	; 0x55
 80014f8:	4798      	blx	r3
  WRITE_SYS_CMD( CMD_WRCABCMB, 0x7F ); // CABC Minimum Brightness: maximum
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	227f      	movs	r2, #127	; 0x7f
 800150c:	215e      	movs	r1, #94	; 0x5e
 800150e:	4798      	blx	r3

  WRITE_SYS_CMD( CMD_DISPOFF, 0x00 ); // Display Off
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2200      	movs	r2, #0
 8001522:	2128      	movs	r1, #40	; 0x28
 8001524:	4798      	blx	r3
  WRITE_SYS_CMD( CMD_NOP,    0x00 ); // NOP command
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	4798      	blx	r3
}
 800153c:	bf00      	nop
 800153e:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8001542:	46bd      	mov	sp, r7
 8001544:	bdb0      	pop	{r4, r5, r7, pc}
 8001546:	bf00      	nop

08001548 <_ZN19cHwDisp_OTM8009AramC1ER6cHwDSIRN7cHwPort3PinEN16cHwDisp_OTM8009A11OrientationE14cHwDisplayFonth>:
//
// cHwDisp_OTM8009Aram
//
//*******************************************************************
//---------------------------------------------------------------
cHwDisp_OTM8009Aram::cHwDisp_OTM8009Aram
 8001548:	b5b0      	push	{r4, r5, r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af04      	add	r7, sp, #16
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
 8001554:	70fb      	strb	r3, [r7, #3]
                          cHwDisplayFont  font,
                          BYTE            zoom )

: cHwDisp_OTM8009A( hwDSI_in, 
                    resetPin, 
                    orientation,font, zoom )
 8001556:	68fc      	ldr	r4, [r7, #12]
 8001558:	78fd      	ldrb	r5, [r7, #3]
 800155a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800155e:	9303      	str	r3, [sp, #12]
 8001560:	466b      	mov	r3, sp
 8001562:	f107 0220 	add.w	r2, r7, #32
 8001566:	ca07      	ldmia	r2, {r0, r1, r2}
 8001568:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800156c:	462b      	mov	r3, r5
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	4620      	mov	r0, r4
 8001574:	f7ff f91e 	bl	80007b4 <_ZN16cHwDisp_OTM8009AC1ER6cHwDSIRN7cHwPort3PinENS_11OrientationE14cHwDisplayFonth>
 8001578:	4a1b      	ldr	r2, [pc, #108]	; (80015e8 <_ZN19cHwDisp_OTM8009AramC1ER6cHwDSIRN7cHwPort3PinEN16cHwDisp_OTM8009A11OrientationE14cHwDisplayFonth+0xa0>)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	601a      	str	r2, [r3, #0]
{
 	hwDSI.Init(Hsize, Vsize, true);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	b299      	uxth	r1, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	b29a      	uxth	r2, r3
 800158e:	2301      	movs	r3, #1
 8001590:	f7fe ffb6 	bl	8000500 <_ZN6cHwDSI4InitEttb>
  
	cHwDisp_OTM8009A::init( );
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff f970 	bl	800087c <_ZN16cHwDisp_OTM8009A4initEv>
	

	ptrStart = (__IO uint16_t *)hwDSI.startLTDC(Hsize, Vsize);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	b299      	uxth	r1, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	f7ff f897 	bl	80006e0 <_ZN6cHwDSI9startLTDCEtt>
 80015b2:	4603      	mov	r3, r0
 80015b4:	461a      	mov	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	641a      	str	r2, [r3, #64]	; 0x40
  ptr      = ptrStart;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	63da      	str	r2, [r3, #60]	; 0x3c
  
  
	WRITE_SYS_CMD( CMD_DISPON, 0x00);										 
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2200      	movs	r2, #0
 80015d0:	2129      	movs	r1, #41	; 0x29
 80015d2:	4798      	blx	r3
  hwDSI.DisplayRefresh(); 
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff f8a1 	bl	8000720 <_ZN6cHwDSI14DisplayRefreshEv>
}
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bdb0      	pop	{r4, r5, r7, pc}
 80015e8:	08007428 	.word	0x08007428

080015ec <_ZN19cHwDisp_OTM8009Aram7refreshEv>:
  
//---------------------------------------------------------------
void cHwDisp_OTM8009Aram::refresh( void )
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  hwDSI.DisplayRefresh(); 
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff f891 	bl	8000720 <_ZN6cHwDSI14DisplayRefreshEv>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <_ZN19cHwDisp_OTM8009Aram5clearEv>:
  
//---------------------------------------------------------------
void cHwDisp_OTM8009Aram::clear( void )
{
 8001606:	b480      	push	{r7}
 8001608:	b085      	sub	sp, #20
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  ptr = ptrStart;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	63da      	str	r2, [r3, #60]	; 0x3c
  __IO uint16_t *ptrEnd = ptr + Hsize*Vsize*sizeof(uint16_t);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	6909      	ldr	r1, [r1, #16]
 8001622:	fb01 f303 	mul.w	r3, r1, r3
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]
  while( ptr < ptrEnd )
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	429a      	cmp	r2, r3
 8001634:	d908      	bls.n	8001648 <_ZN19cHwDisp_OTM8009Aram5clearEv+0x42>
    *ptr++ = BackColor;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163a:	1c99      	adds	r1, r3, #2
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	63d1      	str	r1, [r2, #60]	; 0x3c
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001644:	801a      	strh	r2, [r3, #0]
  while( ptr < ptrEnd )
 8001646:	e7f1      	b.n	800162c <_ZN19cHwDisp_OTM8009Aram5clearEv+0x26>
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_ZN19cHwDisp_OTM8009Aram7setAreaEtttt>:
//---------------------------------------------------------------
void cHwDisp_OTM8009Aram::setArea( WORD x,
                                      WORD y,
                                      WORD w,
                                      WORD h )
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	4608      	mov	r0, r1
 800165e:	4611      	mov	r1, r2
 8001660:	461a      	mov	r2, r3
 8001662:	4603      	mov	r3, r0
 8001664:	817b      	strh	r3, [r7, #10]
 8001666:	460b      	mov	r3, r1
 8001668:	813b      	strh	r3, [r7, #8]
 800166a:	4613      	mov	r3, r2
 800166c:	80fb      	strh	r3, [r7, #6]
  ax = x;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	897a      	ldrh	r2, [r7, #10]
 8001672:	85da      	strh	r2, [r3, #46]	; 0x2e
  ay = y;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	893a      	ldrh	r2, [r7, #8]
 8001678:	861a      	strh	r2, [r3, #48]	; 0x30
  aw = w;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	88fa      	ldrh	r2, [r7, #6]
 800167e:	865a      	strh	r2, [r3, #50]	; 0x32
  ah = h;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8b3a      	ldrh	r2, [r7, #24]
 8001684:	869a      	strh	r2, [r3, #52]	; 0x34
  xpos   = ax;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	86da      	strh	r2, [r3, #54]	; 0x36
  ypos   = ay*Hsize;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	b29b      	uxth	r3, r3
 8001698:	fb12 f303 	smulbb	r3, r2, r3
 800169c:	b29a      	uxth	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	871a      	strh	r2, [r3, #56]	; 0x38
  offset = (DWORD)y*Hsize + x;
 80016a2:	893b      	ldrh	r3, [r7, #8]
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	68d2      	ldr	r2, [r2, #12]
 80016a8:	fb02 f203 	mul.w	r2, r2, r3
 80016ac:	897b      	ldrh	r3, [r7, #10]
 80016ae:	441a      	add	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	645a      	str	r2, [r3, #68]	; 0x44
  
  ptr = ptrStart + offset; 
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	441a      	add	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_ZN19cHwDisp_OTM8009Aram8setPixelEttt>:

//---------------------------------------------------------------
void cHwDisp_OTM8009Aram::setPixel( WORD color,
                                       WORD x,
                                       WORD y )
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	4608      	mov	r0, r1
 80016da:	4611      	mov	r1, r2
 80016dc:	461a      	mov	r2, r3
 80016de:	4603      	mov	r3, r0
 80016e0:	817b      	strh	r3, [r7, #10]
 80016e2:	460b      	mov	r3, r1
 80016e4:	813b      	strh	r3, [r7, #8]
 80016e6:	4613      	mov	r3, r2
 80016e8:	80fb      	strh	r3, [r7, #6]
   ptr = ptrStart + (DWORD)y*Hsize + x;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	68f9      	ldr	r1, [r7, #12]
 80016f2:	68c9      	ldr	r1, [r1, #12]
 80016f4:	fb01 f103 	mul.w	r1, r1, r3
 80016f8:	893b      	ldrh	r3, [r7, #8]
 80016fa:	440b      	add	r3, r1
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	441a      	add	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	63da      	str	r2, [r3, #60]	; 0x3c
  *ptr = color;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001708:	897a      	ldrh	r2, [r7, #10]
 800170a:	801a      	strh	r2, [r3, #0]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <_ZN19cHwDisp_OTM8009Aram8setPixelEt>:

//---------------------------------------------------------------
void cHwDisp_OTM8009Aram::setPixel( WORD color )
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
  *ptr++ = color;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001728:	1c99      	adds	r1, r3, #2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	63d1      	str	r1, [r2, #60]	; 0x3c
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	801a      	strh	r2, [r3, #0]
  xpos++;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001736:	3301      	adds	r3, #1
 8001738:	b29a      	uxth	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	86da      	strh	r2, [r3, #54]	; 0x36
  if( xpos >= ax+aw)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001742:	461a      	mov	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001748:	4619      	mov	r1, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800174e:	440b      	add	r3, r1
 8001750:	429a      	cmp	r2, r3
 8001752:	db18      	blt.n	8001786 <_ZN19cHwDisp_OTM8009Aram8setPixelEt+0x6e>
  {
    xpos = ax;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	86da      	strh	r2, [r3, #54]	; 0x36
    ypos++;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001760:	3301      	adds	r3, #1
 8001762:	b29a      	uxth	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	871a      	strh	r2, [r3, #56]	; 0x38
    offset += Hsize;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	441a      	add	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	645a      	str	r2, [r3, #68]	; 0x44
    ptr = ptrStart + offset;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	441a      	add	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	db0b      	blt.n	80017be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	f003 021f 	and.w	r2, r3, #31
 80017ac:	4907      	ldr	r1, [pc, #28]	; (80017cc <__NVIC_EnableIRQ+0x38>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	2001      	movs	r0, #1
 80017b6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000e100 	.word	0xe000e100

080017d0 <_Znaj>:
typedef uint16_t   WORD;
typedef uint32_t   DWORD;
typedef uint32_t   MTYPE;

//*******************************************************************
inline void* operator new[]    ( unsigned int  x ) { return malloc(x); }
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f005 f89b 	bl	8006914 <malloc>
 80017de:	4603      	mov	r3, r0
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <_ZN8cHwTimerC1Ev>:

  protected:
    //---------------------------------------------------------------
    // Standard constructor
    // 
    cHwTimer( void )
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
    {
 80017f0:	4a06      	ldr	r2, [pc, #24]	; (800180c <_ZN8cHwTimerC1Ev+0x24>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3308      	adds	r3, #8
 80017fa:	4618      	mov	r0, r3
 80017fc:	f004 fa23 	bl	8005c46 <_ZN5cListC1Ev>
    }
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	08007770 	.word	0x08007770

08001810 <_ZN7cHwPort3Pin7setModeENS_4ModeE>:

        //---------------------------------------------------------------
        /*! Configure the operating mode
            \param mode New operating mode
        */
        virtual void setMode( Mode mode )
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]
        {
          port.setPinMode( pinId, mode );
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6858      	ldr	r0, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	3304      	adds	r3, #4
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	7a11      	ldrb	r1, [r2, #8]
 800182e:	78fa      	ldrb	r2, [r7, #3]
 8001830:	4798      	blx	r3
        }
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <_ZN7cHwPort3Pin3setEv>:

        //---------------------------------------------------------------
        /*! Set port pin to high
        */
        virtual void set( void )
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
        {
          port.set( pinMask );
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6858      	ldr	r0, [r3, #4]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	3308      	adds	r3, #8
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	68d2      	ldr	r2, [r2, #12]
 8001854:	4611      	mov	r1, r2
 8001856:	4798      	blx	r3
        }
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <_ZN7cHwPort3Pin3setEb>:

        //---------------------------------------------------------------
        /*! Set port pin to value
            \param value
        */
        virtual void set( bool value )
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	70fb      	strb	r3, [r7, #3]
        {
          if( value )  port.set( pinMask );
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00b      	beq.n	800188a <_ZN7cHwPort3Pin3setEb+0x2a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6858      	ldr	r0, [r3, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	3308      	adds	r3, #8
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	68d2      	ldr	r2, [r2, #12]
 8001884:	4611      	mov	r1, r2
 8001886:	4798      	blx	r3
          else         port.clr( pinMask );
        }
 8001888:	e00a      	b.n	80018a0 <_ZN7cHwPort3Pin3setEb+0x40>
          else         port.clr( pinMask );
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6858      	ldr	r0, [r3, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3310      	adds	r3, #16
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	68d2      	ldr	r2, [r2, #12]
 800189c:	4611      	mov	r1, r2
 800189e:	4798      	blx	r3
        }
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <_ZN7cHwPort3Pin3clrEv>:

        //---------------------------------------------------------------
        /*! Clear port pin to low
        */
        virtual void clr( void )
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
        {
          port.clr( pinMask );
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6858      	ldr	r0, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	3310      	adds	r3, #16
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	68d2      	ldr	r2, [r2, #12]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4798      	blx	r3
        }
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <_ZN7cHwPort3Pin3getEv>:

        //---------------------------------------------------------------
        /*! Get input value of the port pin
            \return Input value
        */
        virtual bool get( void )
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
        {
          return( (port.get() & pinMask) != 0 );
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	3314      	adds	r3, #20
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4610      	mov	r0, r2
 80018e6:	4798      	blx	r3
 80018e8:	4602      	mov	r2, r0
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf14      	ite	ne
 80018f4:	2301      	movne	r3, #1
 80018f6:	2300      	moveq	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
        }
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <_ZN7cHwPortC1Ev>:

  protected:
    //---------------------------------------------------------------
    // Standard constructor
    //
    cHwPort( void )
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
    {
 800190c:	4a04      	ldr	r2, [pc, #16]	; (8001920 <_ZN7cHwPortC1Ev+0x1c>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	601a      	str	r2, [r3, #0]
    }
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	08007734 	.word	0x08007734

08001924 <_ZN14cHwI2Cmaster_N11waitForAcknEm>:
                             BYTE  sizeAdr,
                             BYTE *data,
                             BYTE  sizeData );
   	
		//---------------------------------------------------------------
    virtual void waitForAckn( MTYPE state ) {};
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <_ZN14cHwI2Cmaster_N5startEv>:

    //---------------------------------------------------------------
    virtual void start( void ) {};
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <_ZN14cHwI2Cmaster_N4stopEv>:

    //---------------------------------------------------------------
    virtual void stop( void ) {};
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <_ZN14cHwI2Cmaster_N8sendAddrEh>:

    //---------------------------------------------------------------
    virtual void sendAddr( BYTE addr ) {};
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	460b      	mov	r3, r1
 800196c:	70fb      	strb	r3, [r7, #3]
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <_ZN14cHwI2Cmaster_N9writeByteEh>:

    //---------------------------------------------------------------
    virtual void writeByte( BYTE byte ) {};
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	460b      	mov	r3, r1
 8001984:	70fb      	strb	r3, [r7, #3]
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <_ZN14cHwI2Cmaster_N11readByteAckEv>:

    //---------------------------------------------------------------
    virtual BYTE readByteAck( void ) { return(0); };
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	2300      	movs	r3, #0
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <_ZN14cHwI2Cmaster_N12readByteNackEv>:

    //---------------------------------------------------------------
    virtual BYTE readByteNack( void ) { return(0); };
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	2300      	movs	r3, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <_ZN9cHwPort_N3setEm>:

    //---------------------------------------------------------------
    virtual void setPinMode( BYTE pinId, Mode modeIn );

    //---------------------------------------------------------------
    virtual void set( MTYPE mask )
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
    {
      ptr->BSRR = mask;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	619a      	str	r2, [r3, #24]
    }
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_ZN9cHwPort_N3setEmm>:

    //---------------------------------------------------------------
    virtual void set( MTYPE mask, MTYPE value )
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
    {
      ptr->BSRR = (mask &  value);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	400a      	ands	r2, r1
 80019f2:	619a      	str	r2, [r3, #24]
      ptr->BSRR = (mask & ~value)<<16;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	401a      	ands	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	0412      	lsls	r2, r2, #16
 8001a02:	619a      	str	r2, [r3, #24]
    }
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <_ZN9cHwPort_N3clrEm>:

    //---------------------------------------------------------------
    virtual void clr( MTYPE mask )
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
    {
      ptr->BSRR = mask << 16;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	0412      	lsls	r2, r2, #16
 8001a22:	619a      	str	r2, [r3, #24]
    }
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <_ZN9cHwPort_N3getEv>:

    //---------------------------------------------------------------
    virtual MTYPE get( void )
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
    {
      return( ptr->IDR );
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
    }
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <_ZN6cHwRTC12getDayOfWeekEhht>:
    // Zeller's congruence for the Gregorian calendar
    // 1: Monday,...,7=Sunday
    //
    // \see Torsten.Sillke@uni-bielefeld.de    1999-03-15
    //
    static BYTE getDayOfWeek( BYTE day, BYTE month, WORD year )
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
 8001a56:	460b      	mov	r3, r1
 8001a58:	71bb      	strb	r3, [r7, #6]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	80bb      	strh	r3, [r7, #4]
    {
       if (month < 3)
 8001a5e:	79bb      	ldrb	r3, [r7, #6]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d805      	bhi.n	8001a70 <_ZN6cHwRTC12getDayOfWeekEhht+0x24>
       {
         month += 12;
 8001a64:	79bb      	ldrb	r3, [r7, #6]
 8001a66:	330c      	adds	r3, #12
 8001a68:	71bb      	strb	r3, [r7, #6]
         year--;
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	80bb      	strh	r3, [r7, #4]
       }
       return( ( ( (13*month+3)/5 + day + year + year/4 - year/100 + year/400) % 7) + 1 );
 8001a70:	79ba      	ldrb	r2, [r7, #6]
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3303      	adds	r3, #3
 8001a7e:	4a18      	ldr	r2, [pc, #96]	; (8001ae0 <_ZN6cHwRTC12getDayOfWeekEhht+0x94>)
 8001a80:	fb82 1203 	smull	r1, r2, r2, r3
 8001a84:	1052      	asrs	r2, r2, #1
 8001a86:	17db      	asrs	r3, r3, #31
 8001a88:	1ad2      	subs	r2, r2, r3
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	441a      	add	r2, r3
 8001a8e:	88bb      	ldrh	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	88ba      	ldrh	r2, [r7, #4]
 8001a94:	0892      	lsrs	r2, r2, #2
 8001a96:	b292      	uxth	r2, r2
 8001a98:	4413      	add	r3, r2
 8001a9a:	88ba      	ldrh	r2, [r7, #4]
 8001a9c:	4911      	ldr	r1, [pc, #68]	; (8001ae4 <_ZN6cHwRTC12getDayOfWeekEhht+0x98>)
 8001a9e:	fba1 1202 	umull	r1, r2, r1, r2
 8001aa2:	0952      	lsrs	r2, r2, #5
 8001aa4:	b292      	uxth	r2, r2
 8001aa6:	1a9b      	subs	r3, r3, r2
 8001aa8:	88ba      	ldrh	r2, [r7, #4]
 8001aaa:	490e      	ldr	r1, [pc, #56]	; (8001ae4 <_ZN6cHwRTC12getDayOfWeekEhht+0x98>)
 8001aac:	fba1 1202 	umull	r1, r2, r1, r2
 8001ab0:	09d2      	lsrs	r2, r2, #7
 8001ab2:	b292      	uxth	r2, r2
 8001ab4:	441a      	add	r2, r3
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <_ZN6cHwRTC12getDayOfWeekEhht+0x9c>)
 8001ab8:	fb83 1302 	smull	r1, r3, r3, r2
 8001abc:	4413      	add	r3, r2
 8001abe:	1099      	asrs	r1, r3, #2
 8001ac0:	17d3      	asrs	r3, r2, #31
 8001ac2:	1ac9      	subs	r1, r1, r3
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	1a5b      	subs	r3, r3, r1
 8001aca:	1ad1      	subs	r1, r2, r3
 8001acc:	b2cb      	uxtb	r3, r1
 8001ace:	3301      	adds	r3, #1
 8001ad0:	b2db      	uxtb	r3, r3
    } 
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	66666667 	.word	0x66666667
 8001ae4:	51eb851f 	.word	0x51eb851f
 8001ae8:	92492493 	.word	0x92492493

08001aec <_ZN7cSystemC1Eh>:
//*******************************************************************
//-------------------------------------------------------------------
unsigned char cSystem::cntInterrupt = 0;

//-------------------------------------------------------------------
cSystem::cSystem( unsigned char disableInterrupts )
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	70fb      	strb	r3, [r7, #3]
{
  disableWatchdog();
 8001af8:	f000 f836 	bl	8001b68 <_ZN7cSystem15disableWatchdogEv>
  if( disableInterrupts )
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <_ZN7cSystemC1Eh+0x1a>
  {
    disableInterrupt();
 8001b02:	f000 f805 	bl	8001b10 <_ZN7cSystem16disableInterruptEv>
  }
}
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_ZN7cSystem16disableInterruptEv>:
  enableInterrupt();
}

//-------------------------------------------------------------------
void cSystem::disableInterrupt( void )
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b14:	b672      	cpsid	i
}
 8001b16:	bf00      	nop
  __disable_irq();
  cntInterrupt++;
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <_ZN7cSystem16disableInterruptEv+0x20>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <_ZN7cSystem16disableInterruptEv+0x20>)
 8001b22:	701a      	strb	r2, [r3, #0]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	200001a8 	.word	0x200001a8

08001b34 <_ZN7cSystem15enableInterruptEv>:

//-------------------------------------------------------------------
void cSystem::enableInterrupt( void )
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  if(cntInterrupt > 0)
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <_ZN7cSystem15enableInterruptEv+0x30>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <_ZN7cSystem15enableInterruptEv+0x18>
  {
    cntInterrupt--;
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <_ZN7cSystem15enableInterruptEv+0x30>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <_ZN7cSystem15enableInterruptEv+0x30>)
 8001b4a:	701a      	strb	r2, [r3, #0]
  }
  if(cntInterrupt == 0)
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <_ZN7cSystem15enableInterruptEv+0x30>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <_ZN7cSystem15enableInterruptEv+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b54:	b662      	cpsie	i
}
 8001b56:	bf00      	nop
  {
     __enable_irq();
  }
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	200001a8 	.word	0x200001a8

08001b68 <_ZN7cSystem15disableWatchdogEv>:
  IWDG->KR  = 0xCCCC;
}

//-------------------------------------------------------------------
void cSystem::disableWatchdog( void )
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  // The watchdog can NOT be disabled by software
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <_ZN7cSystem13delayMicroSecEt>:
  NVIC_SystemReset();
}

//-------------------------------------------------------------------
void cSystem::delayMicroSec( unsigned short delay )
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	80fb      	strh	r3, [r7, #6]
  // Calibration:
  delay *= 4;
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	80fb      	strh	r3, [r7, #6]
  for(;delay>0;delay--)
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d004      	beq.n	8001b96 <_ZN7cSystem13delayMicroSecEt+0x20>
  {
    asm volatile("nop");
 8001b8c:	bf00      	nop
  for(;delay>0;delay--)
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	80fb      	strh	r3, [r7, #6]
 8001b94:	e7f7      	b.n	8001b86 <_ZN7cSystem13delayMicroSecEt+0x10>
  }
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <_ZN7cSystem13delayMilliSecEt>:

//-------------------------------------------------------------------
void cSystem::delayMilliSec( unsigned short delay )
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	80fb      	strh	r3, [r7, #6]
  for(;delay>0;delay--)
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d007      	beq.n	8001bc2 <_ZN7cSystem13delayMilliSecEt+0x20>
    delayMicroSec(1000);
 8001bb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bb6:	f7ff ffde 	bl	8001b76 <_ZN7cSystem13delayMicroSecEt>
  for(;delay>0;delay--)
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	80fb      	strh	r3, [r7, #6]
 8001bc0:	e7f4      	b.n	8001bac <_ZN7cSystem13delayMilliSecEt+0xa>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <SystemInit>:

\see STMicroelectronics, AN3309 Clock configuration tool for
STM32L1xx microcontrollers, Doc ID 18200 Rev 2, January 2012
*/
void SystemInit( void )
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b091      	sub	sp, #68	; 0x44
 8001bd0:	af00      	add	r7, sp, #0
  // Set FPU
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)

    // System Control Block (SCB), Coprocessor Access Control Register
    SCB->CPACR |=   (3UL << 10*2)  // CP10: Full access
 8001bd2:	4b92      	ldr	r3, [pc, #584]	; (8001e1c <SystemInit+0x250>)
 8001bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd8:	4a90      	ldr	r2, [pc, #576]	; (8001e1c <SystemInit+0x250>)
 8001bda:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bde:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                  | (3UL << 11*2); // CP11: Full access

  #endif
//	SCB_DisableDCache();
  // Clock control register
  RCC->CR |= RCC_CR_HSION;
 8001be2:	4b8f      	ldr	r3, [pc, #572]	; (8001e20 <SystemInit+0x254>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a8e      	ldr	r2, [pc, #568]	; (8001e20 <SystemInit+0x254>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6013      	str	r3, [r2, #0]

  // Clock configuration register
  RCC->CFGR = 0x00000000;       // reset ...
 8001bee:	4b8c      	ldr	r3, [pc, #560]	; (8001e20 <SystemInit+0x254>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]

  // Clock control register
  RCC->CR &= ~(   RCC_CR_PLLON  // reset ...
 8001bf4:	4b8a      	ldr	r3, [pc, #552]	; (8001e20 <SystemInit+0x254>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4989      	ldr	r1, [pc, #548]	; (8001e20 <SystemInit+0x254>)
 8001bfa:	4b8a      	ldr	r3, [pc, #552]	; (8001e24 <SystemInit+0x258>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]
                | RCC_CR_CSSON
                | RCC_CR_HSEON );

  // PLL configuration register
  RCC->PLLCFGR = 0x24003010;   // Reset value,
 8001c00:	4b87      	ldr	r3, [pc, #540]	; (8001e20 <SystemInit+0x254>)
 8001c02:	4a89      	ldr	r2, [pc, #548]	; (8001e28 <SystemInit+0x25c>)
 8001c04:	605a      	str	r2, [r3, #4]
                               // see Reference manual

  // Clock control register
  RCC->CR &= ~(RCC_CR_HSEBYP); // reset ...
 8001c06:	4b86      	ldr	r3, [pc, #536]	; (8001e20 <SystemInit+0x254>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a85      	ldr	r2, [pc, #532]	; (8001e20 <SystemInit+0x254>)
 8001c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c10:	6013      	str	r3, [r2, #0]

  // Clock interrupt register
  RCC->CIR = 0;                // Disable all interrupts
 8001c12:	4b83      	ldr	r3, [pc, #524]	; (8001e20 <SystemInit+0x254>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	60da      	str	r2, [r3, #12]

  //-----------------------------------------------------------------
  #if defined (_HSE_BYPASS_ON )
    RCC->CR |= (RCC_CR_HSEON | RCC_CR_HSEBYP);
  #elif defined (_HSE_BYPASS_OFF )
    RCC->CR |= (RCC_CR_HSEON );
 8001c18:	4b81      	ldr	r3, [pc, #516]	; (8001e20 <SystemInit+0x254>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a80      	ldr	r2, [pc, #512]	; (8001e20 <SystemInit+0x254>)
 8001c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c22:	6013      	str	r3, [r2, #0]
  #endif
  //-----------------------------------------------------------------

  //! \todo Check code
  // Clock control register
  RCC->CR |= RCC_CR_HSION;   // Need HSION in ADC (only?)
 8001c24:	4b7e      	ldr	r3, [pc, #504]	; (8001e20 <SystemInit+0x254>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a7d      	ldr	r2, [pc, #500]	; (8001e20 <SystemInit+0x254>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6013      	str	r3, [r2, #0]

  // Wait until HSE is ready or timeout
  for( unsigned i = 0; i < HSE_STARTUP_TIMEOUT; i++ )
 8001c30:	2300      	movs	r3, #0
 8001c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c36:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8001c3a:	d20f      	bcs.n	8001c5c <SystemInit+0x90>
  {
    if( RCC->CR & RCC_CR_HSERDY )
 8001c3c:	4b78      	ldr	r3, [pc, #480]	; (8001e20 <SystemInit+0x254>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	bf14      	ite	ne
 8001c48:	2301      	movne	r3, #1
 8001c4a:	2300      	moveq	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d103      	bne.n	8001c5a <SystemInit+0x8e>
  for( unsigned i = 0; i < HSE_STARTUP_TIMEOUT; i++ )
 8001c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c54:	3301      	adds	r3, #1
 8001c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c58:	e7ec      	b.n	8001c34 <SystemInit+0x68>
      break;
 8001c5a:	bf00      	nop
  }

  if( RCC->CR & RCC_CR_HSERDY )
 8001c5c:	4b70      	ldr	r3, [pc, #448]	; (8001e20 <SystemInit+0x254>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bf14      	ite	ne
 8001c68:	2301      	movne	r3, #1
 8001c6a:	2300      	moveq	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 8099 	beq.w	8001da6 <SystemInit+0x1da>
  {
    // Flash Acess Control Register
    FLASH->ACR =  // FLASH_ACR_ICEN          // Instruction cache enable
 8001c74:	4b6d      	ldr	r3, [pc, #436]	; (8001e2c <SystemInit+0x260>)
 8001c76:	2207      	movs	r2, #7
 8001c78:	601a      	str	r2, [r3, #0]
                 //| FLASH_ACR_DCEN          // Data cache enable
                 0| FLASH_ACR_LATENCY_7WS;  // Latency: 5 wait states

    // Advanced Peripheral Bus Enable Register
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;    // Power interface clock: enable
 8001c7a:	4b69      	ldr	r3, [pc, #420]	; (8001e20 <SystemInit+0x254>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a68      	ldr	r2, [pc, #416]	; (8001e20 <SystemInit+0x254>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
//    PWR->CR   |= (1<<14);                 // Regulator voltage scaling output selection:
                                          // VOS=1: Scale 1 mode

    // Clock Configuration Register
    //! \todo Check clock configuration
    RCC->CFGR |=   RCC_CFGR_HPRE_DIV1     // AHB prescaler:                   HCLK  = SYSCLK
 8001c86:	4b66      	ldr	r3, [pc, #408]	; (8001e20 <SystemInit+0x254>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	4a65      	ldr	r2, [pc, #404]	; (8001e20 <SystemInit+0x254>)
 8001c8c:	f443 4334 	orr.w	r3, r3, #46080	; 0xb400
 8001c90:	6093      	str	r3, [r2, #8]
        f_out = 192, 240, 288, 336, 384, 432
            Q =   4    5    6    7    8    9
    */
    //---------------------------------------------------------------

    const DWORD pll_M = (_HSE_CLK)/1000UL; // -> f_in      =     1 MHz
 8001c92:	2319      	movs	r3, #25
 8001c94:	63bb      	str	r3, [r7, #56]	; 0x38
    const DWORD pll_N = 400;               // -> f_out     = 400*1 MHz
 8001c96:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001c9a:	637b      	str	r3, [r7, #52]	; 0x34
    const DWORD pll_P = 2;                 // -> f_pllclk  = 400/2 MHz = 200 MHz
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	633b      	str	r3, [r7, #48]	; 0x30
    const DWORD pll_Q = 8;                 // -> f_pll48ck = 400/8 MHz = 50 MHz
 8001ca0:	2308      	movs	r3, #8
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const DWORD pll_R = 7;                 // -> ???
 8001ca4:	2307      	movs	r3, #7
 8001ca6:	62bb      	str	r3, [r7, #40]	; 0x28

    // PLL configuration register
    RCC->PLLCFGR =   RCC_PLLCFGR_PLLSRC_HSE
 8001ca8:	4b5d      	ldr	r3, [pc, #372]	; (8001e20 <SystemInit+0x254>)
 8001caa:	4a61      	ldr	r2, [pc, #388]	; (8001e30 <SystemInit+0x264>)
 8001cac:	605a      	str	r2, [r3, #4]
                   | ((pll_P/2-1) << 16)
                   | ( pll_Q      << 24)
                   | ( pll_R      << 28);

    // Clock control register
    RCC->CR |= RCC_CR_PLLON;            // PLL enable: ON
 8001cae:	4b5c      	ldr	r3, [pc, #368]	; (8001e20 <SystemInit+0x254>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a5b      	ldr	r2, [pc, #364]	; (8001e20 <SystemInit+0x254>)
 8001cb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cb8:	6013      	str	r3, [r2, #0]
    while( !(RCC->CR & RCC_CR_PLLRDY) );// Wait until PLL is ready
 8001cba:	4b59      	ldr	r3, [pc, #356]	; (8001e20 <SystemInit+0x254>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	bf0c      	ite	eq
 8001cc6:	2301      	moveq	r3, #1
 8001cc8:	2300      	movne	r3, #0
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d000      	beq.n	8001cd2 <SystemInit+0x106>
 8001cd0:	e7f3      	b.n	8001cba <SystemInit+0xee>

    // Clock Configuration Register
    RCC->CFGR &= ~(RCC_CFGR_SW);          // reset system clock switch
 8001cd2:	4b53      	ldr	r3, [pc, #332]	; (8001e20 <SystemInit+0x254>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	4a52      	ldr	r2, [pc, #328]	; (8001e20 <SystemInit+0x254>)
 8001cd8:	f023 0303 	bic.w	r3, r3, #3
 8001cdc:	6093      	str	r3, [r2, #8]
    RCC->CFGR |=  (RCC_CFGR_SW_PLL);      // System clock switch:
 8001cde:	4b50      	ldr	r3, [pc, #320]	; (8001e20 <SystemInit+0x254>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	4a4f      	ldr	r2, [pc, #316]	; (8001e20 <SystemInit+0x254>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	6093      	str	r3, [r2, #8]
                                        //  PLL selected as system clock

    // Wait for system clock switch is ready
    while( (RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL );
 8001cea:	4b4d      	ldr	r3, [pc, #308]	; (8001e20 <SystemInit+0x254>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	bf14      	ite	ne
 8001cf6:	2301      	movne	r3, #1
 8001cf8:	2300      	moveq	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d000      	beq.n	8001d02 <SystemInit+0x136>
 8001d00:	e7f3      	b.n	8001cea <SystemInit+0x11e>
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 417 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 417 MHz / 5 = 83.4 MHz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 83.4 / 2 = 41.7 MHz */
            
    RCC->CR &= ~RCC_CR_PLLSAION; // PLLSAI disable
 8001d02:	4b47      	ldr	r3, [pc, #284]	; (8001e20 <SystemInit+0x254>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a46      	ldr	r2, [pc, #280]	; (8001e20 <SystemInit+0x254>)
 8001d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	6013      	str	r3, [r2, #0]

    // TODO: timeout
    while( RCC->CR & RCC_CR_PLLSAIRDY ); // Wait until disabled
 8001d0e:	4b44      	ldr	r3, [pc, #272]	; (8001e20 <SystemInit+0x254>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	bf14      	ite	ne
 8001d1a:	2301      	movne	r3, #1
 8001d1c:	2300      	moveq	r3, #0
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d000      	beq.n	8001d26 <SystemInit+0x15a>
 8001d24:	e7f3      	b.n	8001d0e <SystemInit+0x142>

    /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
     uint32_t  pllQ = (RCC->PLLSAICFGR >> 24) & 0x0F;
 8001d26:	4b3e      	ldr	r3, [pc, #248]	; (8001e20 <SystemInit+0x254>)
 8001d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2c:	0e1b      	lsrs	r3, r3, #24
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
     uint32_t  pllP = 8; //(RCC->PLLSAICFGR >> 16) & 0x03;
 8001d34:	2308      	movs	r3, #8
 8001d36:	623b      	str	r3, [r7, #32]
     uint32_t  pllN = 384;
 8001d38:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d3c:	61fb      	str	r3, [r7, #28]
     uint32_t  pllR = 5;    
 8001d3e:	2305      	movs	r3, #5
 8001d40:	61bb      	str	r3, [r7, #24]
                               
    RCC->PLLSAICFGR =    ( pllN <<  6)
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	019a      	lsls	r2, r3, #6
                       | ( (pllP/2-1) << 16)
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	085b      	lsrs	r3, r3, #1
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	041b      	lsls	r3, r3, #16
 8001d4e:	431a      	orrs	r2, r3
                       | ( pllQ << 24)
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	061b      	lsls	r3, r3, #24
 8001d54:	431a      	orrs	r2, r3
                       | ( pllR << 28);
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	071b      	lsls	r3, r3, #28
    RCC->PLLSAICFGR =    ( pllN <<  6)
 8001d5a:	4931      	ldr	r1, [pc, #196]	; (8001e20 <SystemInit+0x254>)
                       | ( pllR << 28);
 8001d5c:	4313      	orrs	r3, r2
    RCC->PLLSAICFGR =    ( pllN <<  6)
 8001d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    RCC->DCKCFGR1 = (RCC->DCKCFGR1 & ~RCC_DCKCFGR1_PLLSAIDIVR)  | 0/*RCC_PLLSAIDIVR_2*/;
 8001d62:	4b2f      	ldr	r3, [pc, #188]	; (8001e20 <SystemInit+0x254>)
 8001d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d68:	4a2d      	ldr	r2, [pc, #180]	; (8001e20 <SystemInit+0x254>)
 8001d6a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001d6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		RCC->DCKCFGR2 |= RCC_DCKCFGR2_CK48MSEL; // PLLSAI is 48Mhz-USB clock source
 8001d72:	4b2b      	ldr	r3, [pc, #172]	; (8001e20 <SystemInit+0x254>)
 8001d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d78:	4a29      	ldr	r2, [pc, #164]	; (8001e20 <SystemInit+0x254>)
 8001d7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable PLLSAI Clock */
    RCC->CR |= RCC_CR_PLLSAION;
 8001d82:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <SystemInit+0x254>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a26      	ldr	r2, [pc, #152]	; (8001e20 <SystemInit+0x254>)
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	6013      	str	r3, [r2, #0]

    // TODO: timeout
    while( !(RCC->CR & RCC_CR_PLLSAIRDY) );
 8001d8e:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <SystemInit+0x254>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	bf0c      	ite	eq
 8001d9a:	2301      	moveq	r3, #1
 8001d9c:	2300      	movne	r3, #0
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d000      	beq.n	8001da6 <SystemInit+0x1da>
 8001da4:	e7f3      	b.n	8001d8e <SystemInit+0x1c2>
  {
    // Error: Wrong clock configuration
  }

  // System Control Block
  SCB->VTOR = FLASH_BASE | 0x00; // Vector Table Relocation in internal FLASH
 8001da6:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <SystemInit+0x250>)
 8001da8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dac:	609a      	str	r2, [r3, #8]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001dae:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <SystemInit+0x250>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001db6:	f3bf 8f4f 	dsb	sy
}
 8001dba:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001dbc:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <SystemInit+0x250>)
 8001dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dc2:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	0b5b      	lsrs	r3, r3, #13
 8001dc8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001dcc:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	08db      	lsrs	r3, r3, #3
 8001dd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dd6:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	015a      	lsls	r2, r3, #5
 8001ddc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001de0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001de6:	490d      	ldr	r1, [pc, #52]	; (8001e1c <SystemInit+0x250>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	1e5a      	subs	r2, r3, #1
 8001df2:	603a      	str	r2, [r7, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bf14      	ite	ne
 8001df8:	2301      	movne	r3, #1
 8001dfa:	2300      	moveq	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d000      	beq.n	8001e04 <SystemInit+0x238>
      do {
 8001e02:	e7e9      	b.n	8001dd8 <SystemInit+0x20c>
    } while(sets-- != 0U);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	1e5a      	subs	r2, r3, #1
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	bf14      	ite	ne
 8001e0e:	2301      	movne	r3, #1
 8001e10:	2300      	moveq	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00d      	beq.n	8001e34 <SystemInit+0x268>
    do {
 8001e18:	e7d9      	b.n	8001dce <SystemInit+0x202>
 8001e1a:	bf00      	nop
 8001e1c:	e000ed00 	.word	0xe000ed00
 8001e20:	40023800 	.word	0x40023800
 8001e24:	fef6ffff 	.word	0xfef6ffff
 8001e28:	24003010 	.word	0x24003010
 8001e2c:	40023c00 	.word	0x40023c00
 8001e30:	78406419 	.word	0x78406419
  __ASM volatile ("dsb 0xF":::"memory");
 8001e34:	f3bf 8f4f 	dsb	sy
}
 8001e38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e3a:	f3bf 8f6f 	isb	sy
}
 8001e3e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001e40:	bf00      	nop
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001e42:	4b26      	ldr	r3, [pc, #152]	; (8001edc <SystemInit+0x310>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001e4a:	f3bf 8f4f 	dsb	sy
}
 8001e4e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 8001e50:	4b22      	ldr	r3, [pc, #136]	; (8001edc <SystemInit+0x310>)
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	4a21      	ldr	r2, [pc, #132]	; (8001edc <SystemInit+0x310>)
 8001e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e5c:	f3bf 8f4f 	dsb	sy
}
 8001e60:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <SystemInit+0x310>)
 8001e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e68:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	0b5b      	lsrs	r3, r3, #13
 8001e6e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e72:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	08db      	lsrs	r3, r3, #3
 8001e78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e7c:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	015a      	lsls	r2, r3, #5
 8001e82:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001e86:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001e8c:	4913      	ldr	r1, [pc, #76]	; (8001edc <SystemInit+0x310>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1e5a      	subs	r2, r3, #1
 8001e98:	60fa      	str	r2, [r7, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	bf14      	ite	ne
 8001e9e:	2301      	movne	r3, #1
 8001ea0:	2300      	moveq	r3, #0
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d000      	beq.n	8001eaa <SystemInit+0x2de>
      do {
 8001ea8:	e7e9      	b.n	8001e7e <SystemInit+0x2b2>
    } while(sets-- != 0U);
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1e5a      	subs	r2, r3, #1
 8001eae:	613a      	str	r2, [r7, #16]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf14      	ite	ne
 8001eb4:	2301      	movne	r3, #1
 8001eb6:	2300      	moveq	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d000      	beq.n	8001ec0 <SystemInit+0x2f4>
    do {
 8001ebe:	e7d9      	b.n	8001e74 <SystemInit+0x2a8>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
}
 8001ecc:	bf00      	nop

  SCB_InvalidateDCache();
	SCB_DisableDCache();
}
 8001ece:	bf00      	nop
 8001ed0:	3744      	adds	r7, #68	; 0x44
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <_ZN12cHwPinConfig3setEP12GPIO_TypeDefhmh>:
// cHwPinConfig
//
//*******************************************************************
//-------------------------------------------------------------------
void cHwPinConfig::set( GPIO_TypeDef *gpio, BYTE pinId, DWORD mode, BYTE af )
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08e      	sub	sp, #56	; 0x38
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	461a      	mov	r2, r3
 8001eec:	460b      	mov	r3, r1
 8001eee:	72fb      	strb	r3, [r7, #11]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	72bb      	strb	r3, [r7, #10]
  BYTE pin2 = 2*pinId;
 8001ef4:	7afb      	ldrb	r3, [r7, #11]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  BYTE pin3 = pinId>>3;
 8001efc:	7afb      	ldrb	r3, [r7, #11]
 8001efe:	10db      	asrs	r3, r3, #3
 8001f00:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

  MTYPE bitmask1 = ~((MTYPE)0x01 <<     pinId    );
 8001f04:	7afb      	ldrb	r3, [r7, #11]
 8001f06:	2201      	movs	r2, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	633b      	str	r3, [r7, #48]	; 0x30
  MTYPE bitmask2 = ~((MTYPE)0x03 <<     pin2     );
 8001f10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f14:	2203      	movs	r2, #3
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  MTYPE bitmask3 = ~((MTYPE)0x0F << (4*(pinId%8)));
 8001f1e:	7afb      	ldrb	r3, [r7, #11]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	220f      	movs	r2, #15
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	62bb      	str	r3, [r7, #40]	; 0x28

  MTYPE moder   = (MTYPE)((mode    )&0x03) << pin2;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f003 0203 	and.w	r2, r3, #3
 8001f36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
  MTYPE pupdr   = (MTYPE)((mode>> 8)&0x03) << pin2;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	f003 0203 	and.w	r2, r3, #3
 8001f48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	623b      	str	r3, [r7, #32]
  MTYPE otyper  = (MTYPE)((mode>> 4)&0x01) << pinId;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	f003 0201 	and.w	r2, r3, #1
 8001f5a:	7afb      	ldrb	r3, [r7, #11]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	61fb      	str	r3, [r7, #28]
  MTYPE ospeedr = (MTYPE)((mode>>12)&0x03) << pin2;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	0b1b      	lsrs	r3, r3, #12
 8001f66:	f003 0203 	and.w	r2, r3, #3
 8001f6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	61bb      	str	r3, [r7, #24]
  MTYPE afr     = (MTYPE)((af      )&0x0F) << (4*(pinId%8));
 8001f74:	7abb      	ldrb	r3, [r7, #10]
 8001f76:	f003 020f 	and.w	r2, r3, #15
 8001f7a:	7afb      	ldrb	r3, [r7, #11]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	617b      	str	r3, [r7, #20]

  cSystem::disableInterrupt();
 8001f88:	f7ff fdc2 	bl	8001b10 <_ZN7cSystem16disableInterruptEv>
  gpio->MODER     = ( gpio->MODER     & bitmask2 ) | moder;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f92:	401a      	ands	r2, r3
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	431a      	orrs	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	601a      	str	r2, [r3, #0]
  gpio->PUPDR     = ( gpio->PUPDR     & bitmask2 ) | pupdr;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	60da      	str	r2, [r3, #12]
  gpio->OTYPER    = ( gpio->OTYPER    & bitmask1 ) | otyper;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	605a      	str	r2, [r3, #4]
  gpio->OSPEEDR   = ( gpio->OSPEEDR   & bitmask2 ) | ospeedr;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	609a      	str	r2, [r3, #8]
  gpio->AFR[pin3] = ( gpio->AFR[pin3] & bitmask3 ) | afr;
 8001fcc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3208      	adds	r2, #8
 8001fd4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fda:	ea02 0103 	and.w	r1, r2, r3
 8001fde:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	4319      	orrs	r1, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3208      	adds	r2, #8
 8001fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  cSystem::enableInterrupt();
 8001fee:	f7ff fda1 	bl	8001b34 <_ZN7cSystem15enableInterruptEv>
}
 8001ff2:	bf00      	nop
 8001ff4:	3738      	adds	r7, #56	; 0x38
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>:

//-------------------------------------------------------------------
bool cHwPinConfig::set( Function func, DWORD mode )
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	80fb      	strh	r3, [r7, #6]
  BYTE pin;
  BYTE af;

  GPIO_TypeDef *gpio;

  for( WORD i = 0; table[i] != END_OF_TABLE; i++ )
 8002008:	2300      	movs	r3, #0
 800200a:	82fb      	strh	r3, [r7, #22]
 800200c:	8afb      	ldrh	r3, [r7, #22]
 800200e:	4a28      	ldr	r2, [pc, #160]	; (80020b0 <_ZN12cHwPinConfig3setENS_8FunctionEm+0xb4>)
 8002010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d045      	beq.n	80020a4 <_ZN12cHwPinConfig3setENS_8FunctionEm+0xa8>
  {
    if( (table[i] >> 16) == func )
 8002018:	8afb      	ldrh	r3, [r7, #22]
 800201a:	4a25      	ldr	r2, [pc, #148]	; (80020b0 <_ZN12cHwPinConfig3setENS_8FunctionEm+0xb4>)
 800201c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002020:	141a      	asrs	r2, r3, #16
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	429a      	cmp	r2, r3
 8002026:	d139      	bne.n	800209c <_ZN12cHwPinConfig3setENS_8FunctionEm+0xa0>
    {
      port = (table[i]>>12)&0x0F;
 8002028:	8afb      	ldrh	r3, [r7, #22]
 800202a:	4a21      	ldr	r2, [pc, #132]	; (80020b0 <_ZN12cHwPinConfig3setENS_8FunctionEm+0xb4>)
 800202c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002030:	131b      	asrs	r3, r3, #12
 8002032:	b2db      	uxtb	r3, r3
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	757b      	strb	r3, [r7, #21]
      pin  = (table[i]>> 4)&0x0F;
 800203a:	8afb      	ldrh	r3, [r7, #22]
 800203c:	4a1c      	ldr	r2, [pc, #112]	; (80020b0 <_ZN12cHwPinConfig3setENS_8FunctionEm+0xb4>)
 800203e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002042:	111b      	asrs	r3, r3, #4
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	753b      	strb	r3, [r7, #20]
      af   = (table[i]>> 0)&0x0F;
 800204c:	8afb      	ldrh	r3, [r7, #22]
 800204e:	4a18      	ldr	r2, [pc, #96]	; (80020b0 <_ZN12cHwPinConfig3setENS_8FunctionEm+0xb4>)
 8002050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	74fb      	strb	r3, [r7, #19]

      if( (mode & 0x0F) != ANALOG )
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	2b03      	cmp	r3, #3
 8002064:	d003      	beq.n	800206e <_ZN12cHwPinConfig3setENS_8FunctionEm+0x72>
      {
        mode |= ALTERNATE_FUNC;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	603b      	str	r3, [r7, #0]
      }

      RCC->AHB1ENR |= ((1UL << port) );
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <_ZN12cHwPinConfig3setENS_8FunctionEm+0xb8>)
 8002070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002072:	7d7b      	ldrb	r3, [r7, #21]
 8002074:	2101      	movs	r1, #1
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	490e      	ldr	r1, [pc, #56]	; (80020b4 <_ZN12cHwPinConfig3setENS_8FunctionEm+0xb8>)
 800207c:	4313      	orrs	r3, r2
 800207e:	630b      	str	r3, [r1, #48]	; 0x30

      gpio = (GPIO_TypeDef *)(GPIOA_BASE + (0x400*port));
 8002080:	7d7b      	ldrb	r3, [r7, #21]
 8002082:	029b      	lsls	r3, r3, #10
 8002084:	461a      	mov	r2, r3
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <_ZN12cHwPinConfig3setENS_8FunctionEm+0xbc>)
 8002088:	4413      	add	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
      set( gpio, pin, mode, af );
 800208c:	7cfb      	ldrb	r3, [r7, #19]
 800208e:	7d39      	ldrb	r1, [r7, #20]
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f7ff ff24 	bl	8001ee0 <_ZN12cHwPinConfig3setEP12GPIO_TypeDefhmh>
      return( true );
 8002098:	2301      	movs	r3, #1
 800209a:	e004      	b.n	80020a6 <_ZN12cHwPinConfig3setENS_8FunctionEm+0xaa>
  for( WORD i = 0; table[i] != END_OF_TABLE; i++ )
 800209c:	8afb      	ldrh	r3, [r7, #22]
 800209e:	3301      	adds	r3, #1
 80020a0:	82fb      	strh	r3, [r7, #22]
 80020a2:	e7b3      	b.n	800200c <_ZN12cHwPinConfig3setENS_8FunctionEm+0x10>
    }
  }
  // Error: The table does not contain the func
  return( false );
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000000 	.word	0x20000000
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020000 	.word	0x40020000

080020bc <SysTick_Handler>:

//-------------------------------------------------------------------
extern "C"
{
  void SysTick_Handler( void )
  {
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
    static unsigned stackPointer = 0;

    stackPointer = save_context();
 80020c0:	f7fe f8be 	bl	8000240 <save_context>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4a0c      	ldr	r2, [pc, #48]	; (80020f8 <SysTick_Handler+0x3c>)
 80020c8:	6013      	str	r3, [r2, #0]
    cHwRTOS_MCU::sysTic++;
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <SysTick_Handler+0x40>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3301      	adds	r3, #1
 80020d0:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <SysTick_Handler+0x40>)
 80020d2:	6013      	str	r3, [r2, #0]
    stackPointer = cHwRTOS_MCU::schedule( stackPointer, true );
 80020d4:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <SysTick_Handler+0x44>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a07      	ldr	r2, [pc, #28]	; (80020f8 <SysTick_Handler+0x3c>)
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	2101      	movs	r1, #1
 80020de:	4610      	mov	r0, r2
 80020e0:	4798      	blx	r3
 80020e2:	4603      	mov	r3, r0
 80020e4:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <SysTick_Handler+0x3c>)
 80020e6:	6013      	str	r3, [r2, #0]
    load_context( stackPointer );
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <SysTick_Handler+0x3c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe f8b4 	bl	800025a <load_context>
  }
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200001b4 	.word	0x200001b4
 80020fc:	200001b0 	.word	0x200001b0
 8002100:	200001ac 	.word	0x200001ac

08002104 <PendSV_Handler>:

//-------------------------------------------------------------------
extern "C"
{
  void PendSV_Handler( void )
  {
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
    static unsigned stackPointer = 0;

    stackPointer = save_context();
 8002108:	f7fe f89a 	bl	8000240 <save_context>
 800210c:	4603      	mov	r3, r0
 800210e:	4a09      	ldr	r2, [pc, #36]	; (8002134 <PendSV_Handler+0x30>)
 8002110:	6013      	str	r3, [r2, #0]
    stackPointer = cHwRTOS_MCU::schedule( stackPointer, false );
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <PendSV_Handler+0x34>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a07      	ldr	r2, [pc, #28]	; (8002134 <PendSV_Handler+0x30>)
 8002118:	6812      	ldr	r2, [r2, #0]
 800211a:	2100      	movs	r1, #0
 800211c:	4610      	mov	r0, r2
 800211e:	4798      	blx	r3
 8002120:	4603      	mov	r3, r0
 8002122:	4a04      	ldr	r2, [pc, #16]	; (8002134 <PendSV_Handler+0x30>)
 8002124:	6013      	str	r3, [r2, #0]
    load_context( stackPointer );
 8002126:	4b03      	ldr	r3, [pc, #12]	; (8002134 <PendSV_Handler+0x30>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe f895 	bl	800025a <load_context>
  }
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	200001b8 	.word	0x200001b8
 8002138:	200001ac 	.word	0x200001ac

0800213c <ADC_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void ADC_IRQHandler(void)
  {
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
    ADC3->SR &= ~ADC_SR_EOC;
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <ADC_IRQHandler+0x28>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a07      	ldr	r2, [pc, #28]	; (8002164 <ADC_IRQHandler+0x28>)
 8002146:	f023 0302 	bic.w	r3, r3, #2
 800214a:	6013      	str	r3, [r2, #0]
    cHwADC_0::adcPtr->isr();
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <ADC_IRQHandler+0x2c>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <ADC_IRQHandler+0x2c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	3310      	adds	r3, #16
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4610      	mov	r0, r2
 800215c:	4798      	blx	r3
  }
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40012200 	.word	0x40012200
 8002168:	200001bc 	.word	0x200001bc

0800216c <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh>:
#if ( system_PCLK_I2C != 50000000 )
  #error "system_PCLK_I2C not defined or wrong value"
#endif

//-------------------------------------------------------------------
cHwI2Cmaster_N::cHwI2Cmaster_N( I2C_ID id, 
 800216c:	b580      	push	{r7, lr}
 800216e:	b08e      	sub	sp, #56	; 0x38
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	4608      	mov	r0, r1
 8002176:	4611      	mov	r1, r2
 8002178:	461a      	mov	r2, r3
 800217a:	4603      	mov	r3, r0
 800217c:	70fb      	strb	r3, [r7, #3]
 800217e:	460b      	mov	r3, r1
 8002180:	70bb      	strb	r3, [r7, #2]
 8002182:	4613      	mov	r3, r2
 8002184:	707b      	strb	r3, [r7, #1]
                                MODE   mode,
                                BYTE   maskIntr )

: cHwI2Cmaster( maskIntr )
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	787a      	ldrb	r2, [r7, #1]
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f002 fc45 	bl	8004a1c <_ZN12cHwI2CmasterC1Eh>
 8002192:	4a6c      	ldr	r2, [pc, #432]	; (8002344 <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x1d8>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	601a      	str	r2, [r3, #0]

{
  switch( id )
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	3b01      	subs	r3, #1
 800219c:	2b03      	cmp	r3, #3
 800219e:	d853      	bhi.n	8002248 <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0xdc>
 80021a0:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x3c>)
 80021a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a6:	bf00      	nop
 80021a8:	080021b9 	.word	0x080021b9
 80021ac:	080021dd 	.word	0x080021dd
 80021b0:	08002201 	.word	0x08002201
 80021b4:	08002225 	.word	0x08002225
    default:
      // error!
      break;
      
    case I2C_1: 
      ptrBase       = (I2C_TypeDef*)I2C1_BASE; 
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a63      	ldr	r2, [pc, #396]	; (8002348 <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x1dc>)
 80021bc:	609a      	str	r2, [r3, #8]
      RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80021be:	4b63      	ldr	r3, [pc, #396]	; (800234c <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x1e0>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	4a62      	ldr	r2, [pc, #392]	; (800234c <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x1e0>)
 80021c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021c8:	6413      	str	r3, [r2, #64]	; 0x40
      cHwPinConfig::set( cHwPinConfig::I2C1_SCL, cHwPinConfig::OPEN_DRAIN );
 80021ca:	2110      	movs	r1, #16
 80021cc:	209f      	movs	r0, #159	; 0x9f
 80021ce:	f7ff ff15 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set( cHwPinConfig::I2C1_SDA, cHwPinConfig::OPEN_DRAIN );
 80021d2:	2110      	movs	r1, #16
 80021d4:	20a0      	movs	r0, #160	; 0xa0
 80021d6:	f7ff ff11 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      break;
 80021da:	e036      	b.n	800224a <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0xde>
            
    case I2C_2: 
      ptrBase       = (I2C_TypeDef*)I2C2_BASE; 
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a5c      	ldr	r2, [pc, #368]	; (8002350 <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x1e4>)
 80021e0:	609a      	str	r2, [r3, #8]
      RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 80021e2:	4b5a      	ldr	r3, [pc, #360]	; (800234c <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x1e0>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a59      	ldr	r2, [pc, #356]	; (800234c <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x1e0>)
 80021e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
      cHwPinConfig::set( cHwPinConfig::I2C2_SCL, cHwPinConfig::OPEN_DRAIN );
 80021ee:	2110      	movs	r1, #16
 80021f0:	20a2      	movs	r0, #162	; 0xa2
 80021f2:	f7ff ff03 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set( cHwPinConfig::I2C2_SDA, cHwPinConfig::OPEN_DRAIN );
 80021f6:	2110      	movs	r1, #16
 80021f8:	20a3      	movs	r0, #163	; 0xa3
 80021fa:	f7ff feff 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      break;
 80021fe:	e024      	b.n	800224a <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0xde>

    case I2C_3: 
      ptrBase       = (I2C_TypeDef*)I2C3_BASE; 
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a54      	ldr	r2, [pc, #336]	; (8002354 <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x1e8>)
 8002204:	609a      	str	r2, [r3, #8]
      RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8002206:	4b51      	ldr	r3, [pc, #324]	; (800234c <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x1e0>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a50      	ldr	r2, [pc, #320]	; (800234c <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x1e0>)
 800220c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
      cHwPinConfig::set( cHwPinConfig::I2C3_SCL, cHwPinConfig::OPEN_DRAIN );
 8002212:	2110      	movs	r1, #16
 8002214:	20a5      	movs	r0, #165	; 0xa5
 8002216:	f7ff fef1 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set( cHwPinConfig::I2C3_SDA, cHwPinConfig::OPEN_DRAIN );
 800221a:	2110      	movs	r1, #16
 800221c:	20a6      	movs	r0, #166	; 0xa6
 800221e:	f7ff feed 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      break;
 8002222:	e012      	b.n	800224a <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0xde>

    case I2C_4: 
      ptrBase       = (I2C_TypeDef*)I2C4_BASE; 
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a4c      	ldr	r2, [pc, #304]	; (8002358 <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x1ec>)
 8002228:	609a      	str	r2, [r3, #8]
      RCC->APB1ENR |= RCC_APB1ENR_I2C4EN;
 800222a:	4b48      	ldr	r3, [pc, #288]	; (800234c <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x1e0>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a47      	ldr	r2, [pc, #284]	; (800234c <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x1e0>)
 8002230:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
      cHwPinConfig::set( cHwPinConfig::I2C4_SCL, cHwPinConfig::OPEN_DRAIN);
 8002236:	2110      	movs	r1, #16
 8002238:	20a8      	movs	r0, #168	; 0xa8
 800223a:	f7ff fedf 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set( cHwPinConfig::I2C4_SDA, cHwPinConfig::OPEN_DRAIN);
 800223e:	2110      	movs	r1, #16
 8002240:	20a9      	movs	r0, #169	; 0xa9
 8002242:	f7ff fedb 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      break;
 8002246:	e000      	b.n	800224a <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0xde>
      break;
 8002248:	bf00      	nop
  }

	WORD presc [] = {0x0B, 0x0B, 0x05, 0x05};
 800224a:	4a44      	ldr	r2, [pc, #272]	; (800235c <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x1f0>)
 800224c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002250:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002254:	e883 0003 	stmia.w	r3, {r0, r1}
	WORD scll  [] = {0xC7, 0x13, 0x09, 0x03};
 8002258:	4a41      	ldr	r2, [pc, #260]	; (8002360 <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x1f4>)
 800225a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002262:	e883 0003 	stmia.w	r3, {r0, r1}
	WORD sclh  [] = {0xC3, 0x0F, 0x03, 0x01};
 8002266:	4a3f      	ldr	r2, [pc, #252]	; (8002364 <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x1f8>)
 8002268:	f107 031c 	add.w	r3, r7, #28
 800226c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002270:	e883 0003 	stmia.w	r3, {r0, r1}
	WORD sdadel[] = {0x02, 0x02, 0x03, 0x00};
 8002274:	4a3c      	ldr	r2, [pc, #240]	; (8002368 <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x1fc>)
 8002276:	f107 0314 	add.w	r3, r7, #20
 800227a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800227e:	e883 0003 	stmia.w	r3, {r0, r1}
	WORD scldel[] = {0x04, 0x04, 0x03, 0x01};
 8002282:	4a3a      	ldr	r2, [pc, #232]	; (800236c <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x200>)
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	e892 0003 	ldmia.w	r2, {r0, r1}
 800228c:	e883 0003 	stmia.w	r3, {r0, r1}
		
	BYTE idx;
  
	// \see: Reference Manual RM0410, Table 208: Examples of timings settings for fI2CCLK = 48 MHz, www.st.com
  switch( mode )
 8002290:	78bb      	ldrb	r3, [r7, #2]
 8002292:	2b04      	cmp	r3, #4
 8002294:	d011      	beq.n	80022ba <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x14e>
 8002296:	2b04      	cmp	r3, #4
 8002298:	dc03      	bgt.n	80022a2 <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x136>
 800229a:	2b02      	cmp	r3, #2
 800229c:	d005      	beq.n	80022aa <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x13e>
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d007      	beq.n	80022b2 <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x146>
  {
    default:
    case CR_10kHz:   idx = 0; break;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80022a8:	e00b      	b.n	80022c2 <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x156>
    case CR_100kHz:  idx = 1; break;
 80022aa:	2301      	movs	r3, #1
 80022ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80022b0:	e007      	b.n	80022c2 <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x156>
    case CR_400kHz:  idx = 2; break;
 80022b2:	2302      	movs	r3, #2
 80022b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80022b8:	e003      	b.n	80022c2 <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh+0x156>
    case CR_1000kHz: idx = 3; break;
 80022ba:	2303      	movs	r3, #3
 80022bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80022c0:	bf00      	nop
  } 
	ptrBase->TIMINGR =   (presc[idx] <<28)
 80022c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022cc:	4413      	add	r3, r2
 80022ce:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 80022d2:	071a      	lsls	r2, r3, #28
	                   | (scldel[idx]<<20)
 80022d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022de:	440b      	add	r3, r1
 80022e0:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 80022e4:	051b      	lsls	r3, r3, #20
 80022e6:	431a      	orrs	r2, r3
	                   | (sdadel[idx]<<16)
 80022e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022f2:	440b      	add	r3, r1
 80022f4:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80022f8:	041b      	lsls	r3, r3, #16
 80022fa:	431a      	orrs	r2, r3
	                   | (sclh[idx]  << 8)
 80022fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002306:	440b      	add	r3, r1
 8002308:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	431a      	orrs	r2, r3
	                   | (scll[idx]  << 0);
 8002310:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800231a:	440b      	add	r3, r1
 800231c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002320:	431a      	orrs	r2, r3
	ptrBase->TIMINGR =   (presc[idx] <<28)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	611a      	str	r2, [r3, #16]

  ptrBase->CR1 |= I2C_CR1_ANFOFF | I2C_CR1_PE; // enable
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	6819      	ldr	r1, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	f241 0301 	movw	r3, #4097	; 0x1001
 8002336:	430b      	orrs	r3, r1
 8002338:	6013      	str	r3, [r2, #0]
}
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4618      	mov	r0, r3
 800233e:	3738      	adds	r7, #56	; 0x38
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	080076a4 	.word	0x080076a4
 8002348:	40005400 	.word	0x40005400
 800234c:	40023800 	.word	0x40023800
 8002350:	40005800 	.word	0x40005800
 8002354:	40005c00 	.word	0x40005c00
 8002358:	40006000 	.word	0x40006000
 800235c:	080073dc 	.word	0x080073dc
 8002360:	080073e4 	.word	0x080073e4
 8002364:	080073ec 	.word	0x080073ec
 8002368:	080073f4 	.word	0x080073f4
 800236c:	080073fc 	.word	0x080073fc

08002370 <_ZN14cHwI2Cmaster_N5writeEhPhhS0_h>:
BYTE cHwI2Cmaster_N::write( BYTE  hwAddr,
                            BYTE *addr,
                            BYTE  sizeAddr,
                            BYTE *data,
                            BYTE  sizeData )
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	461a      	mov	r2, r3
 800237c:	460b      	mov	r3, r1
 800237e:	72fb      	strb	r3, [r7, #11]
 8002380:	4613      	mov	r3, r2
 8002382:	72bb      	strb	r3, [r7, #10]
  BYTE i = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	75fb      	strb	r3, [r7, #23]
  
  isHardwareOK = true;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2201      	movs	r2, #1
 800238c:	711a      	strb	r2, [r3, #4]

  if( maskIntr )
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	795b      	ldrb	r3, [r3, #5]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <_ZN14cHwI2Cmaster_N5writeEhPhhS0_h+0x2a>
    cSystem::disableInterrupt();
 8002396:	f7ff fbbb 	bl	8001b10 <_ZN7cSystem16disableInterruptEv>
	
	if( sizeAddr )
 800239a:	7abb      	ldrb	r3, [r7, #10]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d05d      	beq.n	800245c <_ZN14cHwI2Cmaster_N5writeEhPhhS0_h+0xec>
	{
		// Transfer addr
		ptrBase->CR2 =   !I2C_CR2_AUTOEND
									 | !I2C_CR2_RELOAD
									 |  (sizeAddr+sizeData)<<16
 80023a0:	7aba      	ldrb	r2, [r7, #10]
 80023a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80023a6:	4413      	add	r3, r2
 80023a8:	041a      	lsls	r2, r3, #16
									 | !I2C_CR2_ADD10	
									 | !I2C_CR2_RD_WRN
									 |  ((hwAddr & 0xFE) ); 
 80023aa:	7afb      	ldrb	r3, [r7, #11]
 80023ac:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80023b0:	431a      	orrs	r2, r3
		ptrBase->CR2 =   !I2C_CR2_AUTOEND
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	605a      	str	r2, [r3, #4]

		ptrBase->CR2 |= I2C_CR2_START;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023c6:	605a      	str	r2, [r3, #4]
		
    for( i=0; i< sizeAddr; i++ )
 80023c8:	2300      	movs	r3, #0
 80023ca:	75fb      	strb	r3, [r7, #23]
 80023cc:	7dfa      	ldrb	r2, [r7, #23]
 80023ce:	7abb      	ldrb	r3, [r7, #10]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d217      	bcs.n	8002404 <_ZN14cHwI2Cmaster_N5writeEhPhhS0_h+0x94>
    {
			while( !(ptrBase->ISR & I2C_ISR_TXIS) );
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	bf0c      	ite	eq
 80023e2:	2301      	moveq	r3, #1
 80023e4:	2300      	movne	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d000      	beq.n	80023ee <_ZN14cHwI2Cmaster_N5writeEhPhhS0_h+0x7e>
 80023ec:	e7f2      	b.n	80023d4 <_ZN14cHwI2Cmaster_N5writeEhPhhS0_h+0x64>
      ptrBase->TXDR = addr[i];
 80023ee:	7dfb      	ldrb	r3, [r7, #23]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	4413      	add	r3, r2
 80023f4:	781a      	ldrb	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28
    for( i=0; i< sizeAddr; i++ )
 80023fc:	7dfb      	ldrb	r3, [r7, #23]
 80023fe:	3301      	adds	r3, #1
 8002400:	75fb      	strb	r3, [r7, #23]
 8002402:	e7e3      	b.n	80023cc <_ZN14cHwI2Cmaster_N5writeEhPhhS0_h+0x5c>
    }
    for( i=0; i< sizeData; i++ )
 8002404:	2300      	movs	r3, #0
 8002406:	75fb      	strb	r3, [r7, #23]
 8002408:	7dfa      	ldrb	r2, [r7, #23]
 800240a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800240e:	429a      	cmp	r2, r3
 8002410:	d217      	bcs.n	8002442 <_ZN14cHwI2Cmaster_N5writeEhPhhS0_h+0xd2>
    {
			while( !(ptrBase->ISR & I2C_ISR_TXIS) );
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d000      	beq.n	800242c <_ZN14cHwI2Cmaster_N5writeEhPhhS0_h+0xbc>
 800242a:	e7f2      	b.n	8002412 <_ZN14cHwI2Cmaster_N5writeEhPhhS0_h+0xa2>
      ptrBase->TXDR = data[i];
 800242c:	7dfb      	ldrb	r3, [r7, #23]
 800242e:	6a3a      	ldr	r2, [r7, #32]
 8002430:	4413      	add	r3, r2
 8002432:	781a      	ldrb	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	629a      	str	r2, [r3, #40]	; 0x28
    for( i=0; i< sizeData; i++ )
 800243a:	7dfb      	ldrb	r3, [r7, #23]
 800243c:	3301      	adds	r3, #1
 800243e:	75fb      	strb	r3, [r7, #23]
 8002440:	e7e2      	b.n	8002408 <_ZN14cHwI2Cmaster_N5writeEhPhhS0_h+0x98>
    }
		while( !(ptrBase->ISR & I2C_ISR_TC) );
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244c:	2b00      	cmp	r3, #0
 800244e:	bf0c      	ite	eq
 8002450:	2301      	moveq	r3, #1
 8002452:	2300      	movne	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d000      	beq.n	800245c <_ZN14cHwI2Cmaster_N5writeEhPhhS0_h+0xec>
 800245a:	e7f2      	b.n	8002442 <_ZN14cHwI2Cmaster_N5writeEhPhhS0_h+0xd2>
	}
	
  ptrBase->CR2 |= I2C_CR2_STOP;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800246a:	605a      	str	r2, [r3, #4]

  if( maskIntr )
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	795b      	ldrb	r3, [r3, #5]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <_ZN14cHwI2Cmaster_N5writeEhPhhS0_h+0x108>
    cSystem::enableInterrupt();
 8002474:	f7ff fb5e 	bl	8001b34 <_ZN7cSystem15enableInterruptEv>

  return( !isHardwareOK );
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	791b      	ldrb	r3, [r3, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	bf0c      	ite	eq
 8002480:	2301      	moveq	r3, #1
 8002482:	2300      	movne	r3, #0
 8002484:	b2db      	uxtb	r3, r3
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <_ZN14cHwI2Cmaster_N4readEhPhhS0_h>:
BYTE cHwI2Cmaster_N::read( BYTE  hwAddr,
                           BYTE *addr,
                           BYTE  sizeAddr,
                           BYTE *data,
                           BYTE  sizeData )
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b086      	sub	sp, #24
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	461a      	mov	r2, r3
 800249a:	460b      	mov	r3, r1
 800249c:	72fb      	strb	r3, [r7, #11]
 800249e:	4613      	mov	r3, r2
 80024a0:	72bb      	strb	r3, [r7, #10]
  BYTE i = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	75fb      	strb	r3, [r7, #23]
  
  isHardwareOK = true;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	711a      	strb	r2, [r3, #4]

  if( maskIntr )
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	795b      	ldrb	r3, [r3, #5]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <_ZN14cHwI2Cmaster_N4readEhPhhS0_h+0x2a>
    cSystem::disableInterrupt();
 80024b4:	f7ff fb2c 	bl	8001b10 <_ZN7cSystem16disableInterruptEv>
	
	if( sizeAddr )
 80024b8:	7abb      	ldrb	r3, [r7, #10]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d03b      	beq.n	8002536 <_ZN14cHwI2Cmaster_N4readEhPhhS0_h+0xa8>
	{
		// Transfer addr
		ptrBase->CR2 =   !I2C_CR2_AUTOEND
									 | !I2C_CR2_RELOAD
									 |  (sizeAddr)<<16
 80024be:	7abb      	ldrb	r3, [r7, #10]
 80024c0:	041a      	lsls	r2, r3, #16
									 | !I2C_CR2_ADD10	
									 | !I2C_CR2_RD_WRN
									 |  ((hwAddr & 0xFE) ); 
 80024c2:	7afb      	ldrb	r3, [r7, #11]
 80024c4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80024c8:	431a      	orrs	r2, r3
		ptrBase->CR2 =   !I2C_CR2_AUTOEND
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	605a      	str	r2, [r3, #4]

		ptrBase->CR2 |= I2C_CR2_START;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024de:	605a      	str	r2, [r3, #4]
		
    for( i=0; i< sizeAddr; i++ )
 80024e0:	2300      	movs	r3, #0
 80024e2:	75fb      	strb	r3, [r7, #23]
 80024e4:	7dfa      	ldrb	r2, [r7, #23]
 80024e6:	7abb      	ldrb	r3, [r7, #10]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d217      	bcs.n	800251c <_ZN14cHwI2Cmaster_N4readEhPhhS0_h+0x8e>
    {
			while( !(ptrBase->ISR & I2C_ISR_TXIS) );
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bf0c      	ite	eq
 80024fa:	2301      	moveq	r3, #1
 80024fc:	2300      	movne	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d000      	beq.n	8002506 <_ZN14cHwI2Cmaster_N4readEhPhhS0_h+0x78>
 8002504:	e7f2      	b.n	80024ec <_ZN14cHwI2Cmaster_N4readEhPhhS0_h+0x5e>
      ptrBase->TXDR = addr[i];
 8002506:	7dfb      	ldrb	r3, [r7, #23]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	4413      	add	r3, r2
 800250c:	781a      	ldrb	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	629a      	str	r2, [r3, #40]	; 0x28
    for( i=0; i< sizeAddr; i++ )
 8002514:	7dfb      	ldrb	r3, [r7, #23]
 8002516:	3301      	adds	r3, #1
 8002518:	75fb      	strb	r3, [r7, #23]
 800251a:	e7e3      	b.n	80024e4 <_ZN14cHwI2Cmaster_N4readEhPhhS0_h+0x56>
    }
		while( !(ptrBase->ISR & I2C_ISR_TC) );
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	bf0c      	ite	eq
 800252a:	2301      	moveq	r3, #1
 800252c:	2300      	movne	r3, #0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d000      	beq.n	8002536 <_ZN14cHwI2Cmaster_N4readEhPhhS0_h+0xa8>
 8002534:	e7f2      	b.n	800251c <_ZN14cHwI2Cmaster_N4readEhPhhS0_h+0x8e>
	}
	
	ptrBase->CR2 =     !I2C_CR2_AUTOEND
									 | !I2C_CR2_RELOAD
									 |  (sizeData)<<16
 8002536:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800253a:	041b      	lsls	r3, r3, #16
									 | !I2C_CR2_ADD10	
 800253c:	461a      	mov	r2, r3
									 |  I2C_CR2_RD_WRN
									 |  ((hwAddr & 0xFE) ); 
 800253e:	7afb      	ldrb	r3, [r7, #11]
 8002540:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002544:	431a      	orrs	r2, r3
	ptrBase->CR2 =     !I2C_CR2_AUTOEND
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	689b      	ldr	r3, [r3, #8]
									 |  ((hwAddr & 0xFE) ); 
 800254a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	ptrBase->CR2 =     !I2C_CR2_AUTOEND
 800254e:	605a      	str	r2, [r3, #4]

  ptrBase->CR2 |= I2C_CR2_START;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800255e:	605a      	str	r2, [r3, #4]
	
	for( i=0; i< sizeData; i++ )
 8002560:	2300      	movs	r3, #0
 8002562:	75fb      	strb	r3, [r7, #23]
 8002564:	7dfa      	ldrb	r2, [r7, #23]
 8002566:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800256a:	429a      	cmp	r2, r3
 800256c:	d218      	bcs.n	80025a0 <_ZN14cHwI2Cmaster_N4readEhPhhS0_h+0x112>
	{
		while( !(ptrBase->ISR & I2C_ISR_RXNE) );
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d000      	beq.n	8002588 <_ZN14cHwI2Cmaster_N4readEhPhhS0_h+0xfa>
 8002586:	e7f2      	b.n	800256e <_ZN14cHwI2Cmaster_N4readEhPhhS0_h+0xe0>
		data[i] = ptrBase->RXDR;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800258e:	7dfb      	ldrb	r3, [r7, #23]
 8002590:	6a3a      	ldr	r2, [r7, #32]
 8002592:	4413      	add	r3, r2
 8002594:	b2ca      	uxtb	r2, r1
 8002596:	701a      	strb	r2, [r3, #0]
	for( i=0; i< sizeData; i++ )
 8002598:	7dfb      	ldrb	r3, [r7, #23]
 800259a:	3301      	adds	r3, #1
 800259c:	75fb      	strb	r3, [r7, #23]
 800259e:	e7e1      	b.n	8002564 <_ZN14cHwI2Cmaster_N4readEhPhhS0_h+0xd6>
	}
	while( !(ptrBase->ISR & I2C_ISR_TC) );
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	bf0c      	ite	eq
 80025ae:	2301      	moveq	r3, #1
 80025b0:	2300      	movne	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d000      	beq.n	80025ba <_ZN14cHwI2Cmaster_N4readEhPhhS0_h+0x12c>
 80025b8:	e7f2      	b.n	80025a0 <_ZN14cHwI2Cmaster_N4readEhPhhS0_h+0x112>

  ptrBase->CR2 |= I2C_CR2_STOP;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025c8:	605a      	str	r2, [r3, #4]
  
	if( maskIntr )
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	795b      	ldrb	r3, [r3, #5]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <_ZN14cHwI2Cmaster_N4readEhPhhS0_h+0x148>
    cSystem::enableInterrupt();
 80025d2:	f7ff faaf 	bl	8001b34 <_ZN7cSystem15enableInterruptEv>

  return( !isHardwareOK );
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	791b      	ldrb	r3, [r3, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	bf0c      	ite	eq
 80025de:	2301      	moveq	r3, #1
 80025e0:	2300      	movne	r3, #0
 80025e2:	b2db      	uxtb	r3, r3
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <_ZN9cHwPort_NC1ENS_6PortIdE>:
//
// cHwPort_N
//
//*******************************************************************
//-------------------------------------------------------------------
cHwPort_N::cHwPort_N( PortId portId ) 
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70fb      	strb	r3, [r7, #3]

: cHwPort()
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff f982 	bl	8001904 <_ZN7cHwPortC1Ev>
 8002600:	4a43      	ldr	r2, [pc, #268]	; (8002710 <_ZN9cHwPort_NC1ENS_6PortIdE+0x124>)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	601a      	str	r2, [r3, #0]

{
  switch( portId )
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	2b09      	cmp	r3, #9
 800260a:	d87b      	bhi.n	8002704 <_ZN9cHwPort_NC1ENS_6PortIdE+0x118>
 800260c:	a201      	add	r2, pc, #4	; (adr r2, 8002614 <_ZN9cHwPort_NC1ENS_6PortIdE+0x28>)
 800260e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002612:	bf00      	nop
 8002614:	0800263d 	.word	0x0800263d
 8002618:	08002651 	.word	0x08002651
 800261c:	08002665 	.word	0x08002665
 8002620:	08002679 	.word	0x08002679
 8002624:	0800268d 	.word	0x0800268d
 8002628:	080026a1 	.word	0x080026a1
 800262c:	080026b5 	.word	0x080026b5
 8002630:	080026c9 	.word	0x080026c9
 8002634:	080026dd 	.word	0x080026dd
 8002638:	080026f1 	.word	0x080026f1
  {
    default:
      // error
      break;
    case PA: ptr = (GPIO_TypeDef *)(GPIOA_BASE); RCC->AHB1ENR |= ((1UL << 0) ); break;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a35      	ldr	r2, [pc, #212]	; (8002714 <_ZN9cHwPort_NC1ENS_6PortIdE+0x128>)
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	4b35      	ldr	r3, [pc, #212]	; (8002718 <_ZN9cHwPort_NC1ENS_6PortIdE+0x12c>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a34      	ldr	r2, [pc, #208]	; (8002718 <_ZN9cHwPort_NC1ENS_6PortIdE+0x12c>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	e05a      	b.n	8002706 <_ZN9cHwPort_NC1ENS_6PortIdE+0x11a>
    case PB: ptr = (GPIO_TypeDef *)(GPIOB_BASE); RCC->AHB1ENR |= ((1UL << 1) ); break;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a32      	ldr	r2, [pc, #200]	; (800271c <_ZN9cHwPort_NC1ENS_6PortIdE+0x130>)
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	4b30      	ldr	r3, [pc, #192]	; (8002718 <_ZN9cHwPort_NC1ENS_6PortIdE+0x12c>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a2f      	ldr	r2, [pc, #188]	; (8002718 <_ZN9cHwPort_NC1ENS_6PortIdE+0x12c>)
 800265c:	f043 0302 	orr.w	r3, r3, #2
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	e050      	b.n	8002706 <_ZN9cHwPort_NC1ENS_6PortIdE+0x11a>
    case PC: ptr = (GPIO_TypeDef *)(GPIOC_BASE); RCC->AHB1ENR |= ((1UL << 2) ); break;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a2e      	ldr	r2, [pc, #184]	; (8002720 <_ZN9cHwPort_NC1ENS_6PortIdE+0x134>)
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <_ZN9cHwPort_NC1ENS_6PortIdE+0x12c>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	4a2a      	ldr	r2, [pc, #168]	; (8002718 <_ZN9cHwPort_NC1ENS_6PortIdE+0x12c>)
 8002670:	f043 0304 	orr.w	r3, r3, #4
 8002674:	6313      	str	r3, [r2, #48]	; 0x30
 8002676:	e046      	b.n	8002706 <_ZN9cHwPort_NC1ENS_6PortIdE+0x11a>
    case PD: ptr = (GPIO_TypeDef *)(GPIOD_BASE); RCC->AHB1ENR |= ((1UL << 3) ); break;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a2a      	ldr	r2, [pc, #168]	; (8002724 <_ZN9cHwPort_NC1ENS_6PortIdE+0x138>)
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	4b26      	ldr	r3, [pc, #152]	; (8002718 <_ZN9cHwPort_NC1ENS_6PortIdE+0x12c>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	4a25      	ldr	r2, [pc, #148]	; (8002718 <_ZN9cHwPort_NC1ENS_6PortIdE+0x12c>)
 8002684:	f043 0308 	orr.w	r3, r3, #8
 8002688:	6313      	str	r3, [r2, #48]	; 0x30
 800268a:	e03c      	b.n	8002706 <_ZN9cHwPort_NC1ENS_6PortIdE+0x11a>
    case PE: ptr = (GPIO_TypeDef *)(GPIOE_BASE); RCC->AHB1ENR |= ((1UL << 4) ); break;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a26      	ldr	r2, [pc, #152]	; (8002728 <_ZN9cHwPort_NC1ENS_6PortIdE+0x13c>)
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	4b21      	ldr	r3, [pc, #132]	; (8002718 <_ZN9cHwPort_NC1ENS_6PortIdE+0x12c>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a20      	ldr	r2, [pc, #128]	; (8002718 <_ZN9cHwPort_NC1ENS_6PortIdE+0x12c>)
 8002698:	f043 0310 	orr.w	r3, r3, #16
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	e032      	b.n	8002706 <_ZN9cHwPort_NC1ENS_6PortIdE+0x11a>
    case PF: ptr = (GPIO_TypeDef *)(GPIOF_BASE); RCC->AHB1ENR |= ((1UL << 5) ); break;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a22      	ldr	r2, [pc, #136]	; (800272c <_ZN9cHwPort_NC1ENS_6PortIdE+0x140>)
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <_ZN9cHwPort_NC1ENS_6PortIdE+0x12c>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	4a1b      	ldr	r2, [pc, #108]	; (8002718 <_ZN9cHwPort_NC1ENS_6PortIdE+0x12c>)
 80026ac:	f043 0320 	orr.w	r3, r3, #32
 80026b0:	6313      	str	r3, [r2, #48]	; 0x30
 80026b2:	e028      	b.n	8002706 <_ZN9cHwPort_NC1ENS_6PortIdE+0x11a>
    case PG: ptr = (GPIO_TypeDef *)(GPIOG_BASE); RCC->AHB1ENR |= ((1UL << 6) ); break;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a1e      	ldr	r2, [pc, #120]	; (8002730 <_ZN9cHwPort_NC1ENS_6PortIdE+0x144>)
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	4b17      	ldr	r3, [pc, #92]	; (8002718 <_ZN9cHwPort_NC1ENS_6PortIdE+0x12c>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	4a16      	ldr	r2, [pc, #88]	; (8002718 <_ZN9cHwPort_NC1ENS_6PortIdE+0x12c>)
 80026c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026c4:	6313      	str	r3, [r2, #48]	; 0x30
 80026c6:	e01e      	b.n	8002706 <_ZN9cHwPort_NC1ENS_6PortIdE+0x11a>
    case PH: ptr = (GPIO_TypeDef *)(GPIOH_BASE); RCC->AHB1ENR |= ((1UL << 7) ); break;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a1a      	ldr	r2, [pc, #104]	; (8002734 <_ZN9cHwPort_NC1ENS_6PortIdE+0x148>)
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <_ZN9cHwPort_NC1ENS_6PortIdE+0x12c>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	4a11      	ldr	r2, [pc, #68]	; (8002718 <_ZN9cHwPort_NC1ENS_6PortIdE+0x12c>)
 80026d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d8:	6313      	str	r3, [r2, #48]	; 0x30
 80026da:	e014      	b.n	8002706 <_ZN9cHwPort_NC1ENS_6PortIdE+0x11a>
    case PI: ptr = (GPIO_TypeDef *)(GPIOI_BASE); RCC->AHB1ENR |= ((1UL << 8) ); break;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a16      	ldr	r2, [pc, #88]	; (8002738 <_ZN9cHwPort_NC1ENS_6PortIdE+0x14c>)
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <_ZN9cHwPort_NC1ENS_6PortIdE+0x12c>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	4a0c      	ldr	r2, [pc, #48]	; (8002718 <_ZN9cHwPort_NC1ENS_6PortIdE+0x12c>)
 80026e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ec:	6313      	str	r3, [r2, #48]	; 0x30
 80026ee:	e00a      	b.n	8002706 <_ZN9cHwPort_NC1ENS_6PortIdE+0x11a>
    case PJ: ptr = (GPIO_TypeDef *)(GPIOJ_BASE); RCC->AHB1ENR |= ((1UL << 9) ); break;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a12      	ldr	r2, [pc, #72]	; (800273c <_ZN9cHwPort_NC1ENS_6PortIdE+0x150>)
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	4b08      	ldr	r3, [pc, #32]	; (8002718 <_ZN9cHwPort_NC1ENS_6PortIdE+0x12c>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4a07      	ldr	r2, [pc, #28]	; (8002718 <_ZN9cHwPort_NC1ENS_6PortIdE+0x12c>)
 80026fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002700:	6313      	str	r3, [r2, #48]	; 0x30
 8002702:	e000      	b.n	8002706 <_ZN9cHwPort_NC1ENS_6PortIdE+0x11a>
      break;
 8002704:	bf00      	nop
  }
}
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	08007684 	.word	0x08007684
 8002714:	40020000 	.word	0x40020000
 8002718:	40023800 	.word	0x40023800
 800271c:	40020400 	.word	0x40020400
 8002720:	40020800 	.word	0x40020800
 8002724:	40020c00 	.word	0x40020c00
 8002728:	40021000 	.word	0x40021000
 800272c:	40021400 	.word	0x40021400
 8002730:	40021800 	.word	0x40021800
 8002734:	40021c00 	.word	0x40021c00
 8002738:	40022000 	.word	0x40022000
 800273c:	40022400 	.word	0x40022400

08002740 <_ZN9cHwPort_N7setModeEmN7cHwPort4ModeE>:

//-------------------------------------------------------------------
void cHwPort_N::setMode( MTYPE mask, Mode mode )
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	4613      	mov	r3, r2
 800274c:	71fb      	strb	r3, [r7, #7]
  for( BYTE i = 0; i < 16; i++, mask >>= 1 )
 800274e:	2300      	movs	r3, #0
 8002750:	75fb      	strb	r3, [r7, #23]
 8002752:	7dfb      	ldrb	r3, [r7, #23]
 8002754:	2b0f      	cmp	r3, #15
 8002756:	d813      	bhi.n	8002780 <_ZN9cHwPort_N7setModeEmN7cHwPort4ModeE+0x40>
  {
    if( mask & 0x01 )
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d007      	beq.n	8002772 <_ZN9cHwPort_N7setModeEmN7cHwPort4ModeE+0x32>
    {
      setPinMode( i, mode );
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	3304      	adds	r3, #4
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	79fa      	ldrb	r2, [r7, #7]
 800276c:	7df9      	ldrb	r1, [r7, #23]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	4798      	blx	r3
  for( BYTE i = 0; i < 16; i++, mask >>= 1 )
 8002772:	7dfb      	ldrb	r3, [r7, #23]
 8002774:	3301      	adds	r3, #1
 8002776:	75fb      	strb	r3, [r7, #23]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	085b      	lsrs	r3, r3, #1
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	e7e8      	b.n	8002752 <_ZN9cHwPort_N7setModeEmN7cHwPort4ModeE+0x12>
    }
  }
}
 8002780:	bf00      	nop
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <_ZN9cHwPort_N10setPinModeEhN7cHwPort4ModeE>:

//-------------------------------------------------------------------
void cHwPort_N::setPinMode( BYTE pinId, Mode mode )
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	70fb      	strb	r3, [r7, #3]
 8002794:	4613      	mov	r3, r2
 8002796:	70bb      	strb	r3, [r7, #2]
  BYTE  pinId2 = pinId << 1;
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	74fb      	strb	r3, [r7, #19]

  MTYPE bitmask  = ~((MTYPE)0x01 << pinId  );
 800279e:	78fb      	ldrb	r3, [r7, #3]
 80027a0:	2201      	movs	r2, #1
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	60fb      	str	r3, [r7, #12]
  MTYPE bitmask2 = ~((MTYPE)0x03 << pinId2 );
 80027aa:	7cfb      	ldrb	r3, [r7, #19]
 80027ac:	2203      	movs	r2, #3
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	60bb      	str	r3, [r7, #8]

  MTYPE moder  = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
  MTYPE pupdr  = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
  MTYPE otyper = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  
  if( mode & cHwPort::Out ) moder   = (MTYPE)0x01<< pinId2;
 80027c2:	78bb      	ldrb	r3, [r7, #2]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d004      	beq.n	80027d6 <_ZN9cHwPort_N10setPinModeEhN7cHwPort4ModeE+0x4e>
 80027cc:	7cfb      	ldrb	r3, [r7, #19]
 80027ce:	2201      	movs	r2, #1
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	61fb      	str	r3, [r7, #28]
  if( mode & cHwPort::PU  ) pupdr  |= (MTYPE)0x01<< pinId2;
 80027d6:	78bb      	ldrb	r3, [r7, #2]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d006      	beq.n	80027ee <_ZN9cHwPort_N10setPinModeEhN7cHwPort4ModeE+0x66>
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	2201      	movs	r2, #1
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
  if( mode & cHwPort::PD  ) pupdr  |= (MTYPE)0x02<< pinId2;
 80027ee:	78bb      	ldrb	r3, [r7, #2]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d006      	beq.n	8002806 <_ZN9cHwPort_N10setPinModeEhN7cHwPort4ModeE+0x7e>
 80027f8:	7cfb      	ldrb	r3, [r7, #19]
 80027fa:	2202      	movs	r2, #2
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
  if( mode & cHwPort::OD  ) otyper  = (MTYPE)0x01<< pinId;
 8002806:	78bb      	ldrb	r3, [r7, #2]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d004      	beq.n	800281a <_ZN9cHwPort_N10setPinModeEhN7cHwPort4ModeE+0x92>
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	2201      	movs	r2, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	617b      	str	r3, [r7, #20]

  cSystem::disableInterrupt();
 800281a:	f7ff f979 	bl	8001b10 <_ZN7cSystem16disableInterruptEv>
  ptr->MODER     = ( ptr->MODER     & bitmask2 ) | moder;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	ea02 0103 	and.w	r1, r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	430a      	orrs	r2, r1
 8002832:	601a      	str	r2, [r3, #0]
  ptr->PUPDR     = ( ptr->PUPDR     & bitmask2 ) | pupdr;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	ea02 0103 	and.w	r1, r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	430a      	orrs	r2, r1
 8002848:	60da      	str	r2, [r3, #12]
  ptr->OTYPER    = ( ptr->OTYPER    & bitmask  ) | otyper;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	ea02 0103 	and.w	r1, r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	430a      	orrs	r2, r1
 800285e:	605a      	str	r2, [r3, #4]
  cSystem::enableInterrupt();
 8002860:	f7ff f968 	bl	8001b34 <_ZN7cSystem15enableInterruptEv>
}
 8002864:	bf00      	nop
 8002866:	3720      	adds	r7, #32
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE>:
//
// cHwRTC_0
//
//*******************************************************************
//-------------------------------------------------------------------
cHwRTC_0::cHwRTC_0( RTC_ClockConfig_t config )
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	70fb      	strb	r3, [r7, #3]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4618      	mov	r0, r3
 800287c:	f002 fbe2 	bl	8005044 <_ZN6cHwRTCC1Ev>
 8002880:	4a3f      	ldr	r2, [pc, #252]	; (8002980 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x114>)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	601a      	str	r2, [r3, #0]
{
  PWR->CR1 |= PWR_CR1_DBP;
 8002886:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x118>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a3e      	ldr	r2, [pc, #248]	; (8002984 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x118>)
 800288c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002890:	6013      	str	r3, [r2, #0]
//TODO: flag an Konstruktor useExternalOszillator

	if( config == LSE )
 8002892:	78fb      	ldrb	r3, [r7, #3]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d10d      	bne.n	80028b4 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x48>
	{
  RCC->BDCR &= ~(0x03<<8); // reset RTCSEL
 8002898:	4b3b      	ldr	r3, [pc, #236]	; (8002988 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x11c>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289c:	4a3a      	ldr	r2, [pc, #232]	; (8002988 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x11c>)
 800289e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a2:	6713      	str	r3, [r2, #112]	; 0x70
  RCC->BDCR |=  (   1<<15) // RTC enable
 80028a4:	4b38      	ldr	r3, [pc, #224]	; (8002988 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x11c>)
 80028a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028a8:	4937      	ldr	r1, [pc, #220]	; (8002988 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x11c>)
 80028aa:	f248 1301 	movw	r3, #33025	; 0x8101
 80028ae:	4313      	orrs	r3, r2
 80028b0:	670b      	str	r3, [r1, #112]	; 0x70
 80028b2:	e026      	b.n	8002902 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x96>
               |(0x01<< 8)  // LSE select
               |(1<<0); // LSEON
	}
	else if(config == LSI)
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d123      	bne.n	8002902 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x96>
	{
		if( !(RCC->BDCR & (3<<8)) ) // nicht HSE
 80028ba:	4b33      	ldr	r3, [pc, #204]	; (8002988 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x11c>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bf0c      	ite	eq
 80028c6:	2301      	moveq	r3, #1
 80028c8:	2300      	movne	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00b      	beq.n	80028e8 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x7c>
		{
			RCC->BDCR |=  (0x01<<16); // BDRST
 80028d0:	4b2d      	ldr	r3, [pc, #180]	; (8002988 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x11c>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	4a2c      	ldr	r2, [pc, #176]	; (8002988 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x11c>)
 80028d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028da:	6713      	str	r3, [r2, #112]	; 0x70
			RCC->BDCR &= ~(0x01<<16); // BDRST
 80028dc:	4b2a      	ldr	r3, [pc, #168]	; (8002988 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x11c>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	4a29      	ldr	r2, [pc, #164]	; (8002988 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x11c>)
 80028e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e6:	6713      	str	r3, [r2, #112]	; 0x70
		}
  	RCC->BDCR &= ~(0x03<<8); // reset RTCSEL
 80028e8:	4b27      	ldr	r3, [pc, #156]	; (8002988 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x11c>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	4a26      	ldr	r2, [pc, #152]	; (8002988 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x11c>)
 80028ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f2:	6713      	str	r3, [r2, #112]	; 0x70
		RCC->BDCR |=  (   1<<15) // RTC enable
 80028f4:	4b24      	ldr	r3, [pc, #144]	; (8002988 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x11c>)
 80028f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028f8:	4923      	ldr	r1, [pc, #140]	; (8002988 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x11c>)
 80028fa:	f248 3301 	movw	r3, #33537	; 0x8301
 80028fe:	4313      	orrs	r3, r2
 8002900:	670b      	str	r3, [r1, #112]	; 0x70
									 |(0x03<< 8)  // LSE select
									 |(1<<0); // LSEON
	}

  RCC->CFGR &= ~(0x1F<<16);
 8002902:	4b21      	ldr	r3, [pc, #132]	; (8002988 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x11c>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	4a20      	ldr	r2, [pc, #128]	; (8002988 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x11c>)
 8002908:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800290c:	6093      	str	r3, [r2, #8]
  RCC->CFGR |=  ( (_HSE_CLK/1000)<<16);    // HSE=8MHz => 1MHz
 800290e:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x11c>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	4a1d      	ldr	r2, [pc, #116]	; (8002988 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x11c>)
 8002914:	f443 13c8 	orr.w	r3, r3, #1638400	; 0x190000
 8002918:	6093      	str	r3, [r2, #8]

  // unlock write protection:
  RTC->WPR = 0xCA;
 800291a:	4b1c      	ldr	r3, [pc, #112]	; (800298c <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x120>)
 800291c:	22ca      	movs	r2, #202	; 0xca
 800291e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8002920:	4b1a      	ldr	r3, [pc, #104]	; (800298c <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x120>)
 8002922:	2253      	movs	r2, #83	; 0x53
 8002924:	625a      	str	r2, [r3, #36]	; 0x24

  // initialization
  RTC->ISR |= RTC_ISR_INIT;
 8002926:	4b19      	ldr	r3, [pc, #100]	; (800298c <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x120>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	4a18      	ldr	r2, [pc, #96]	; (800298c <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x120>)
 800292c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002930:	60d3      	str	r3, [r2, #12]

  while( !(RTC->ISR & RTC_ISR_INITF) );
 8002932:	4b16      	ldr	r3, [pc, #88]	; (800298c <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x120>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	bf0c      	ite	eq
 800293e:	2301      	moveq	r3, #1
 8002940:	2300      	movne	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d000      	beq.n	800294a <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0xde>
 8002948:	e7f3      	b.n	8002932 <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0xc6>

  // ???
if( config == LSE )
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d00c      	beq.n	800296a <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0xfe>
	{
  //RTC->PRER  = ((MTYPE)(20000-1)<< 0); // sychronous
  //RTC->PRER |= ((MTYPE)(   50-1)<<16); // asynchronous
	}
	else if( config == LSI )
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0xfe>
	{

    RTC->PRER  = ((MTYPE)(8000-1)<< 0); // sychronous
 8002956:	4b0d      	ldr	r3, [pc, #52]	; (800298c <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x120>)
 8002958:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800295c:	611a      	str	r2, [r3, #16]
    RTC->PRER |= ((MTYPE)(  125-1)<<16); // asynchronous
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x120>)
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	4a0a      	ldr	r2, [pc, #40]	; (800298c <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x120>)
 8002964:	f443 03f8 	orr.w	r3, r3, #8126464	; 0x7c0000
 8002968:	6113      	str	r3, [r2, #16]
	}
  // ???
  // exit initialization
  RTC->ISR &= ~RTC_ISR_INIT;
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x120>)
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	4a07      	ldr	r2, [pc, #28]	; (800298c <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE+0x120>)
 8002970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002974:	60d3      	str	r3, [r2, #12]
  RTC->PRER |= ((MTYPE)(   50-1)<<16); // asynchronous

  // exit initialization
  RTC->ISR &= ~RTC_ISR_INIT;
  */
}
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	08007664 	.word	0x08007664
 8002984:	40007000 	.word	0x40007000
 8002988:	40023800 	.word	0x40023800
 800298c:	40002800 	.word	0x40002800

08002990 <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE>:

//-------------------------------------------------------------------
void cHwRTC_0::set( const cHwRTC::Properties &clock )
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  BYTE dow;

  // unlock write protection:
  RTC->WPR = 0xCA;
 800299a:	4b76      	ldr	r3, [pc, #472]	; (8002b74 <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x1e4>)
 800299c:	22ca      	movs	r2, #202	; 0xca
 800299e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80029a0:	4b74      	ldr	r3, [pc, #464]	; (8002b74 <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x1e4>)
 80029a2:	2253      	movs	r2, #83	; 0x53
 80029a4:	625a      	str	r2, [r3, #36]	; 0x24

  // initialization
  RTC->ISR |= RTC_ISR_INIT;
 80029a6:	4b73      	ldr	r3, [pc, #460]	; (8002b74 <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x1e4>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	4a72      	ldr	r2, [pc, #456]	; (8002b74 <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x1e4>)
 80029ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b0:	60d3      	str	r3, [r2, #12]

  while( !(RTC->ISR & RTC_ISR_INITF) );
 80029b2:	4b70      	ldr	r3, [pc, #448]	; (8002b74 <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x1e4>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	bf0c      	ite	eq
 80029be:	2301      	moveq	r3, #1
 80029c0:	2300      	movne	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d000      	beq.n	80029ca <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x3a>
 80029c8:	e7f3      	b.n	80029b2 <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x22>

  if( clock.dow == 0 )
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	791b      	ldrb	r3, [r3, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10b      	bne.n	80029ea <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x5a>
  {
    dow = getDayOfWeek( clock.day, clock.month, clock.year );
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	78d8      	ldrb	r0, [r3, #3]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	7899      	ldrb	r1, [r3, #2]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	f7ff f834 	bl	8001a4c <_ZN6cHwRTC12getDayOfWeekEhht>
 80029e4:	4603      	mov	r3, r0
 80029e6:	73fb      	strb	r3, [r7, #15]
 80029e8:	e002      	b.n	80029f0 <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x60>
  }
  else
  {
    dow = clock.dow;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	791b      	ldrb	r3, [r3, #4]
 80029ee:	73fb      	strb	r3, [r7, #15]
  }

   WORD year = clock.year%100;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	4a60      	ldr	r2, [pc, #384]	; (8002b78 <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x1e8>)
 80029f6:	fba2 1203 	umull	r1, r2, r2, r3
 80029fa:	0952      	lsrs	r2, r2, #5
 80029fc:	2164      	movs	r1, #100	; 0x64
 80029fe:	fb01 f202 	mul.w	r2, r1, r2
 8002a02:	1a9b      	subs	r3, r3, r2
 8002a04:	81bb      	strh	r3, [r7, #12]

  RTC->TR =  ((DWORD)((clock.second%10)&0xF) << 0)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	79da      	ldrb	r2, [r3, #7]
 8002a0a:	4b5c      	ldr	r3, [pc, #368]	; (8002b7c <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x1ec>)
 8002a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a10:	08d9      	lsrs	r1, r3, #3
 8002a12:	460b      	mov	r3, r1
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f003 020f 	and.w	r2, r3, #15
            |((DWORD)((clock.second/10)&0x7) << 4)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	79db      	ldrb	r3, [r3, #7]
 8002a26:	4955      	ldr	r1, [pc, #340]	; (8002b7c <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x1ec>)
 8002a28:	fba1 1303 	umull	r1, r3, r1, r3
 8002a2c:	08db      	lsrs	r3, r3, #3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a36:	ea42 0003 	orr.w	r0, r2, r3
            |((DWORD)((clock.minute%10)&0xF) << 8)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	799a      	ldrb	r2, [r3, #6]
 8002a3e:	4b4f      	ldr	r3, [pc, #316]	; (8002b7c <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x1ec>)
 8002a40:	fba3 1302 	umull	r1, r3, r3, r2
 8002a44:	08d9      	lsrs	r1, r3, #3
 8002a46:	460b      	mov	r3, r1
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a58:	ea40 0203 	orr.w	r2, r0, r3
            |((DWORD)((clock.minute/10)&0x7) <<12)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	799b      	ldrb	r3, [r3, #6]
 8002a60:	4946      	ldr	r1, [pc, #280]	; (8002b7c <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x1ec>)
 8002a62:	fba1 1303 	umull	r1, r3, r1, r3
 8002a66:	08db      	lsrs	r3, r3, #3
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	031b      	lsls	r3, r3, #12
 8002a6c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002a70:	ea42 0003 	orr.w	r0, r2, r3
            |((DWORD)((clock.hour  %10)&0xF) <<16)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	795a      	ldrb	r2, [r3, #5]
 8002a78:	4b40      	ldr	r3, [pc, #256]	; (8002b7c <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x1ec>)
 8002a7a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a7e:	08d9      	lsrs	r1, r3, #3
 8002a80:	460b      	mov	r3, r1
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	041b      	lsls	r3, r3, #16
 8002a8e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002a92:	ea40 0203 	orr.w	r2, r0, r3
            |((DWORD)((clock.hour  /10)&0x3) <<20);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	795b      	ldrb	r3, [r3, #5]
 8002a9a:	4938      	ldr	r1, [pc, #224]	; (8002b7c <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x1ec>)
 8002a9c:	fba1 1303 	umull	r1, r3, r1, r3
 8002aa0:	08db      	lsrs	r3, r3, #3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	051b      	lsls	r3, r3, #20
 8002aa6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
  RTC->TR =  ((DWORD)((clock.second%10)&0xF) << 0)
 8002aaa:	4932      	ldr	r1, [pc, #200]	; (8002b74 <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x1e4>)
            |((DWORD)((clock.hour  /10)&0x3) <<20);
 8002aac:	4313      	orrs	r3, r2
  RTC->TR =  ((DWORD)((clock.second%10)&0xF) << 0)
 8002aae:	600b      	str	r3, [r1, #0]

  RTC->DR =  ((DWORD)((clock.day  %10)&0xF) << 0)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	78da      	ldrb	r2, [r3, #3]
 8002ab4:	4b31      	ldr	r3, [pc, #196]	; (8002b7c <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x1ec>)
 8002ab6:	fba3 1302 	umull	r1, r3, r3, r2
 8002aba:	08d9      	lsrs	r1, r3, #3
 8002abc:	460b      	mov	r3, r1
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	f003 020f 	and.w	r2, r3, #15
            |((DWORD)((clock.day  /10)&0x3) << 4)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	78db      	ldrb	r3, [r3, #3]
 8002ad0:	492a      	ldr	r1, [pc, #168]	; (8002b7c <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x1ec>)
 8002ad2:	fba1 1303 	umull	r1, r3, r1, r3
 8002ad6:	08db      	lsrs	r3, r3, #3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ae0:	ea42 0003 	orr.w	r0, r2, r3
            |((DWORD)((clock.month%10)&0xF) << 8)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	789a      	ldrb	r2, [r3, #2]
 8002ae8:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x1ec>)
 8002aea:	fba3 1302 	umull	r1, r3, r3, r2
 8002aee:	08d9      	lsrs	r1, r3, #3
 8002af0:	460b      	mov	r3, r1
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b02:	ea40 0203 	orr.w	r2, r0, r3
            |((DWORD)((clock.month/10)&0x1) <<12)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	789b      	ldrb	r3, [r3, #2]
 8002b0a:	491c      	ldr	r1, [pc, #112]	; (8002b7c <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x1ec>)
 8002b0c:	fba1 1303 	umull	r1, r3, r1, r3
 8002b10:	08db      	lsrs	r3, r3, #3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	031b      	lsls	r3, r3, #12
 8002b16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b1a:	431a      	orrs	r2, r3
            |((DWORD)((dow  % 8)&0x7) <<13)
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	035b      	lsls	r3, r3, #13
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	ea42 0003 	orr.w	r0, r2, r3
            |((DWORD)((year %10)&0xF) <<16)
 8002b26:	89ba      	ldrh	r2, [r7, #12]
 8002b28:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x1ec>)
 8002b2a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b2e:	08d9      	lsrs	r1, r3, #3
 8002b30:	460b      	mov	r3, r1
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	041b      	lsls	r3, r3, #16
 8002b3e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002b42:	ea40 0203 	orr.w	r2, r0, r3
            |((DWORD)((year /10)&0xF) <<20);
 8002b46:	89bb      	ldrh	r3, [r7, #12]
 8002b48:	490c      	ldr	r1, [pc, #48]	; (8002b7c <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x1ec>)
 8002b4a:	fba1 1303 	umull	r1, r3, r1, r3
 8002b4e:	08db      	lsrs	r3, r3, #3
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	051b      	lsls	r3, r3, #20
 8002b54:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  RTC->DR =  ((DWORD)((clock.day  %10)&0xF) << 0)
 8002b58:	4906      	ldr	r1, [pc, #24]	; (8002b74 <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x1e4>)
            |((DWORD)((year /10)&0xF) <<20);
 8002b5a:	4313      	orrs	r3, r2
  RTC->DR =  ((DWORD)((clock.day  %10)&0xF) << 0)
 8002b5c:	604b      	str	r3, [r1, #4]

  // exit initialization
  RTC->ISR &= ~RTC_ISR_INIT;
 8002b5e:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x1e4>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <_ZN8cHwRTC_03setERKN6cHwRTC10PropertiesE+0x1e4>)
 8002b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b68:	60d3      	str	r3, [r2, #12]
}
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40002800 	.word	0x40002800
 8002b78:	51eb851f 	.word	0x51eb851f
 8002b7c:	cccccccd 	.word	0xcccccccd

08002b80 <_ZN8cHwRTC_03getERN6cHwRTC10PropertiesE>:

//-------------------------------------------------------------------
BYTE cHwRTC_0::get( cHwRTC::Properties &clock )
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
   BYTE sec;

  clock.second = (BYTE)(((RTC->TR >> 0)&0xF) + 10*((RTC->TR >> 4)&0x7));
 8002b8a:	4b5d      	ldr	r3, [pc, #372]	; (8002d00 <_ZN8cHwRTC_03getERN6cHwRTC10PropertiesE+0x180>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f003 030f 	and.w	r3, r3, #15
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	4b5a      	ldr	r3, [pc, #360]	; (8002d00 <_ZN8cHwRTC_03getERN6cHwRTC10PropertiesE+0x180>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	091b      	lsrs	r3, r3, #4
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	0089      	lsls	r1, r1, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	71da      	strb	r2, [r3, #7]
  clock.minute = (BYTE)(((RTC->TR >> 8)&0xF) + 10*((RTC->TR >>12)&0x7));
 8002bb6:	4b52      	ldr	r3, [pc, #328]	; (8002d00 <_ZN8cHwRTC_03getERN6cHwRTC10PropertiesE+0x180>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	0a1b      	lsrs	r3, r3, #8
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	4b4e      	ldr	r3, [pc, #312]	; (8002d00 <_ZN8cHwRTC_03getERN6cHwRTC10PropertiesE+0x180>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	0b1b      	lsrs	r3, r3, #12
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	0089      	lsls	r1, r1, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	719a      	strb	r2, [r3, #6]
  clock.hour   = (BYTE)(((RTC->TR >>16)&0xF) + 10*((RTC->TR >>20)&0x3));
 8002be4:	4b46      	ldr	r3, [pc, #280]	; (8002d00 <_ZN8cHwRTC_03getERN6cHwRTC10PropertiesE+0x180>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	0c1b      	lsrs	r3, r3, #16
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	4b43      	ldr	r3, [pc, #268]	; (8002d00 <_ZN8cHwRTC_03getERN6cHwRTC10PropertiesE+0x180>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	0d1b      	lsrs	r3, r3, #20
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	4619      	mov	r1, r3
 8002c02:	0089      	lsls	r1, r1, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	715a      	strb	r2, [r3, #5]

  clock.dow    = (BYTE)(((RTC->DR >>13)&0x7)                          );
 8002c12:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <_ZN8cHwRTC_03getERN6cHwRTC10PropertiesE+0x180>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	0b5b      	lsrs	r3, r3, #13
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	711a      	strb	r2, [r3, #4]

  clock.day    = (BYTE)(((RTC->DR >> 0)&0xF) + 10*((RTC->DR >> 4)&0x3));
 8002c24:	4b36      	ldr	r3, [pc, #216]	; (8002d00 <_ZN8cHwRTC_03getERN6cHwRTC10PropertiesE+0x180>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	4b33      	ldr	r3, [pc, #204]	; (8002d00 <_ZN8cHwRTC_03getERN6cHwRTC10PropertiesE+0x180>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	4619      	mov	r1, r3
 8002c40:	0089      	lsls	r1, r1, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	4413      	add	r3, r2
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	70da      	strb	r2, [r3, #3]
  clock.month  = (BYTE)(((RTC->DR >> 8)&0xF) + 10*((RTC->DR >>12)&0x1));
 8002c50:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <_ZN8cHwRTC_03getERN6cHwRTC10PropertiesE+0x180>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	0a1b      	lsrs	r3, r3, #8
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	f003 030f 	and.w	r3, r3, #15
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <_ZN8cHwRTC_03getERN6cHwRTC10PropertiesE+0x180>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	0b1b      	lsrs	r3, r3, #12
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	0089      	lsls	r1, r1, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	709a      	strb	r2, [r3, #2]
  clock.year   = (BYTE)(((RTC->DR >>16)&0xF) + 10*((RTC->DR >>20)&0xF));
 8002c7e:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <_ZN8cHwRTC_03getERN6cHwRTC10PropertiesE+0x180>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	0c1b      	lsrs	r3, r3, #16
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <_ZN8cHwRTC_03getERN6cHwRTC10PropertiesE+0x180>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	0d1b      	lsrs	r3, r3, #20
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	0089      	lsls	r1, r1, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	801a      	strh	r2, [r3, #0]

  // reread sec to check overflow
  sec          = (BYTE)(((RTC->TR >> 0)&0xF) + 10*((RTC->TR >> 4)&0x7));
 8002cae:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <_ZN8cHwRTC_03getERN6cHwRTC10PropertiesE+0x180>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <_ZN8cHwRTC_03getERN6cHwRTC10PropertiesE+0x180>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	4619      	mov	r1, r3
 8002cca:	0089      	lsls	r1, r1, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	73fb      	strb	r3, [r7, #15]

 clock.year += 2000;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	801a      	strh	r2, [r3, #0]

  return( (clock.second <= sec) ? true : false );
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	79db      	ldrb	r3, [r3, #7]
 8002ce8:	7bfa      	ldrb	r2, [r7, #15]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	bf2c      	ite	cs
 8002cee:	2301      	movcs	r3, #1
 8002cf0:	2300      	movcc	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	40002800 	.word	0x40002800
 8002d04:	00000000 	.word	0x00000000

08002d08 <_ZN10cHwTimer_NC1ENS_7TimerIdEm>:
cHwTimer_N *cHwTimer_N::timerPtr_10 = 0;
cHwTimer_N *cHwTimer_N::timerPtr_11 = 0;
cHwTimer_N *cHwTimer_N::timerPtr_14 = 0;

//-------------------------------------------------------------------
cHwTimer_N::cHwTimer_N( TimerId timerIdIn,
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	460b      	mov	r3, r1
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	72fb      	strb	r3, [r7, #11]
                        DWORD   cycleTimeIn )

: cHwTimer()
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe fd65 	bl	80017e8 <_ZN8cHwTimerC1Ev>
 8002d1e:	4aa0      	ldr	r2, [pc, #640]	; (8002fa0 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x298>)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	601a      	str	r2, [r3, #0]

{
  timerId = timerIdIn;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	7afa      	ldrb	r2, [r7, #11]
 8002d28:	741a      	strb	r2, [r3, #16]

  switch( timerId )
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	7c1b      	ldrb	r3, [r3, #16]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	2b0a      	cmp	r3, #10
 8002d32:	f200 80be 	bhi.w	8002eb2 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x1aa>
 8002d36:	a201      	add	r2, pc, #4	; (adr r2, 8002d3c <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x34>)
 8002d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3c:	08002d69 	.word	0x08002d69
 8002d40:	08002d89 	.word	0x08002d89
 8002d44:	08002dab 	.word	0x08002dab
 8002d48:	08002dcb 	.word	0x08002dcb
 8002d4c:	08002deb 	.word	0x08002deb
 8002d50:	08002e0b 	.word	0x08002e0b
 8002d54:	08002e2b 	.word	0x08002e2b
 8002d58:	08002e4b 	.word	0x08002e4b
 8002d5c:	08002e65 	.word	0x08002e65
 8002d60:	08002e7f 	.word	0x08002e7f
 8002d64:	08002e99 	.word	0x08002e99
     default:
      // error!
      break;

   case TIM_1:
      ptr           = (TIM_TypeDef*)TIM1_BASE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4a8e      	ldr	r2, [pc, #568]	; (8002fa4 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x29c>)
 8002d6c:	615a      	str	r2, [r3, #20]
      timerPtr_1    = this;
 8002d6e:	4a8e      	ldr	r2, [pc, #568]	; (8002fa8 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a0>)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8002d74:	4b8d      	ldr	r3, [pc, #564]	; (8002fac <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a4>)
 8002d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d78:	4a8c      	ldr	r2, [pc, #560]	; (8002fac <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a4>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6453      	str	r3, [r2, #68]	; 0x44
      NVIC_EnableIRQ( TIM1_UP_TIM10_IRQn );
 8002d80:	2019      	movs	r0, #25
 8002d82:	f7fe fd07 	bl	8001794 <__NVIC_EnableIRQ>
      break;
 8002d86:	e095      	b.n	8002eb4 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x1ac>

    case TIM_2:
      ptr           = (TIM_TypeDef*)TIM2_BASE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d8e:	615a      	str	r2, [r3, #20]
      timerPtr_2    = this;
 8002d90:	4a87      	ldr	r2, [pc, #540]	; (8002fb0 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a8>)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002d96:	4b85      	ldr	r3, [pc, #532]	; (8002fac <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a4>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	4a84      	ldr	r2, [pc, #528]	; (8002fac <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a4>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6413      	str	r3, [r2, #64]	; 0x40
      NVIC_EnableIRQ( TIM2_IRQn );
 8002da2:	201c      	movs	r0, #28
 8002da4:	f7fe fcf6 	bl	8001794 <__NVIC_EnableIRQ>
      break;
 8002da8:	e084      	b.n	8002eb4 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x1ac>

    case TIM_3:
      ptr           = (TIM_TypeDef*)TIM3_BASE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4a81      	ldr	r2, [pc, #516]	; (8002fb4 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2ac>)
 8002dae:	615a      	str	r2, [r3, #20]
      timerPtr_3    = this;
 8002db0:	4a81      	ldr	r2, [pc, #516]	; (8002fb8 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2b0>)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002db6:	4b7d      	ldr	r3, [pc, #500]	; (8002fac <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a4>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	4a7c      	ldr	r2, [pc, #496]	; (8002fac <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a4>)
 8002dbc:	f043 0302 	orr.w	r3, r3, #2
 8002dc0:	6413      	str	r3, [r2, #64]	; 0x40
      NVIC_EnableIRQ( TIM3_IRQn );
 8002dc2:	201d      	movs	r0, #29
 8002dc4:	f7fe fce6 	bl	8001794 <__NVIC_EnableIRQ>
      break;
 8002dc8:	e074      	b.n	8002eb4 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x1ac>

    case TIM_4:
      ptr           = (TIM_TypeDef*)TIM4_BASE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4a7b      	ldr	r2, [pc, #492]	; (8002fbc <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2b4>)
 8002dce:	615a      	str	r2, [r3, #20]
      timerPtr_4    = this;
 8002dd0:	4a7b      	ldr	r2, [pc, #492]	; (8002fc0 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2b8>)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002dd6:	4b75      	ldr	r3, [pc, #468]	; (8002fac <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a4>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	4a74      	ldr	r2, [pc, #464]	; (8002fac <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a4>)
 8002ddc:	f043 0304 	orr.w	r3, r3, #4
 8002de0:	6413      	str	r3, [r2, #64]	; 0x40
      NVIC_EnableIRQ( TIM4_IRQn );
 8002de2:	201e      	movs	r0, #30
 8002de4:	f7fe fcd6 	bl	8001794 <__NVIC_EnableIRQ>
      break;
 8002de8:	e064      	b.n	8002eb4 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x1ac>

    case TIM_5:
      ptr           = (TIM_TypeDef*)TIM5_BASE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4a75      	ldr	r2, [pc, #468]	; (8002fc4 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2bc>)
 8002dee:	615a      	str	r2, [r3, #20]
      timerPtr_5    = this;
 8002df0:	4a75      	ldr	r2, [pc, #468]	; (8002fc8 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2c0>)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8002df6:	4b6d      	ldr	r3, [pc, #436]	; (8002fac <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a4>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	4a6c      	ldr	r2, [pc, #432]	; (8002fac <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a4>)
 8002dfc:	f043 0308 	orr.w	r3, r3, #8
 8002e00:	6413      	str	r3, [r2, #64]	; 0x40
      NVIC_EnableIRQ( TIM5_IRQn );
 8002e02:	2032      	movs	r0, #50	; 0x32
 8002e04:	f7fe fcc6 	bl	8001794 <__NVIC_EnableIRQ>
      break;
 8002e08:	e054      	b.n	8002eb4 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x1ac>

    case TIM_7:
      ptr           = (TIM_TypeDef*)TIM7_BASE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4a6f      	ldr	r2, [pc, #444]	; (8002fcc <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2c4>)
 8002e0e:	615a      	str	r2, [r3, #20]
      timerPtr_7    = this;
 8002e10:	4a6f      	ldr	r2, [pc, #444]	; (8002fd0 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2c8>)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 8002e16:	4b65      	ldr	r3, [pc, #404]	; (8002fac <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a4>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	4a64      	ldr	r2, [pc, #400]	; (8002fac <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a4>)
 8002e1c:	f043 0320 	orr.w	r3, r3, #32
 8002e20:	6413      	str	r3, [r2, #64]	; 0x40
      NVIC_EnableIRQ( TIM7_IRQn );
 8002e22:	2037      	movs	r0, #55	; 0x37
 8002e24:	f7fe fcb6 	bl	8001794 <__NVIC_EnableIRQ>
      break;
 8002e28:	e044      	b.n	8002eb4 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x1ac>

    case TIM_8:
      ptr           = (TIM_TypeDef*)TIM8_BASE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4a69      	ldr	r2, [pc, #420]	; (8002fd4 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2cc>)
 8002e2e:	615a      	str	r2, [r3, #20]
      timerPtr_8    = this;
 8002e30:	4a69      	ldr	r2, [pc, #420]	; (8002fd8 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2d0>)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 8002e36:	4b5d      	ldr	r3, [pc, #372]	; (8002fac <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a4>)
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	4a5c      	ldr	r2, [pc, #368]	; (8002fac <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a4>)
 8002e3c:	f043 0302 	orr.w	r3, r3, #2
 8002e40:	6453      	str	r3, [r2, #68]	; 0x44
      NVIC_EnableIRQ( TIM8_CC_IRQn );
 8002e42:	202e      	movs	r0, #46	; 0x2e
 8002e44:	f7fe fca6 	bl	8001794 <__NVIC_EnableIRQ>
      break;
 8002e48:	e034      	b.n	8002eb4 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x1ac>

    case TIM_9:
      ptr           = (TIM_TypeDef*)TIM9_BASE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4a63      	ldr	r2, [pc, #396]	; (8002fdc <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2d4>)
 8002e4e:	615a      	str	r2, [r3, #20]
      timerPtr_9    = this;
 8002e50:	4a63      	ldr	r2, [pc, #396]	; (8002fe0 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2d8>)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM9EN;
 8002e56:	4b55      	ldr	r3, [pc, #340]	; (8002fac <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a4>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	4a54      	ldr	r2, [pc, #336]	; (8002fac <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a4>)
 8002e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e60:	6453      	str	r3, [r2, #68]	; 0x44
      //<! todo 
      // NVIC_EnableIRQ( TIM9_IRQn );
      break;
 8002e62:	e027      	b.n	8002eb4 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x1ac>

    case TIM_10:
      ptr           = (TIM_TypeDef*)TIM10_BASE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4a5f      	ldr	r2, [pc, #380]	; (8002fe4 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2dc>)
 8002e68:	615a      	str	r2, [r3, #20]
      timerPtr_10    = this;
 8002e6a:	4a5f      	ldr	r2, [pc, #380]	; (8002fe8 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2e0>)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 8002e70:	4b4e      	ldr	r3, [pc, #312]	; (8002fac <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a4>)
 8002e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e74:	4a4d      	ldr	r2, [pc, #308]	; (8002fac <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a4>)
 8002e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e7a:	6453      	str	r3, [r2, #68]	; 0x44
      //<! todo 
      // NVIC_EnableIRQ( TIM10_IRQn );
      break;
 8002e7c:	e01a      	b.n	8002eb4 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x1ac>

    case TIM_11:
      ptr           = (TIM_TypeDef*)TIM11_BASE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4a5a      	ldr	r2, [pc, #360]	; (8002fec <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2e4>)
 8002e82:	615a      	str	r2, [r3, #20]
      timerPtr_11    = this;
 8002e84:	4a5a      	ldr	r2, [pc, #360]	; (8002ff0 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2e8>)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
 8002e8a:	4b48      	ldr	r3, [pc, #288]	; (8002fac <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a4>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	4a47      	ldr	r2, [pc, #284]	; (8002fac <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a4>)
 8002e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e94:	6453      	str	r3, [r2, #68]	; 0x44
      //<! todo 
      // NVIC_EnableIRQ( TIM11_IRQn );
      break;
 8002e96:	e00d      	b.n	8002eb4 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x1ac>

    case TIM_14:
      ptr           = (TIM_TypeDef*)TIM14_BASE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4a56      	ldr	r2, [pc, #344]	; (8002ff4 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2ec>)
 8002e9c:	615a      	str	r2, [r3, #20]
      timerPtr_14    = this;
 8002e9e:	4a56      	ldr	r2, [pc, #344]	; (8002ff8 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2f0>)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 8002ea4:	4b41      	ldr	r3, [pc, #260]	; (8002fac <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a4>)
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	4a40      	ldr	r2, [pc, #256]	; (8002fac <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2a4>)
 8002eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eae:	6413      	str	r3, [r2, #64]	; 0x40
      //<! todo 
      // NVIC_EnableIRQ( TIM14_IRQn );
      break;
 8002eb0:	e000      	b.n	8002eb4 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x1ac>
      break;
 8002eb2:	bf00      	nop
  }

  // calculate tics and prescaler
  float rawTics = 2.0*system_PCLK_TIM * cycleTimeIn * 1E-6f;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	ee07 3a90 	vmov	s15, r3
 8002eba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002ebe:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8002f88 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x280>
 8002ec2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002ec6:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8002f90 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x288>
 8002eca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002ece:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ed2:	edc7 7a05 	vstr	s15, [r7, #20]
  DWORD ps      = 1;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	613b      	str	r3, [r7, #16]
  while( rawTics > 0xFFFF ) // tics must be < 16Bits
 8002eda:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ede:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002ffc <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x2f4>
 8002ee2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eea:	dd0e      	ble.n	8002f0a <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x202>
  {
    ps      *= 10;
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	613b      	str	r3, [r7, #16]
    rawTics /= 10;
 8002ef8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002efc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002f00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f04:	edc7 7a05 	vstr	s15, [r7, #20]
  while( rawTics > 0xFFFF ) // tics must be < 16Bits
 8002f08:	e7e7      	b.n	8002eda <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x1d2>
  }

  tics      = (DWORD)rawTics;
 8002f0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f12:	ee17 2a90 	vmov	r2, s15
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	60da      	str	r2, [r3, #12]
  cycleTime = (DWORD)(1E6 * tics * ps / (2.0*system_PCLK_TIM) );
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002f26:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8002f98 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x290>
 8002f2a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	ee07 3a90 	vmov	s15, r3
 8002f34:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002f38:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002f3c:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8002f88 <_ZN10cHwTimer_NC1ENS_7TimerIdEm+0x280>
 8002f40:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002f44:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002f48:	ee17 2a90 	vmov	r2, s15
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	605a      	str	r2, [r3, #4]

  ptr->DIER = TIM_DIER_UIE; // update interrupt enable
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	2201      	movs	r2, #1
 8002f56:	60da      	str	r2, [r3, #12]
  ptr->EGR  = TIM_EGR_UG;   // re-initialize timer
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	615a      	str	r2, [r3, #20]
  ptr->PSC  = ps - 1;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	3a01      	subs	r2, #1
 8002f68:	629a      	str	r2, [r3, #40]	; 0x28
  ptr->ARR  = tics;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	68d2      	ldr	r2, [r2, #12]
 8002f72:	62da      	str	r2, [r3, #44]	; 0x2c
  ptr->CR1  = TIM_CR1_CEN;  // counter enable
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
}
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	00000000 	.word	0x00000000
 8002f8c:	4197d784 	.word	0x4197d784
 8002f90:	a0000000 	.word	0xa0000000
 8002f94:	3eb0c6f7 	.word	0x3eb0c6f7
 8002f98:	00000000 	.word	0x00000000
 8002f9c:	412e8480 	.word	0x412e8480
 8002fa0:	08007648 	.word	0x08007648
 8002fa4:	40010000 	.word	0x40010000
 8002fa8:	200001c0 	.word	0x200001c0
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	200001c4 	.word	0x200001c4
 8002fb4:	40000400 	.word	0x40000400
 8002fb8:	200001c8 	.word	0x200001c8
 8002fbc:	40000800 	.word	0x40000800
 8002fc0:	200001cc 	.word	0x200001cc
 8002fc4:	40000c00 	.word	0x40000c00
 8002fc8:	200001d0 	.word	0x200001d0
 8002fcc:	40001400 	.word	0x40001400
 8002fd0:	200001d4 	.word	0x200001d4
 8002fd4:	40010400 	.word	0x40010400
 8002fd8:	200001d8 	.word	0x200001d8
 8002fdc:	40014000 	.word	0x40014000
 8002fe0:	200001dc 	.word	0x200001dc
 8002fe4:	40014400 	.word	0x40014400
 8002fe8:	200001e0 	.word	0x200001e0
 8002fec:	40014800 	.word	0x40014800
 8002ff0:	200001e4 	.word	0x200001e4
 8002ff4:	40002000 	.word	0x40002000
 8002ff8:	200001e8 	.word	0x200001e8
 8002ffc:	477fff00 	.word	0x477fff00

08003000 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE>:

//-------------------------------------------------------------------
void cHwTimer_N::enablePWM( BYTE channel, Mode polarity )
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	70fb      	strb	r3, [r7, #3]
 800300c:	4613      	mov	r3, r2
 800300e:	70bb      	strb	r3, [r7, #2]
  switch( timerId )
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	7c1b      	ldrb	r3, [r3, #16]
 8003014:	3b01      	subs	r3, #1
 8003016:	2b0a      	cmp	r3, #10
 8003018:	f200 8152 	bhi.w	80032c0 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2c0>
 800301c:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x24>)
 800301e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003022:	bf00      	nop
 8003024:	08003051 	.word	0x08003051
 8003028:	080030ab 	.word	0x080030ab
 800302c:	080030fb 	.word	0x080030fb
 8003030:	0800314b 	.word	0x0800314b
 8003034:	0800319b 	.word	0x0800319b
 8003038:	080032c1 	.word	0x080032c1
 800303c:	080031eb 	.word	0x080031eb
 8003040:	08003247 	.word	0x08003247
 8003044:	0800326d 	.word	0x0800326d
 8003048:	0800328d 	.word	0x0800328d
 800304c:	080032ad 	.word	0x080032ad
  {
    case TIM_1:
      switch( channel )
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d822      	bhi.n	800309c <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x9c>
 8003056:	a201      	add	r2, pc, #4	; (adr r2, 800305c <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x5c>)
 8003058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305c:	0800306d 	.word	0x0800306d
 8003060:	08003079 	.word	0x08003079
 8003064:	08003085 	.word	0x08003085
 8003068:	08003091 	.word	0x08003091
      {
        case 0: cHwPinConfig::set( cHwPinConfig::TIM1_CH1     ); break;
 800306c:	2100      	movs	r1, #0
 800306e:	f240 1037 	movw	r0, #311	; 0x137
 8003072:	f7fe ffc3 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 8003076:	e011      	b.n	800309c <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x9c>
        case 1: cHwPinConfig::set( cHwPinConfig::TIM1_CH2     ); break;
 8003078:	2100      	movs	r1, #0
 800307a:	f240 1039 	movw	r0, #313	; 0x139
 800307e:	f7fe ffbd 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 8003082:	e00b      	b.n	800309c <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x9c>
        case 2: cHwPinConfig::set( cHwPinConfig::TIM1_CH3     ); break;
 8003084:	2100      	movs	r1, #0
 8003086:	f240 103b 	movw	r0, #315	; 0x13b
 800308a:	f7fe ffb7 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 800308e:	e005      	b.n	800309c <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x9c>
        case 3: cHwPinConfig::set( cHwPinConfig::TIM1_CH4     ); break;
 8003090:	2100      	movs	r1, #0
 8003092:	f240 103d 	movw	r0, #317	; 0x13d
 8003096:	f7fe ffb1 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 800309a:	bf00      	nop
      }
      TIM1->BDTR |= (1<<15); // MOE Master Output Enable
 800309c:	4bb8      	ldr	r3, [pc, #736]	; (8003380 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x380>)
 800309e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a0:	4ab7      	ldr	r2, [pc, #732]	; (8003380 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x380>)
 80030a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030a6:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 80030a8:	e115      	b.n	80032d6 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2d6>

    case TIM_2:
      switch( channel )
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	f200 8109 	bhi.w	80032c4 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2c4>
 80030b2:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0xb8>)
 80030b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b8:	080030c9 	.word	0x080030c9
 80030bc:	080030d5 	.word	0x080030d5
 80030c0:	080030e1 	.word	0x080030e1
 80030c4:	080030ed 	.word	0x080030ed
      {
        case 0: cHwPinConfig::set( cHwPinConfig::TIM2_CH1     ); break;
 80030c8:	2100      	movs	r1, #0
 80030ca:	f44f 70a3 	mov.w	r0, #326	; 0x146
 80030ce:	f7fe ff95 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 80030d2:	e011      	b.n	80030f8 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0xf8>
        case 1: cHwPinConfig::set( cHwPinConfig::TIM2_CH2     ); break;
 80030d4:	2100      	movs	r1, #0
 80030d6:	f240 1047 	movw	r0, #327	; 0x147
 80030da:	f7fe ff8f 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 80030de:	e00b      	b.n	80030f8 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0xf8>
        case 2: cHwPinConfig::set( cHwPinConfig::TIM2_CH3     ); break;
 80030e0:	2100      	movs	r1, #0
 80030e2:	f44f 70a4 	mov.w	r0, #328	; 0x148
 80030e6:	f7fe ff89 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 80030ea:	e005      	b.n	80030f8 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0xf8>
        case 3: cHwPinConfig::set( cHwPinConfig::TIM2_CH4     ); break;
 80030ec:	2100      	movs	r1, #0
 80030ee:	f240 1049 	movw	r0, #329	; 0x149
 80030f2:	f7fe ff83 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 80030f6:	bf00      	nop
      }
      break;
 80030f8:	e0e4      	b.n	80032c4 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2c4>

    case TIM_3:
      switch( channel )
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	f200 80e3 	bhi.w	80032c8 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2c8>
 8003102:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x108>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	08003119 	.word	0x08003119
 800310c:	08003125 	.word	0x08003125
 8003110:	08003131 	.word	0x08003131
 8003114:	0800313d 	.word	0x0800313d
      {
        case 0: cHwPinConfig::set( cHwPinConfig::TIM3_CH1     ); break;
 8003118:	2100      	movs	r1, #0
 800311a:	f240 104b 	movw	r0, #331	; 0x14b
 800311e:	f7fe ff6d 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 8003122:	e011      	b.n	8003148 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x148>
        case 1: cHwPinConfig::set( cHwPinConfig::TIM3_CH2     ); break;
 8003124:	2100      	movs	r1, #0
 8003126:	f44f 70a6 	mov.w	r0, #332	; 0x14c
 800312a:	f7fe ff67 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 800312e:	e00b      	b.n	8003148 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x148>
        case 2: cHwPinConfig::set( cHwPinConfig::TIM3_CH3     ); break;
 8003130:	2100      	movs	r1, #0
 8003132:	f240 104d 	movw	r0, #333	; 0x14d
 8003136:	f7fe ff61 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 800313a:	e005      	b.n	8003148 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x148>
        case 3: cHwPinConfig::set( cHwPinConfig::TIM3_CH4     ); break;
 800313c:	2100      	movs	r1, #0
 800313e:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 8003142:	f7fe ff5b 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 8003146:	bf00      	nop
      }
      break;
 8003148:	e0be      	b.n	80032c8 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2c8>

    case TIM_4:
      switch( channel )
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	2b03      	cmp	r3, #3
 800314e:	f200 80bd 	bhi.w	80032cc <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2cc>
 8003152:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x158>)
 8003154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003158:	08003169 	.word	0x08003169
 800315c:	08003175 	.word	0x08003175
 8003160:	08003181 	.word	0x08003181
 8003164:	0800318d 	.word	0x0800318d
      {
        case 0: cHwPinConfig::set( cHwPinConfig::TIM4_CH1     ); break;
 8003168:	2100      	movs	r1, #0
 800316a:	f44f 70a8 	mov.w	r0, #336	; 0x150
 800316e:	f7fe ff45 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 8003172:	e011      	b.n	8003198 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x198>
        case 1: cHwPinConfig::set( cHwPinConfig::TIM4_CH2     ); break;
 8003174:	2100      	movs	r1, #0
 8003176:	f44f 70a9 	mov.w	r0, #338	; 0x152
 800317a:	f7fe ff3f 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 800317e:	e00b      	b.n	8003198 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x198>
        case 2: cHwPinConfig::set( cHwPinConfig::TIM4_CH3     ); break;
 8003180:	2100      	movs	r1, #0
 8003182:	f240 1053 	movw	r0, #339	; 0x153
 8003186:	f7fe ff39 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 800318a:	e005      	b.n	8003198 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x198>
        case 3: cHwPinConfig::set( cHwPinConfig::TIM4_CH4     ); break;
 800318c:	2100      	movs	r1, #0
 800318e:	f44f 70aa 	mov.w	r0, #340	; 0x154
 8003192:	f7fe ff33 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 8003196:	bf00      	nop
      }
      break;
 8003198:	e098      	b.n	80032cc <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2cc>

    case TIM_5:
      switch( channel )
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	2b03      	cmp	r3, #3
 800319e:	f200 8097 	bhi.w	80032d0 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2d0>
 80031a2:	a201      	add	r2, pc, #4	; (adr r2, 80031a8 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x1a8>)
 80031a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a8:	080031b9 	.word	0x080031b9
 80031ac:	080031c5 	.word	0x080031c5
 80031b0:	080031d1 	.word	0x080031d1
 80031b4:	080031dd 	.word	0x080031dd
      {
        case 0: cHwPinConfig::set( cHwPinConfig::TIM5_CH1     ); break;
 80031b8:	2100      	movs	r1, #0
 80031ba:	f44f 70ab 	mov.w	r0, #342	; 0x156
 80031be:	f7fe ff1d 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 80031c2:	e011      	b.n	80031e8 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x1e8>
        case 1: cHwPinConfig::set( cHwPinConfig::TIM5_CH2     ); break;
 80031c4:	2100      	movs	r1, #0
 80031c6:	f240 1057 	movw	r0, #343	; 0x157
 80031ca:	f7fe ff17 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 80031ce:	e00b      	b.n	80031e8 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x1e8>
        case 2: cHwPinConfig::set( cHwPinConfig::TIM5_CH3     ); break;
 80031d0:	2100      	movs	r1, #0
 80031d2:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80031d6:	f7fe ff11 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 80031da:	e005      	b.n	80031e8 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x1e8>
        case 3: cHwPinConfig::set( cHwPinConfig::TIM5_CH4     ); break;
 80031dc:	2100      	movs	r1, #0
 80031de:	f240 1059 	movw	r0, #345	; 0x159
 80031e2:	f7fe ff0b 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 80031e6:	bf00      	nop
      }
      break;
 80031e8:	e072      	b.n	80032d0 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2d0>
//        case 3: cHwPinConfig::set( cHwPinConfig::TIM5_CH4     ); break;
      }
      break;

    case TIM_8:
      switch( channel )
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d823      	bhi.n	8003238 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x238>
 80031f0:	a201      	add	r2, pc, #4	; (adr r2, 80031f8 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x1f8>)
 80031f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f6:	bf00      	nop
 80031f8:	08003209 	.word	0x08003209
 80031fc:	08003215 	.word	0x08003215
 8003200:	08003221 	.word	0x08003221
 8003204:	0800322d 	.word	0x0800322d
      {
        case 0: cHwPinConfig::set( cHwPinConfig::TIM8_CH1     ); break;
 8003208:	2100      	movs	r1, #0
 800320a:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 800320e:	f7fe fef5 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 8003212:	e011      	b.n	8003238 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x238>
        case 1: cHwPinConfig::set( cHwPinConfig::TIM8_CH2     ); break;
 8003214:	2100      	movs	r1, #0
 8003216:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800321a:	f7fe feef 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 800321e:	e00b      	b.n	8003238 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x238>
        case 2: cHwPinConfig::set( cHwPinConfig::TIM8_CH3     ); break;
 8003220:	2100      	movs	r1, #0
 8003222:	f44f 70b0 	mov.w	r0, #352	; 0x160
 8003226:	f7fe fee9 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 800322a:	e005      	b.n	8003238 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x238>
        case 3: cHwPinConfig::set( cHwPinConfig::TIM8_CH4     ); break;
 800322c:	2100      	movs	r1, #0
 800322e:	f44f 70b1 	mov.w	r0, #354	; 0x162
 8003232:	f7fe fee3 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 8003236:	bf00      	nop
      }
      TIM8->BDTR |= (1<<15); // MOE Master Output Enable
 8003238:	4b52      	ldr	r3, [pc, #328]	; (8003384 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x384>)
 800323a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323c:	4a51      	ldr	r2, [pc, #324]	; (8003384 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x384>)
 800323e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003242:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8003244:	e047      	b.n	80032d6 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2d6>

    case TIM_9:
      switch( channel )
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x252>
 800324c:	2b01      	cmp	r3, #1
 800324e:	d006      	beq.n	800325e <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x25e>
      {
        case 0: cHwPinConfig::set( cHwPinConfig::TIM9_CH1     ); break;
        case 1: cHwPinConfig::set( cHwPinConfig::TIM9_CH2     ); break;
      }
      break;
 8003250:	e041      	b.n	80032d6 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2d6>
        case 0: cHwPinConfig::set( cHwPinConfig::TIM9_CH1     ); break;
 8003252:	2100      	movs	r1, #0
 8003254:	f44f 70b2 	mov.w	r0, #356	; 0x164
 8003258:	f7fe fed0 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 800325c:	e005      	b.n	800326a <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x26a>
        case 1: cHwPinConfig::set( cHwPinConfig::TIM9_CH2     ); break;
 800325e:	2100      	movs	r1, #0
 8003260:	f240 1065 	movw	r0, #357	; 0x165
 8003264:	f7fe feca 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 8003268:	bf00      	nop
      break;
 800326a:	e034      	b.n	80032d6 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2d6>

    case TIM_10:
      switch( channel )
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d105      	bne.n	800327e <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x27e>
      {
        case 0: cHwPinConfig::set( cHwPinConfig::TIM10_CH1     ); break;
 8003272:	2100      	movs	r1, #0
 8003274:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8003278:	f7fe fec0 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 800327c:	bf00      	nop
      }
      TIM10->BDTR |= (1<<15); // MOE Master Output Enable
 800327e:	4b42      	ldr	r3, [pc, #264]	; (8003388 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x388>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	4a41      	ldr	r2, [pc, #260]	; (8003388 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x388>)
 8003284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003288:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 800328a:	e024      	b.n	80032d6 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2d6>

    case TIM_11:
      switch( channel )
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d105      	bne.n	800329e <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x29e>
      {
        case 0: cHwPinConfig::set( cHwPinConfig::TIM11_CH1     ); break;
 8003292:	2100      	movs	r1, #0
 8003294:	f240 1041 	movw	r0, #321	; 0x141
 8003298:	f7fe feb0 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 800329c:	bf00      	nop
      }
      TIM11->BDTR |= (1<<15); // MOE Master Output Enable
 800329e:	4b3b      	ldr	r3, [pc, #236]	; (800338c <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x38c>)
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	4a3a      	ldr	r2, [pc, #232]	; (800338c <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x38c>)
 80032a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032a8:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 80032aa:	e014      	b.n	80032d6 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2d6>

    case TIM_14:
      switch( channel )
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d110      	bne.n	80032d4 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2d4>
      {
        case 0: cHwPinConfig::set( cHwPinConfig::TIM14_CH1     ); break;
 80032b2:	2100      	movs	r1, #0
 80032b4:	f240 1045 	movw	r0, #325	; 0x145
 80032b8:	f7fe fea0 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
 80032bc:	bf00      	nop
      }
      break;
 80032be:	e009      	b.n	80032d4 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2d4>

    default:
      // no PWM support
      break;
 80032c0:	bf00      	nop
 80032c2:	e008      	b.n	80032d6 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2d6>
      break;
 80032c4:	bf00      	nop
 80032c6:	e006      	b.n	80032d6 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2d6>
      break;
 80032c8:	bf00      	nop
 80032ca:	e004      	b.n	80032d6 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2d6>
      break;
 80032cc:	bf00      	nop
 80032ce:	e002      	b.n	80032d6 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2d6>
      break;
 80032d0:	bf00      	nop
 80032d2:	e000      	b.n	80032d6 <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2d6>
      break;
 80032d4:	bf00      	nop
  }

  WORD ccmr =  (7<<4)  // OCxM: PWM-mode 2
 80032d6:	2378      	movs	r3, #120	; 0x78
 80032d8:	81bb      	strh	r3, [r7, #12]
              |(1<<3); // OCxPE: preload enable

  WORD ccer = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	81fb      	strh	r3, [r7, #14]
  if( polarity )
 80032de:	78bb      	ldrb	r3, [r7, #2]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2ea>
  {
   ccer =  (1<<2)  // CCxNE: enable
 80032e4:	230c      	movs	r3, #12
 80032e6:	81fb      	strh	r3, [r7, #14]
 80032e8:	e001      	b.n	80032ee <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2ee>
              |(1<<3); // CCxNP: polarity active low
  }
  else
  {
   ccer =  (1<<0)  // CCxE: enable
 80032ea:	2303      	movs	r3, #3
 80032ec:	81fb      	strh	r3, [r7, #14]
              |(1<<1); // CCxP: polarity active low
  }
  switch( channel )
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	2b03      	cmp	r3, #3
 80032f2:	d862      	bhi.n	80033ba <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x3ba>
 80032f4:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x2fc>)
 80032f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fa:	bf00      	nop
 80032fc:	0800330d 	.word	0x0800330d
 8003300:	0800332f 	.word	0x0800332f
 8003304:	08003359 	.word	0x08003359
 8003308:	08003391 	.word	0x08003391
  {
    case 0:
      ptr->CCMR1 |=  ccmr;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	6999      	ldr	r1, [r3, #24]
 8003312:	89ba      	ldrh	r2, [r7, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	430a      	orrs	r2, r1
 800331a:	619a      	str	r2, [r3, #24]
      ptr->CCER  |=  ccer;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	6a19      	ldr	r1, [r3, #32]
 8003322:	89fa      	ldrh	r2, [r7, #14]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	430a      	orrs	r2, r1
 800332a:	621a      	str	r2, [r3, #32]
      break;
 800332c:	e045      	b.n	80033ba <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x3ba>

    case 1:
      ptr->CCMR1 |=  ccmr<<8;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	699a      	ldr	r2, [r3, #24]
 8003334:	89bb      	ldrh	r3, [r7, #12]
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	4619      	mov	r1, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	430a      	orrs	r2, r1
 8003340:	619a      	str	r2, [r3, #24]
      ptr->CCER  |=  ccer<<4;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	6a1a      	ldr	r2, [r3, #32]
 8003348:	89fb      	ldrh	r3, [r7, #14]
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	4619      	mov	r1, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	430a      	orrs	r2, r1
 8003354:	621a      	str	r2, [r3, #32]
      break;
 8003356:	e030      	b.n	80033ba <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x3ba>

    case 2:
      ptr->CCMR2 |=  ccmr;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	69d9      	ldr	r1, [r3, #28]
 800335e:	89ba      	ldrh	r2, [r7, #12]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	430a      	orrs	r2, r1
 8003366:	61da      	str	r2, [r3, #28]
      ptr->CCER  |=  ccer<<8;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	6a1a      	ldr	r2, [r3, #32]
 800336e:	89fb      	ldrh	r3, [r7, #14]
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	4619      	mov	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	430a      	orrs	r2, r1
 800337a:	621a      	str	r2, [r3, #32]
      break;
 800337c:	e01d      	b.n	80033ba <_ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE+0x3ba>
 800337e:	bf00      	nop
 8003380:	40010000 	.word	0x40010000
 8003384:	40010400 	.word	0x40010400
 8003388:	40014400 	.word	0x40014400
 800338c:	40014800 	.word	0x40014800

    case 3:
      ptr->CCMR2 |=  ccmr<<8;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	69da      	ldr	r2, [r3, #28]
 8003396:	89bb      	ldrh	r3, [r7, #12]
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	4619      	mov	r1, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	61da      	str	r2, [r3, #28]
      ptr->CCER  |=  ccer<<12;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	6a1a      	ldr	r2, [r3, #32]
 80033aa:	89fb      	ldrh	r3, [r7, #14]
 80033ac:	031b      	lsls	r3, r3, #12
 80033ae:	4619      	mov	r1, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	621a      	str	r2, [r3, #32]
      break;
 80033b8:	bf00      	nop
  }
}
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop

080033c4 <_ZN10cHwTimer_N6setPWMEth>:

//-------------------------------------------------------------------
void cHwTimer_N::setPWM( WORD value, BYTE ch )
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	807b      	strh	r3, [r7, #2]
 80033d0:	4613      	mov	r3, r2
 80033d2:	707b      	strb	r3, [r7, #1]
  value = (WORD)((DWORD)value*tics >> 16);
 80033d4:	887b      	ldrh	r3, [r7, #2]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	68d2      	ldr	r2, [r2, #12]
 80033da:	fb02 f303 	mul.w	r3, r2, r3
 80033de:	0c1b      	lsrs	r3, r3, #16
 80033e0:	807b      	strh	r3, [r7, #2]

  switch( ch )
 80033e2:	787b      	ldrb	r3, [r7, #1]
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d81f      	bhi.n	8003428 <_ZN10cHwTimer_N6setPWMEth+0x64>
 80033e8:	a201      	add	r2, pc, #4	; (adr r2, 80033f0 <_ZN10cHwTimer_N6setPWMEth+0x2c>)
 80033ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ee:	bf00      	nop
 80033f0:	08003401 	.word	0x08003401
 80033f4:	0800340b 	.word	0x0800340b
 80033f8:	08003415 	.word	0x08003415
 80033fc:	0800341f 	.word	0x0800341f
  {
    case 0: ptr->CCR1  = value; break;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	887a      	ldrh	r2, [r7, #2]
 8003406:	635a      	str	r2, [r3, #52]	; 0x34
 8003408:	e00e      	b.n	8003428 <_ZN10cHwTimer_N6setPWMEth+0x64>
    case 1: ptr->CCR2  = value; break;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	887a      	ldrh	r2, [r7, #2]
 8003410:	639a      	str	r2, [r3, #56]	; 0x38
 8003412:	e009      	b.n	8003428 <_ZN10cHwTimer_N6setPWMEth+0x64>
    case 2: ptr->CCR3  = value; break;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	887a      	ldrh	r2, [r7, #2]
 800341a:	63da      	str	r2, [r3, #60]	; 0x3c
 800341c:	e004      	b.n	8003428 <_ZN10cHwTimer_N6setPWMEth+0x64>
    case 3: ptr->CCR4  = value; break;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	887a      	ldrh	r2, [r7, #2]
 8003424:	641a      	str	r2, [r3, #64]	; 0x40
 8003426:	bf00      	nop
  }
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <_ZN10cHwTimer_N5isr_NEv>:

//-------------------------------------------------------------------
void cHwTimer_N::isr_N(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  ptr->SR = 0;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	2200      	movs	r2, #0
 8003442:	611a      	str	r2, [r3, #16]
  isrHandler();
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	3310      	adds	r3, #16
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4610      	mov	r0, r2
 8003450:	4798      	blx	r3
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <TIM3_IRQHandler>:
//}

//-------------------------------------------------------------------
extern "C" {
  void TIM3_IRQHandler(void)
  {
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
    cHwTimer_N::timerPtr_3->isr_N();
 8003460:	4b03      	ldr	r3, [pc, #12]	; (8003470 <TIM3_IRQHandler+0x14>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff ffe5 	bl	8003434 <_ZN10cHwTimer_N5isr_NEv>
  }
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	200001c8 	.word	0x200001c8

08003474 <TIM4_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM4_IRQHandler(void)
  {
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
    cHwTimer_N::timerPtr_4->isr_N();
 8003478:	4b03      	ldr	r3, [pc, #12]	; (8003488 <TIM4_IRQHandler+0x14>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff ffd9 	bl	8003434 <_ZN10cHwTimer_N5isr_NEv>
  }
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	200001cc 	.word	0x200001cc

0800348c <TIM5_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM5_IRQHandler(void)
  {
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
    cHwTimer_N::timerPtr_5->isr_N();
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <TIM5_IRQHandler+0x14>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff ffcd 	bl	8003434 <_ZN10cHwTimer_N5isr_NEv>
  }
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	200001d0 	.word	0x200001d0

080034a4 <TIM7_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM7_IRQHandler(void)
  {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
    cHwTimer_N::timerPtr_7->isr_N();
 80034a8:	4b03      	ldr	r3, [pc, #12]	; (80034b8 <TIM7_IRQHandler+0x14>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ffc1 	bl	8003434 <_ZN10cHwTimer_N5isr_NEv>
  }
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	200001d4 	.word	0x200001d4

080034bc <TIM8_CC_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM8_CC_IRQHandler(void)
  {
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
    cHwTimer_N::timerPtr_8->isr_N();
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <TIM8_CC_IRQHandler+0x14>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff ffb5 	bl	8003434 <_ZN10cHwTimer_N5isr_NEv>
  }
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	200001d8 	.word	0x200001d8

080034d4 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh>:
cHwUART_N *cHwUART_N::uartPtr_4 = 0;
cHwUART_N *cHwUART_N::uartPtr_5 = 0;
cHwUART_N *cHwUART_N::uartPtr_6 = 0;

//-------------------------------------------------------------------
cHwUART_N::cHwUART_N( USART_Id id,
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	607a      	str	r2, [r7, #4]
 80034de:	461a      	mov	r2, r3
 80034e0:	460b      	mov	r3, r1
 80034e2:	72fb      	strb	r3, [r7, #11]
 80034e4:	4613      	mov	r3, r2
 80034e6:	72bb      	strb	r3, [r7, #10]
                      DWORD    mode,
                      BYTE     sizeRxBuf,
                      BYTE     sizeTxBuf )

: cHwUART( sizeRxBuf, sizeTxBuf )
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f897 2020 	ldrb.w	r2, [r7, #32]
 80034ee:	7ab9      	ldrb	r1, [r7, #10]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f001 fddf 	bl	80050b4 <_ZN7cHwUARTC1Ehh>
 80034f6:	4aa9      	ldr	r2, [pc, #676]	; (800379c <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2c8>)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	601a      	str	r2, [r3, #0]

{
  switch( id )
 80034fc:	7afb      	ldrb	r3, [r7, #11]
 80034fe:	3b01      	subs	r3, #1
 8003500:	2b05      	cmp	r3, #5
 8003502:	f200 80f3 	bhi.w	80036ec <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x218>
 8003506:	a201      	add	r2, pc, #4	; (adr r2, 800350c <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x38>)
 8003508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350c:	08003525 	.word	0x08003525
 8003510:	0800357d 	.word	0x0800357d
 8003514:	080035d5 	.word	0x080035d5
 8003518:	0800362d 	.word	0x0800362d
 800351c:	08003661 	.word	0x08003661
 8003520:	08003695 	.word	0x08003695
    default:
      //error!
      break;
    
    case USART_1:
      ptr           = (USART_TypeDef*)USART1_BASE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4a9e      	ldr	r2, [pc, #632]	; (80037a0 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2cc>)
 8003528:	619a      	str	r2, [r3, #24]
      uartPtr_1     = this;
 800352a:	4a9e      	ldr	r2, [pc, #632]	; (80037a4 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2d0>)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_USART1EN;  // enable USART3
 8003530:	4b9d      	ldr	r3, [pc, #628]	; (80037a8 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2d4>)
 8003532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003534:	4a9c      	ldr	r2, [pc, #624]	; (80037a8 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2d4>)
 8003536:	f043 0310 	orr.w	r3, r3, #16
 800353a:	6453      	str	r3, [r2, #68]	; 0x44
      cHwPinConfig::set( cHwPinConfig::USART1_RX );
 800353c:	2100      	movs	r1, #0
 800353e:	f240 107f 	movw	r0, #383	; 0x17f
 8003542:	f7fe fd5b 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set( cHwPinConfig::USART1_TX );
 8003546:	2100      	movs	r1, #0
 8003548:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800354c:	f7fe fd56 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      if( mode & RTS )
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	da04      	bge.n	8003560 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x8c>
      {
        cHwPinConfig::set( cHwPinConfig::USART1_RTS );
 8003556:	2100      	movs	r1, #0
 8003558:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 800355c:	f7fe fd4e 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      }
      if( mode & CTS )
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d004      	beq.n	8003574 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0xa0>
      {
        cHwPinConfig::set( cHwPinConfig::USART1_CTS );
 800356a:	2100      	movs	r1, #0
 800356c:	f240 107d 	movw	r0, #381	; 0x17d
 8003570:	f7fe fd44 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      }
      NVIC_EnableIRQ( USART1_IRQn );
 8003574:	2025      	movs	r0, #37	; 0x25
 8003576:	f7fe f90d 	bl	8001794 <__NVIC_EnableIRQ>
      break;
 800357a:	e0b8      	b.n	80036ee <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x21a>

  case USART_2:
      ptr           = (USART_TypeDef*)USART2_BASE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4a8b      	ldr	r2, [pc, #556]	; (80037ac <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2d8>)
 8003580:	619a      	str	r2, [r3, #24]
      uartPtr_2     = this;
 8003582:	4a8b      	ldr	r2, [pc, #556]	; (80037b0 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2dc>)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_USART2EN;  // enable USART3
 8003588:	4b87      	ldr	r3, [pc, #540]	; (80037a8 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2d4>)
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	4a86      	ldr	r2, [pc, #536]	; (80037a8 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2d4>)
 800358e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003592:	6413      	str	r3, [r2, #64]	; 0x40
      cHwPinConfig::set( cHwPinConfig::USART2_RX );
 8003594:	2100      	movs	r1, #0
 8003596:	f44f 70c2 	mov.w	r0, #388	; 0x184
 800359a:	f7fe fd2f 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set( cHwPinConfig::USART2_TX );
 800359e:	2100      	movs	r1, #0
 80035a0:	f240 1085 	movw	r0, #389	; 0x185
 80035a4:	f7fe fd2a 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      if( mode & RTS )
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	da04      	bge.n	80035b8 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0xe4>
      {
        cHwPinConfig::set( cHwPinConfig::USART2_RTS );
 80035ae:	2100      	movs	r1, #0
 80035b0:	f240 1083 	movw	r0, #387	; 0x183
 80035b4:	f7fe fd22 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      }
      if( mode & CTS )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d004      	beq.n	80035cc <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0xf8>
      {
        cHwPinConfig::set( cHwPinConfig::USART2_CTS );
 80035c2:	2100      	movs	r1, #0
 80035c4:	f44f 70c1 	mov.w	r0, #386	; 0x182
 80035c8:	f7fe fd18 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      }
      NVIC_EnableIRQ( USART2_IRQn );
 80035cc:	2026      	movs	r0, #38	; 0x26
 80035ce:	f7fe f8e1 	bl	8001794 <__NVIC_EnableIRQ>
      break;
 80035d2:	e08c      	b.n	80036ee <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x21a>

    case USART_3:
      ptr           = (USART_TypeDef*)USART3_BASE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4a77      	ldr	r2, [pc, #476]	; (80037b4 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2e0>)
 80035d8:	619a      	str	r2, [r3, #24]
      uartPtr_3     = this;
 80035da:	4a77      	ldr	r2, [pc, #476]	; (80037b8 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2e4>)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_USART3EN;  // enable USART3
 80035e0:	4b71      	ldr	r3, [pc, #452]	; (80037a8 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2d4>)
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	4a70      	ldr	r2, [pc, #448]	; (80037a8 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2d4>)
 80035e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035ea:	6413      	str	r3, [r2, #64]	; 0x40
      cHwPinConfig::set( cHwPinConfig::USART3_RX );
 80035ec:	2100      	movs	r1, #0
 80035ee:	f240 1089 	movw	r0, #393	; 0x189
 80035f2:	f7fe fd03 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set( cHwPinConfig::USART3_TX );
 80035f6:	2100      	movs	r1, #0
 80035f8:	f44f 70c5 	mov.w	r0, #394	; 0x18a
 80035fc:	f7fe fcfe 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      if( mode & RTS )
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	da04      	bge.n	8003610 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x13c>
      {
        cHwPinConfig::set( cHwPinConfig::USART3_RTS );
 8003606:	2100      	movs	r1, #0
 8003608:	f44f 70c4 	mov.w	r0, #392	; 0x188
 800360c:	f7fe fcf6 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      }
      if( mode & CTS )
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d004      	beq.n	8003624 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x150>
      {
        cHwPinConfig::set( cHwPinConfig::USART3_CTS );
 800361a:	2100      	movs	r1, #0
 800361c:	f240 1087 	movw	r0, #391	; 0x187
 8003620:	f7fe fcec 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      }
      NVIC_EnableIRQ( USART3_IRQn );
 8003624:	2027      	movs	r0, #39	; 0x27
 8003626:	f7fe f8b5 	bl	8001794 <__NVIC_EnableIRQ>
      break;
 800362a:	e060      	b.n	80036ee <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x21a>

    case UART_4:
      ptr           = (USART_TypeDef*)UART4_BASE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4a63      	ldr	r2, [pc, #396]	; (80037bc <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2e8>)
 8003630:	619a      	str	r2, [r3, #24]
      uartPtr_4     = this;
 8003632:	4a63      	ldr	r2, [pc, #396]	; (80037c0 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2ec>)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_UART4EN;  // enable USART3
 8003638:	4b5b      	ldr	r3, [pc, #364]	; (80037a8 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2d4>)
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	4a5a      	ldr	r2, [pc, #360]	; (80037a8 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2d4>)
 800363e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003642:	6413      	str	r3, [r2, #64]	; 0x40
      cHwPinConfig::set( cHwPinConfig::UART4_RX );
 8003644:	2100      	movs	r1, #0
 8003646:	f44f 70b7 	mov.w	r0, #366	; 0x16e
 800364a:	f7fe fcd7 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set( cHwPinConfig::UART4_TX );
 800364e:	2100      	movs	r1, #0
 8003650:	f240 106f 	movw	r0, #367	; 0x16f
 8003654:	f7fe fcd2 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      }
      if( mode & CTS )
      {
        //cHwPinConfig::set( cHwPinConfig::UART4_CTS );
      }
      NVIC_EnableIRQ( UART4_IRQn );
 8003658:	2034      	movs	r0, #52	; 0x34
 800365a:	f7fe f89b 	bl	8001794 <__NVIC_EnableIRQ>
      break;
 800365e:	e046      	b.n	80036ee <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x21a>

    case UART_5:
      ptr           = (USART_TypeDef*)UART5_BASE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4a58      	ldr	r2, [pc, #352]	; (80037c4 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2f0>)
 8003664:	619a      	str	r2, [r3, #24]
      uartPtr_5     = this;
 8003666:	4a58      	ldr	r2, [pc, #352]	; (80037c8 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2f4>)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_UART5EN;  // enable USART3
 800366c:	4b4e      	ldr	r3, [pc, #312]	; (80037a8 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2d4>)
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	4a4d      	ldr	r2, [pc, #308]	; (80037a8 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2d4>)
 8003672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003676:	6413      	str	r3, [r2, #64]	; 0x40
      cHwPinConfig::set( cHwPinConfig::UART5_RX );
 8003678:	2100      	movs	r1, #0
 800367a:	f44f 70b9 	mov.w	r0, #370	; 0x172
 800367e:	f7fe fcbd 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set( cHwPinConfig::UART5_TX );
 8003682:	2100      	movs	r1, #0
 8003684:	f240 1073 	movw	r0, #371	; 0x173
 8003688:	f7fe fcb8 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      }
      if( mode & CTS )
      {
        //cHwPinConfig::set( cHwPinConfig::UART5_CTS );
      }
      NVIC_EnableIRQ( UART5_IRQn );
 800368c:	2035      	movs	r0, #53	; 0x35
 800368e:	f7fe f881 	bl	8001794 <__NVIC_EnableIRQ>
      break;
 8003692:	e02c      	b.n	80036ee <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x21a>

    case USART_6:
      ptr           = (USART_TypeDef*)USART6_BASE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4a4d      	ldr	r2, [pc, #308]	; (80037cc <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2f8>)
 8003698:	619a      	str	r2, [r3, #24]
      uartPtr_6     = this;
 800369a:	4a4d      	ldr	r2, [pc, #308]	; (80037d0 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2fc>)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_USART6EN;  // enable USART6
 80036a0:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2d4>)
 80036a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a4:	4a40      	ldr	r2, [pc, #256]	; (80037a8 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2d4>)
 80036a6:	f043 0320 	orr.w	r3, r3, #32
 80036aa:	6453      	str	r3, [r2, #68]	; 0x44
      cHwPinConfig::set( cHwPinConfig::USART6_RX );
 80036ac:	2100      	movs	r1, #0
 80036ae:	f44f 70c7 	mov.w	r0, #398	; 0x18e
 80036b2:	f7fe fca3 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set( cHwPinConfig::USART6_TX );
 80036b6:	2100      	movs	r1, #0
 80036b8:	f240 108f 	movw	r0, #399	; 0x18f
 80036bc:	f7fe fc9e 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      if( mode & RTS )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	da04      	bge.n	80036d0 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x1fc>
      {
        cHwPinConfig::set( cHwPinConfig::USART6_RTS );
 80036c6:	2100      	movs	r1, #0
 80036c8:	f240 108d 	movw	r0, #397	; 0x18d
 80036cc:	f7fe fc96 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      }
      if( mode & CTS )
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d004      	beq.n	80036e4 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x210>
      {
        cHwPinConfig::set( cHwPinConfig::USART6_CTS );
 80036da:	2100      	movs	r1, #0
 80036dc:	f44f 70c6 	mov.w	r0, #396	; 0x18c
 80036e0:	f7fe fc8c 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      }

      NVIC_EnableIRQ( USART6_IRQn );
 80036e4:	2047      	movs	r0, #71	; 0x47
 80036e6:	f7fe f855 	bl	8001794 <__NVIC_EnableIRQ>
      break;
 80036ea:	e000      	b.n	80036ee <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x21a>
      break;
 80036ec:	bf00      	nop
  }

  DWORD baudRate;

  switch( mode & 0xFFFF )
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	3b01      	subs	r3, #1
 80036f4:	2b07      	cmp	r3, #7
 80036f6:	d813      	bhi.n	8003720 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x24c>
 80036f8:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x22c>)
 80036fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fe:	bf00      	nop
 8003700:	08003729 	.word	0x08003729
 8003704:	08003731 	.word	0x08003731
 8003708:	08003739 	.word	0x08003739
 800370c:	08003741 	.word	0x08003741
 8003710:	08003749 	.word	0x08003749
 8003714:	08003751 	.word	0x08003751
 8003718:	08003759 	.word	0x08003759
 800371c:	08003761 	.word	0x08003761
  {
    default:
    case BR_2400:   baudRate =   2400; break;
 8003720:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	e01f      	b.n	8003768 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x294>
    case BR_4800:   baudRate =   4800; break;
 8003728:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	e01b      	b.n	8003768 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x294>
    case BR_9600:   baudRate =   9600; break;
 8003730:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	e017      	b.n	8003768 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x294>
    case BR_19200:  baudRate =  19200; break;
 8003738:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	e013      	b.n	8003768 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x294>
    case BR_38400:  baudRate =  38400; break;
 8003740:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	e00f      	b.n	8003768 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x294>
    case BR_57600:  baudRate =  57600; break;
 8003748:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800374c:	617b      	str	r3, [r7, #20]
 800374e:	e00b      	b.n	8003768 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x294>
    case BR_115200: baudRate = 115200; break;
 8003750:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	e007      	b.n	8003768 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x294>
    case BR_230400: baudRate = 230400; break;
 8003758:	f44f 3361 	mov.w	r3, #230400	; 0x38400
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	e003      	b.n	8003768 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x294>
    case BR_460800: baudRate = 460800; break;
 8003760:	f44f 23e1 	mov.w	r3, #460800	; 0x70800
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	bf00      	nop
  }

  ptr->CR2 |=  ((MTYPE)0<<12); // 0: 1 stop bit
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	699a      	ldr	r2, [r3, #24]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	6852      	ldr	r2, [r2, #4]
 8003772:	605a      	str	r2, [r3, #4]

  ptr->CR1 |=  (        ((mode&(EVEN|ODD))?USART_CR1_M  :0)  // 8+paritry = 9 Bit
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2b6>
 8003784:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
 8003788:	e000      	b.n	800378c <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x2b8>
 800378a:	2100      	movs	r1, #0
                     |  ((mode&(EVEN|ODD))?USART_CR1_PCE:0)  //  parity
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d01e      	beq.n	80037d4 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x300>
 8003796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800379a:	e01c      	b.n	80037d6 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x302>
 800379c:	080075e0 	.word	0x080075e0
 80037a0:	40011000 	.word	0x40011000
 80037a4:	200001ec 	.word	0x200001ec
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40004400 	.word	0x40004400
 80037b0:	200001f0 	.word	0x200001f0
 80037b4:	40004800 	.word	0x40004800
 80037b8:	200001f4 	.word	0x200001f4
 80037bc:	40004c00 	.word	0x40004c00
 80037c0:	200001f8 	.word	0x200001f8
 80037c4:	40005000 	.word	0x40005000
 80037c8:	200001fc 	.word	0x200001fc
 80037cc:	40011400 	.word	0x40011400
 80037d0:	20000200 	.word	0x20000200
 80037d4:	2300      	movs	r3, #0
 80037d6:	4319      	orrs	r1, r3
                     |  ((mode&      ODD )?USART_CR1_PS :0)  // 0: even
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	0cdb      	lsrs	r3, r3, #19
 80037dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e0:	430b      	orrs	r3, r1
  ptr->CR1 |=  (        ((mode&(EVEN|ODD))?USART_CR1_M  :0)  // 8+paritry = 9 Bit
 80037e2:	431a      	orrs	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	f042 020c 	orr.w	r2, r2, #12
 80037ec:	601a      	str	r2, [r3, #0]
                     |  USART_CR1_RE   // RX mode
                     |  USART_CR1_TE );// TX mode

  ptr->CR3 |=  (  ((mode&RTS)?USART_CR3_RTSE:0)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	6899      	ldr	r1, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	15db      	asrs	r3, r3, #23
 80037f8:	f403 7280 	and.w	r2, r3, #256	; 0x100
                | ((mode&CTS)?USART_CR3_CTSE:0) ); // no hardware flow control
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	0d5b      	lsrs	r3, r3, #21
 8003800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003804:	431a      	orrs	r2, r3
  ptr->CR3 |=  (  ((mode&RTS)?USART_CR3_RTSE:0)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	430a      	orrs	r2, r1
 800380c:	609a      	str	r2, [r3, #8]
  //
  //            fck                         fck
  //   div = ---------  =>  BRR = 16*div = ------
  //         16 x baud                      baud
  //
  ptr->BRR  = (WORD)(system_PCLK_UART / baudRate);
 800380e:	4a0a      	ldr	r2, [pc, #40]	; (8003838 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh+0x364>)
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	fbb2 f3f3 	udiv	r3, r2, r3
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	60da      	str	r2, [r3, #12]

  ptr->CR1 |= (  USART_CR1_UE       // Enable USART
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	f042 0261 	orr.w	r2, r2, #97	; 0x61
 800382c:	601a      	str	r2, [r3, #0]
               | USART_CR1_TCIE     // Transm. complete interr. enable
               | USART_CR1_RXNEIE );// Receive reg. not empty interr. enable
}
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	02faf080 	.word	0x02faf080

0800383c <_ZN9cHwUART_N7getByteEv>:

//-------------------------------------------------------------------
inline BYTE cHwUART_N::getByte( void )
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  return( ptr->RDR );
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	b2db      	uxtb	r3, r3
}
 800384c:	4618      	mov	r0, r3
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <_ZN9cHwUART_N7setByteEh>:

//-------------------------------------------------------------------
inline void cHwUART_N::setByte( BYTE c )
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	70fb      	strb	r3, [r7, #3]
  ptr->TDR = c;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	78fa      	ldrb	r2, [r7, #3]
 800386a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <_ZN9cHwUART_N3isrEv>:

//-------------------------------------------------------------------
void cHwUART_N::isr( void )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  if( ptr->ISR & USART_ISR_TC ) // transmission complete?
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	bf14      	ite	ne
 800388e:	2301      	movne	r3, #1
 8003890:	2300      	moveq	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00e      	beq.n	80038b6 <_ZN9cHwUART_N3isrEv+0x3e>
  {
    ptr->ICR |= USART_ICR_TCCF;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	6a1a      	ldr	r2, [r3, #32]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038a6:	621a      	str	r2, [r3, #32]
    isrTx();
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	331c      	adds	r3, #28
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4610      	mov	r0, r2
 80038b4:	4798      	blx	r3
  }
  if( ptr->ISR & USART_ISR_RXNE ) // receive data register not empty
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	bf14      	ite	ne
 80038c4:	2301      	movne	r3, #1
 80038c6:	2300      	moveq	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d006      	beq.n	80038dc <_ZN9cHwUART_N3isrEv+0x64>
  {
    isrRx();
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3318      	adds	r3, #24
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4610      	mov	r0, r2
 80038da:	4798      	blx	r3
  }
}
 80038dc:	bf00      	nop
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <USART1_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void USART1_IRQHandler(void)
  {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
    cHwUART_N::uartPtr_1->isr();
 80038e8:	4b03      	ldr	r3, [pc, #12]	; (80038f8 <USART1_IRQHandler+0x14>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ffc3 	bl	8003878 <_ZN9cHwUART_N3isrEv>
  }
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	200001ec 	.word	0x200001ec

080038fc <USART2_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void USART2_IRQHandler(void)
  {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
    cHwUART_N::uartPtr_2->isr();
 8003900:	4b03      	ldr	r3, [pc, #12]	; (8003910 <USART2_IRQHandler+0x14>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff ffb7 	bl	8003878 <_ZN9cHwUART_N3isrEv>
  }
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	200001f0 	.word	0x200001f0

08003914 <USART3_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void USART3_IRQHandler(void)
  {
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
    cHwUART_N::uartPtr_3->isr();
 8003918:	4b03      	ldr	r3, [pc, #12]	; (8003928 <USART3_IRQHandler+0x14>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff ffab 	bl	8003878 <_ZN9cHwUART_N3isrEv>
  }
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	200001f4 	.word	0x200001f4

0800392c <UART4_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void UART4_IRQHandler(void)
  {
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
    cHwUART_N::uartPtr_4->isr();
 8003930:	4b03      	ldr	r3, [pc, #12]	; (8003940 <UART4_IRQHandler+0x14>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff ff9f 	bl	8003878 <_ZN9cHwUART_N3isrEv>
  }
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	200001f8 	.word	0x200001f8

08003944 <UART5_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void UART5_IRQHandler(void)
  {
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
    cHwUART_N::uartPtr_5->isr();
 8003948:	4b03      	ldr	r3, [pc, #12]	; (8003958 <UART5_IRQHandler+0x14>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff ff93 	bl	8003878 <_ZN9cHwUART_N3isrEv>
  }
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	200001fc 	.word	0x200001fc

0800395c <USART6_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void USART6_IRQHandler(void)
  {
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
    cHwUART_N::uartPtr_6->isr();
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <USART6_IRQHandler+0x14>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff ff87 	bl	8003878 <_ZN9cHwUART_N3isrEv>
  }
 800396a:	bf00      	nop
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000200 	.word	0x20000200

08003974 <_ZN8cHwUSB_010EndpointIN6configEth>:
  fifo = (__IO DWORD                 *)((DWORD)USB_OTG_FS + USB_OTG_FIFO_BASE         + (num)*USB_OTG_FIFO_SIZE   );
}

//-------------------------------------------------------------------
void cHwUSB_0::EndpointIN::config( WORD epMPS, BYTE epType )
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	807b      	strh	r3, [r7, #2]
 8003980:	4613      	mov	r3, r2
 8003982:	707b      	strb	r3, [r7, #1]
  txBuf.maxpacket = epMPS;
 8003984:	887b      	ldrh	r3, [r7, #2]
 8003986:	b2da      	uxtb	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  
  if( num == 0 )
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <_ZN8cHwUSB_010EndpointIN6configEth+0x26>
  {
    epMPS = 0; // MPS has to be 64 for endpoint 0 
 8003996:	2300      	movs	r3, #0
 8003998:	807b      	strh	r3, [r7, #2]
  }
  USB_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (num)));
 800399a:	4b1a      	ldr	r3, [pc, #104]	; (8003a04 <_ZN8cHwUSB_010EndpointIN6configEth+0x90>)
 800399c:	69da      	ldr	r2, [r3, #28]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	4619      	mov	r1, r3
 80039a4:	2301      	movs	r3, #1
 80039a6:	408b      	lsls	r3, r1
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	4916      	ldr	r1, [pc, #88]	; (8003a04 <_ZN8cHwUSB_010EndpointIN6configEth+0x90>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61cb      	str	r3, [r1, #28]

  if( !(inep->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) )
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	bf0c      	ite	eq
 80039c0:	2301      	moveq	r3, #1
 80039c2:	2300      	movne	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d015      	beq.n	80039f6 <_ZN8cHwUSB_010EndpointIN6configEth+0x82>
  {
    inep->DIEPCTL |= (  (epMPS & USB_OTG_DIEPCTL_MPSIZ ) 
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	887b      	ldrh	r3, [r7, #2]
 80039d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                      | (epType << 18 ) 
 80039d8:	7879      	ldrb	r1, [r7, #1]
 80039da:	0489      	lsls	r1, r1, #18
 80039dc:	430b      	orrs	r3, r1
                      | (num    << 22 ) 
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	7809      	ldrb	r1, [r1, #0]
 80039e2:	0589      	lsls	r1, r1, #22
 80039e4:	430b      	orrs	r3, r1
    inep->DIEPCTL |= (  (epMPS & USB_OTG_DIEPCTL_MPSIZ ) 
 80039e6:	ea42 0103 	orr.w	r1, r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <_ZN8cHwUSB_010EndpointIN6configEth+0x94>)
 80039f2:	430b      	orrs	r3, r1
 80039f4:	6013      	str	r3, [r2, #0]
                      | USB_OTG_DIEPCTL_SD0PID_SEVNFRM 
                      | USB_OTG_DIEPCTL_USBAEP ); 
  } 
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	50000800 	.word	0x50000800
 8003a08:	10008000 	.word	0x10008000

08003a0c <_ZN8cHwUSB_010EndpointIN11writeToFifoEv>:
  return( len );
}

//-------------------------------------------------------------------
void cHwUSB_0::EndpointIN::writeToFifo( void )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  WORD len = MIN( txBuf.size, txBuf.maxpacket );
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8003a20:	4619      	mov	r1, r3
 8003a22:	4610      	mov	r0, r2
 8003a24:	f002 f95f 	bl	8005ce6 <_Z3MINIhET_S0_S0_>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	823b      	strh	r3, [r7, #16]
  WORD cnt = (len + 3) / 4;
 8003a2c:	8a3b      	ldrh	r3, [r7, #16]
 8003a2e:	3303      	adds	r3, #3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	da00      	bge.n	8003a36 <_ZN8cHwUSB_010EndpointIN11writeToFifoEv+0x2a>
 8003a34:	3303      	adds	r3, #3
 8003a36:	109b      	asrs	r3, r3, #2
 8003a38:	81fb      	strh	r3, [r7, #14]
 
  if( (inep->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= cnt )
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	89fb      	ldrh	r3, [r7, #14]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	bf2c      	ite	cs
 8003a4a:	2301      	movcs	r3, #1
 8003a4c:	2300      	movcc	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01d      	beq.n	8003a90 <_ZN8cHwUSB_010EndpointIN11writeToFifoEv+0x84>
  {
    __packed DWORD *src = (__packed DWORD *)&txBuf.data[0];
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3301      	adds	r3, #1
 8003a58:	617b      	str	r3, [r7, #20]
    
    txBuf.size = 0;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    txBuf.flag = false;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    
    for( WORD i = 0; i < cnt; i++, src ++)
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	827b      	strh	r3, [r7, #18]
 8003a6e:	8a7a      	ldrh	r2, [r7, #18]
 8003a70:	89fb      	ldrh	r3, [r7, #14]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d20c      	bcs.n	8003a90 <_ZN8cHwUSB_010EndpointIN11writeToFifoEv+0x84>
    {      
      *fifo = *src;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	601a      	str	r2, [r3, #0]
    for( WORD i = 0; i < cnt; i++, src ++)
 8003a82:	8a7b      	ldrh	r3, [r7, #18]
 8003a84:	3301      	adds	r3, #1
 8003a86:	827b      	strh	r3, [r7, #18]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	e7ee      	b.n	8003a6e <_ZN8cHwUSB_010EndpointIN11writeToFifoEv+0x62>
    }
  }
  
  if( len <= 0 )
 8003a90:	8a3b      	ldrh	r3, [r7, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10b      	bne.n	8003aae <_ZN8cHwUSB_010EndpointIN11writeToFifoEv+0xa2>
  {
    USB_DEVICE->DIEPEMPMSK &= ~(0x1 << num);
 8003a96:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <_ZN8cHwUSB_010EndpointIN11writeToFifoEv+0xac>)
 8003a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	7812      	ldrb	r2, [r2, #0]
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	408a      	lsls	r2, r1
 8003aa4:	43d2      	mvns	r2, r2
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4a03      	ldr	r2, [pc, #12]	; (8003ab8 <_ZN8cHwUSB_010EndpointIN11writeToFifoEv+0xac>)
 8003aaa:	400b      	ands	r3, r1
 8003aac:	6353      	str	r3, [r2, #52]	; 0x34
  }    
}
 8003aae:	bf00      	nop
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	50000800 	.word	0x50000800

08003abc <_ZN8cHwUSB_010EndpointIN8transmitEb>:

//-------------------------------------------------------------------
void cHwUSB_0::EndpointIN::transmit( bool flag )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	70fb      	strb	r3, [r7, #3]
  WORD mps  = txBuf.maxpacket;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8003ace:	81fb      	strh	r3, [r7, #14]
  WORD len  = MIN( txBuf.size, txBuf.maxpacket );
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8003adc:	4619      	mov	r1, r3
 8003ade:	4610      	mov	r0, r2
 8003ae0:	f002 f901 	bl	8005ce6 <_Z3MINIhET_S0_S0_>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	81bb      	strh	r3, [r7, #12]

  if( !txBuf.flag )
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d103      	bne.n	8003afa <_ZN8cHwUSB_010EndpointIN8transmitEb+0x3e>
  {
    transmitZLP();
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f84a 	bl	8003b8c <_ZN8cHwUSB_010EndpointIN11transmitZLPEv>
    return;
 8003af8:	e040      	b.n	8003b7c <_ZN8cHwUSB_010EndpointIN8transmitEb+0xc0>
  }

  if( len == 0 ) // Zero Length Packet?
 8003afa:	89bb      	ldrh	r3, [r7, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d106      	bne.n	8003b0e <_ZN8cHwUSB_010EndpointIN8transmitEb+0x52>
  {
    if( flag )
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d03a      	beq.n	8003b7c <_ZN8cHwUSB_010EndpointIN8transmitEb+0xc0>
    {
      transmitZLP();
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f840 	bl	8003b8c <_ZN8cHwUSB_010EndpointIN11transmitZLPEv>
 8003b0c:	e036      	b.n	8003b7c <_ZN8cHwUSB_010EndpointIN8transmitEb+0xc0>
    }
  }
  else
  {
    BYTE pktCnt =  ((len + mps -1)/ mps);
 8003b0e:	89ba      	ldrh	r2, [r7, #12]
 8003b10:	89fb      	ldrh	r3, [r7, #14]
 8003b12:	4413      	add	r3, r2
 8003b14:	1e5a      	subs	r2, r3, #1
 8003b16:	89fb      	ldrh	r3, [r7, #14]
 8003b18:	fb92 f3f3 	sdiv	r3, r2, r3
 8003b1c:	72fb      	strb	r3, [r7, #11]
    
    inep->DIEPTSIZ &= ~(   USB_OTG_DIEPTSIZ_PKTCNT
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b24:	691a      	ldr	r2, [r3, #16]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2c:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8003b30:	611a      	str	r2, [r3, #16]
                         | USB_OTG_DIEPTSIZ_XFRSIZ );
    
    inep->DIEPTSIZ |=  (  (USB_OTG_DIEPTSIZ_PKTCNT & (pktCnt << 19))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b38:	6919      	ldr	r1, [r3, #16]
 8003b3a:	7afb      	ldrb	r3, [r7, #11]
 8003b3c:	04db      	lsls	r3, r3, #19
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <_ZN8cHwUSB_010EndpointIN8transmitEb+0xc8>)
 8003b42:	4013      	ands	r3, r2
                         |(USB_OTG_DIEPTSIZ_XFRSIZ & len) ); 
 8003b44:	89ba      	ldrh	r2, [r7, #12]
 8003b46:	431a      	orrs	r2, r3
    inep->DIEPTSIZ |=  (  (USB_OTG_DIEPTSIZ_PKTCNT & (pktCnt << 19))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	611a      	str	r2, [r3, #16]
    
    USB_DEVICE->DIEPEMPMSK |= 1 << num; // Enable Tx FIFO Empty Interrupt
 8003b52:	4b0d      	ldr	r3, [pc, #52]	; (8003b88 <_ZN8cHwUSB_010EndpointIN8transmitEb+0xcc>)
 8003b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	7812      	ldrb	r2, [r2, #0]
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	408a      	lsls	r2, r1
 8003b60:	4611      	mov	r1, r2
 8003b62:	4a09      	ldr	r2, [pc, #36]	; (8003b88 <_ZN8cHwUSB_010EndpointIN8transmitEb+0xcc>)
 8003b64:	430b      	orrs	r3, r1
 8003b66:	6353      	str	r3, [r2, #52]	; 0x34

    inep->DIEPCTL  |=  (   USB_OTG_DIEPCTL_CNAK 
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b76:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003b7a:	601a      	str	r2, [r3, #0]
                         | USB_OTG_DIEPCTL_EPENA ); // Enable EP
  }
}
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	1ff80000 	.word	0x1ff80000
 8003b88:	50000800 	.word	0x50000800

08003b8c <_ZN8cHwUSB_010EndpointIN11transmitZLPEv>:

//-------------------------------------------------------------------
void cHwUSB_0::EndpointIN::transmitZLP( void )
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
    inep->DIEPTSIZ &= ~(   USB_OTG_DIEPTSIZ_PKTCNT
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba2:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8003ba6:	611a      	str	r2, [r3, #16]
                         | USB_OTG_DIEPTSIZ_XFRSIZ );
    
    inep->DIEPTSIZ |=  (   USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19) ); 
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003bba:	611a      	str	r2, [r3, #16]

    inep->DIEPCTL  |=  (   USB_OTG_DIEPCTL_CNAK 
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bca:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003bce:	601a      	str	r2, [r3, #0]
                         | USB_OTG_DIEPCTL_EPENA ); // Enable EP
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <_ZN8cHwUSB_010EndpointIN12getInterruptEv>:

//-------------------------------------------------------------------
DWORD cHwUSB_0::EndpointIN::getInterrupt( void )
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  DWORD msk = USB_DEVICE->DIEPMSK | (((USB_DEVICE->DIEPEMPMSK >> num) & 0x1) << 7);
 8003be4:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <_ZN8cHwUSB_010EndpointIN12getInterruptEv+0x38>)
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <_ZN8cHwUSB_010EndpointIN12getInterruptEv+0x38>)
 8003bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	7809      	ldrb	r1, [r1, #0]
 8003bf0:	40cb      	lsrs	r3, r1
 8003bf2:	01db      	lsls	r3, r3, #7
 8003bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]

  return( inep->DIEPINT & msk );
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4013      	ands	r3, r2
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	50000800 	.word	0x50000800

08003c18 <_ZN8cHwUSB_010EndpointIN12clrInterruptEm>:

//-------------------------------------------------------------------
void cHwUSB_0::EndpointIN::clrInterrupt( DWORD interruptID )
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  inep->DIEPINT = interruptID;  
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	609a      	str	r2, [r3, #8]
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <_ZN8cHwUSB_011EndpointOUT6configEth>:
  fifo  = (__IO DWORD                  *)((DWORD)USB_OTG_FS + USB_OTG_FIFO_BASE         + (num)*USB_OTG_FIFO_SIZE   );
}
 
//-------------------------------------------------------------------
void cHwUSB_0::EndpointOUT::config( WORD epMPS, BYTE epType )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	807b      	strh	r3, [r7, #2]
 8003c44:	4613      	mov	r3, r2
 8003c46:	707b      	strb	r3, [r7, #1]
  rxBuf.maxpacket = epMPS;
 8003c48:	887b      	ldrh	r3, [r7, #2]
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

  if( num == 0 )
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <_ZN8cHwUSB_011EndpointOUT6configEth+0x26>
  {
    epMPS = 0; // MPS has to be 64 for endpoint 0 
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	807b      	strh	r3, [r7, #2]
  }
  
  USB_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (num)) << 16);
 8003c5e:	4b1b      	ldr	r3, [pc, #108]	; (8003ccc <_ZN8cHwUSB_011EndpointOUT6configEth+0x94>)
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	7812      	ldrb	r2, [r2, #0]
 8003c66:	4611      	mov	r1, r2
 8003c68:	2201      	movs	r2, #1
 8003c6a:	408a      	lsls	r2, r1
 8003c6c:	0412      	lsls	r2, r2, #16
 8003c6e:	4611      	mov	r1, r2
 8003c70:	4a16      	ldr	r2, [pc, #88]	; (8003ccc <_ZN8cHwUSB_011EndpointOUT6configEth+0x94>)
 8003c72:	430b      	orrs	r3, r1
 8003c74:	61d3      	str	r3, [r2, #28]
  
  if( !(outep->DOEPCTL & USB_OTG_DOEPCTL_USBAEP) )
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	bf0c      	ite	eq
 8003c86:	2301      	moveq	r3, #1
 8003c88:	2300      	movne	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d011      	beq.n	8003cb4 <_ZN8cHwUSB_011EndpointOUT6configEth+0x7c>
  {
    outep->DOEPCTL |= (  (epMPS & USB_OTG_DOEPCTL_MPSIZ ) 
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	887b      	ldrh	r3, [r7, #2]
 8003c9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                       | (epType << 18 ) 
 8003c9e:	7879      	ldrb	r1, [r7, #1]
 8003ca0:	0489      	lsls	r1, r1, #18
 8003ca2:	430b      	orrs	r3, r1
    outep->DOEPCTL |= (  (epMPS & USB_OTG_DOEPCTL_MPSIZ ) 
 8003ca4:	ea42 0103 	orr.w	r1, r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003cae:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <_ZN8cHwUSB_011EndpointOUT6configEth+0x98>)
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	6013      	str	r3, [r2, #0]
                       | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)
                       | (USB_OTG_DOEPCTL_USBAEP));
  }
  
  if( num > 0 )
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <_ZN8cHwUSB_011EndpointOUT6configEth+0x8a>
  {
    receive();
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f83b 	bl	8003d38 <_ZN8cHwUSB_011EndpointOUT7receiveEv>
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	50000800 	.word	0x50000800
 8003cd0:	10008000 	.word	0x10008000

08003cd4 <_ZN8cHwUSB_011EndpointOUT12readFromFifoEt>:
  return( len );
}

//-------------------------------------------------------------------
void cHwUSB_0::EndpointOUT::readFromFifo( WORD len )
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	807b      	strh	r3, [r7, #2]
  WORD cnt = (len + 3) / 4;
 8003ce0:	887b      	ldrh	r3, [r7, #2]
 8003ce2:	3303      	adds	r3, #3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	da00      	bge.n	8003cea <_ZN8cHwUSB_011EndpointOUT12readFromFifoEt+0x16>
 8003ce8:	3303      	adds	r3, #3
 8003cea:	109b      	asrs	r3, r3, #2
 8003cec:	813b      	strh	r3, [r7, #8]

  __packed DWORD *dest = (__packed DWORD *)&rxBuf.data[0];
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	60fb      	str	r3, [r7, #12]

  rxBuf.size = len;
 8003cf4:	887b      	ldrh	r3, [r7, #2]
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  rxBuf.flag = true;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  
  for( WORD  i = 0; i < cnt; i++, dest++ )
 8003d06:	2300      	movs	r3, #0
 8003d08:	817b      	strh	r3, [r7, #10]
 8003d0a:	897a      	ldrh	r2, [r7, #10]
 8003d0c:	893b      	ldrh	r3, [r7, #8]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d20c      	bcs.n	8003d2c <_ZN8cHwUSB_011EndpointOUT12readFromFifoEt+0x58>
  {
    *dest = *fifo;    
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	601a      	str	r2, [r3, #0]
  for( WORD  i = 0; i < cnt; i++, dest++ )
 8003d1e:	897b      	ldrh	r3, [r7, #10]
 8003d20:	3301      	adds	r3, #1
 8003d22:	817b      	strh	r3, [r7, #10]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3304      	adds	r3, #4
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	e7ee      	b.n	8003d0a <_ZN8cHwUSB_011EndpointOUT12readFromFifoEt+0x36>
  }
}
 8003d2c:	bf00      	nop
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <_ZN8cHwUSB_011EndpointOUT7receiveEv>:

//-------------------------------------------------------------------
void cHwUSB_0::EndpointOUT::receive( void )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  WORD mps = rxBuf.maxpacket;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8003d46:	81fb      	strh	r3, [r7, #14]
  WORD len = MIN( rxBuf.size, rxBuf.maxpacket );
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8003d54:	4619      	mov	r1, r3
 8003d56:	4610      	mov	r0, r2
 8003d58:	f001 ffc5 	bl	8005ce6 <_Z3MINIhET_S0_S0_>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	81bb      	strh	r3, [r7, #12]

  if( len == 0 )
 8003d60:	89bb      	ldrh	r3, [r7, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d103      	bne.n	8003d6e <_ZN8cHwUSB_011EndpointOUT7receiveEv+0x36>
  {
    receiveZLP();
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f83c 	bl	8003de4 <_ZN8cHwUSB_011EndpointOUT10receiveZLPEv>
                          |(USB_OTG_DOEPTSIZ_XFRSIZ & (mps * pktcnt)) ); 
  
    outep->DOEPCTL  |=  (   USB_OTG_DOEPCTL_CNAK 
                          | USB_OTG_DOEPCTL_EPENA );  // Enable EP
  }
}
 8003d6c:	e033      	b.n	8003dd6 <_ZN8cHwUSB_011EndpointOUT7receiveEv+0x9e>
   BYTE pktcnt = (rxBuf.size + mps -1)/ mps;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003d74:	461a      	mov	r2, r3
 8003d76:	89fb      	ldrh	r3, [r7, #14]
 8003d78:	4413      	add	r3, r2
 8003d7a:	1e5a      	subs	r2, r3, #1
 8003d7c:	89fb      	ldrh	r3, [r7, #14]
 8003d7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d82:	72fb      	strb	r3, [r7, #11]
   outep->DOEPTSIZ  &= ~(   USB_OTG_DOEPTSIZ_PKTCNT 
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d92:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8003d96:	611a      	str	r2, [r3, #16]
    outep->DOEPTSIZ |=  (  (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d9e:	6919      	ldr	r1, [r3, #16]
 8003da0:	7afb      	ldrb	r3, [r7, #11]
 8003da2:	04db      	lsls	r3, r3, #19
 8003da4:	461a      	mov	r2, r3
 8003da6:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <_ZN8cHwUSB_011EndpointOUT7receiveEv+0xa8>)
 8003da8:	4013      	ands	r3, r2
                          |(USB_OTG_DOEPTSIZ_XFRSIZ & (mps * pktcnt)) ); 
 8003daa:	89fa      	ldrh	r2, [r7, #14]
 8003dac:	7af8      	ldrb	r0, [r7, #11]
 8003dae:	fb00 f202 	mul.w	r2, r0, r2
 8003db2:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003db6:	431a      	orrs	r2, r3
    outep->DOEPTSIZ |=  (  (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	611a      	str	r2, [r3, #16]
    outep->DOEPCTL  |=  (   USB_OTG_DOEPCTL_CNAK 
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd0:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003dd4:	601a      	str	r2, [r3, #0]
}
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	1ff80000 	.word	0x1ff80000

08003de4 <_ZN8cHwUSB_011EndpointOUT10receiveZLPEv>:

//-------------------------------------------------------------------
void cHwUSB_0::EndpointOUT::receiveZLP()
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  outep->DOEPTSIZ &= ~(   USB_OTG_DOEPTSIZ_PKTCNT
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dfa:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8003dfe:	611a      	str	r2, [r3, #16]
                        | USB_OTG_DOEPTSIZ_XFRSIZ ); 
    
  outep->DOEPTSIZ |=  (  (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e06:	691b      	ldr	r3, [r3, #16]
                      |  (USB_OTG_DOEPTSIZ_XFRSIZ & rxBuf.maxpacket) );
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	f892 2083 	ldrb.w	r2, [r2, #131]	; 0x83
  outep->DOEPTSIZ |=  (  (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19))
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e16:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003e1a:	611a      	str	r2, [r3, #16]

  outep->DOEPCTL  |=  (   USB_OTG_DOEPCTL_CNAK 
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e2a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003e2e:	601a      	str	r2, [r3, #0]
                        | USB_OTG_DOEPCTL_EPENA );  // Enable EP
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <_ZN8cHwUSB_011EndpointOUT12getInterruptEv>:

//-------------------------------------------------------------------
DWORD cHwUSB_0::EndpointOUT::getInterrupt( void )
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  return( outep->DOEPINT & USB_DEVICE->DOEPMSK );
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	4b04      	ldr	r3, [pc, #16]	; (8003e60 <_ZN8cHwUSB_011EndpointOUT12getInterruptEv+0x24>)
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	4013      	ands	r3, r2
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	50000800 	.word	0x50000800

08003e64 <_ZN8cHwUSB_011EndpointOUT12clrInterruptEm>:

//-------------------------------------------------------------------
void cHwUSB_0::EndpointOUT::clrInterrupt( DWORD interruptID )
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  outep->DOEPINT = interruptID;  
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	609a      	str	r2, [r3, #8]
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <_ZN8cHwUSB_03isrEv>:
  USB_OTG_FS->GAHBCFG |=  USB_OTG_GAHBCFG_GINT;      // enable USB interrupts
}

//-------------------------------------------------------------------
inline void cHwUSB_0::isr(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08c      	sub	sp, #48	; 0x30
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  // Current mode of operation = Host mode ?
  if( USB_OTG_FS->GINTSTS & USB_OTG_GINTSTS_CMOD ) 
 8003e8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	bf14      	ite	ne
 8003e9a:	2301      	movne	r3, #1
 8003e9c:	2300      	moveq	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f040 8285 	bne.w	80043b0 <_ZN8cHwUSB_03isrEv+0x52c>
  {
    return;
  }
  
  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_MMIS ) )
 8003ea6:	2102      	movs	r1, #2
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 faab 	bl	8004404 <_ZN8cHwUSB_018isInterruptPendingEm>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bf14      	ite	ne
 8003eb4:	2301      	movne	r3, #1
 8003eb6:	2300      	moveq	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <_ZN8cHwUSB_03isrEv+0x42>
  {
    // incorrect mode
    clrInterrupt( USB_OTG_GINTSTS_MMIS);
 8003ebe:	2102      	movs	r1, #2
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 fab9 	bl	8004438 <_ZN8cHwUSB_012clrInterruptEm>
  }
  
  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_OEPINT ) )
 8003ec6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fa9a 	bl	8004404 <_ZN8cHwUSB_018isInterruptPendingEm>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bf14      	ite	ne
 8003ed6:	2301      	movne	r3, #1
 8003ed8:	2300      	moveq	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8083 	beq.w	8003fe8 <_ZN8cHwUSB_03isrEv+0x164>
  {
    DWORD interruptBits = getOutInterrupt();
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fa7a 	bl	80043dc <_ZN8cHwUSB_015getOutInterruptEv>
 8003ee8:	62f8      	str	r0, [r7, #44]	; 0x2c
    DWORD interruptType = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
    BYTE  epNum         = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    
    while ( interruptBits )
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d076      	beq.n	8003fe8 <_ZN8cHwUSB_03isrEv+0x164>
    {
      if( interruptBits & 0x1 )
 8003efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d068      	beq.n	8003fd6 <_ZN8cHwUSB_03isrEv+0x152>
      {
        interruptType = epOUT[epNum].getInterrupt();
 8003f04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f08:	228c      	movs	r2, #140	; 0x8c
 8003f0a:	fb02 f303 	mul.w	r3, r2, r3
 8003f0e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	4413      	add	r3, r2
 8003f16:	3304      	adds	r3, #4
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff ff8f 	bl	8003e3c <_ZN8cHwUSB_011EndpointOUT12getInterruptEv>
 8003f1e:	61f8      	str	r0, [r7, #28]
        
        if( interruptType & USB_OTG_DOEPINT_XFRC ) 
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d022      	beq.n	8003f70 <_ZN8cHwUSB_03isrEv+0xec>
        {
          // OUT-package received, non-control
          epOUT[epNum].receive();
 8003f2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f2e:	228c      	movs	r2, #140	; 0x8c
 8003f30:	fb02 f303 	mul.w	r3, r2, r3
 8003f34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff fefa 	bl	8003d38 <_ZN8cHwUSB_011EndpointOUT7receiveEv>
          eventHandler( epNum, false ); 
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003f50:	2200      	movs	r2, #0
 8003f52:	4798      	blx	r3
          epOUT[epNum].clrInterrupt( USB_OTG_DOEPINT_XFRC );
 8003f54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f58:	228c      	movs	r2, #140	; 0x8c
 8003f5a:	fb02 f303 	mul.w	r3, r2, r3
 8003f5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	4413      	add	r3, r2
 8003f66:	3304      	adds	r3, #4
 8003f68:	2101      	movs	r1, #1
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff ff7a 	bl	8003e64 <_ZN8cHwUSB_011EndpointOUT12clrInterruptEm>
        }
                
        if( interruptType & USB_OTG_DOEPINT_STUP )
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d01a      	beq.n	8003fb0 <_ZN8cHwUSB_03isrEv+0x12c>
        {
          // Setup-package received
          eventHandler( 0, true ); 
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2201      	movs	r2, #1
 8003f84:	2100      	movs	r1, #0
 8003f86:	4798      	blx	r3
          epIN[0].transmit(true);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	334c      	adds	r3, #76	; 0x4c
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff fd94 	bl	8003abc <_ZN8cHwUSB_010EndpointIN8transmitEb>
          epOUT[epNum].clrInterrupt( USB_OTG_DOEPINT_STUP );
 8003f94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f98:	228c      	movs	r2, #140	; 0x8c
 8003f9a:	fb02 f303 	mul.w	r3, r2, r3
 8003f9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	2108      	movs	r1, #8
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff ff5a 	bl	8003e64 <_ZN8cHwUSB_011EndpointOUT12clrInterruptEm>
        }
        
        if( interruptType & USB_OTG_DOEPINT_OTEPDIS )
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00d      	beq.n	8003fd6 <_ZN8cHwUSB_03isrEv+0x152>
        {
          epOUT[epNum].clrInterrupt( USB_OTG_DOEPINT_OTEPDIS);
 8003fba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003fbe:	228c      	movs	r2, #140	; 0x8c
 8003fc0:	fb02 f303 	mul.w	r3, r2, r3
 8003fc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	4413      	add	r3, r2
 8003fcc:	3304      	adds	r3, #4
 8003fce:	2110      	movs	r1, #16
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff ff47 	bl	8003e64 <_ZN8cHwUSB_011EndpointOUT12clrInterruptEm>
        }
      }

      // handle next endpoint
      epNum++;
 8003fd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003fda:	3301      	adds	r3, #1
 8003fdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      interruptBits >>= 1;
 8003fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while ( interruptBits )
 8003fe6:	e785      	b.n	8003ef4 <_ZN8cHwUSB_03isrEv+0x70>
    }
  }
  
  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_IEPINT ) )
 8003fe8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 fa09 	bl	8004404 <_ZN8cHwUSB_018isInterruptPendingEm>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	bf14      	ite	ne
 8003ff8:	2301      	movne	r3, #1
 8003ffa:	2300      	moveq	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 80c7 	beq.w	8004192 <_ZN8cHwUSB_03isrEv+0x30e>
  {
    DWORD interruptBits = getInInterrupt();
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f9d7 	bl	80043b8 <_ZN8cHwUSB_014getInInterruptEv>
 800400a:	6278      	str	r0, [r7, #36]	; 0x24
    DWORD interruptType = 0;
 800400c:	2300      	movs	r3, #0
 800400e:	61bb      	str	r3, [r7, #24]
    BYTE  epNum         = 0;
 8004010:	2300      	movs	r3, #0
 8004012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      
    while( interruptBits )
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 80ba 	beq.w	8004192 <_ZN8cHwUSB_03isrEv+0x30e>
    {
      if( interruptBits & 0x1 )
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 80ab 	beq.w	8004180 <_ZN8cHwUSB_03isrEv+0x2fc>
      {
        interruptType = epIN[epNum].getInterrupt( );
 800402a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800402e:	228c      	movs	r2, #140	; 0x8c
 8004030:	fb02 f303 	mul.w	r3, r2, r3
 8004034:	3348      	adds	r3, #72	; 0x48
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	4413      	add	r3, r2
 800403a:	3304      	adds	r3, #4
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff fdcd 	bl	8003bdc <_ZN8cHwUSB_010EndpointIN12getInterruptEv>
 8004042:	61b8      	str	r0, [r7, #24]

        if( interruptType & USB_OTG_DIEPINT_XFRC )
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d032      	beq.n	80040b4 <_ZN8cHwUSB_03isrEv+0x230>
        {
          USB_DEVICE->DIEPEMPMSK = ~(0x1 << epNum);
 800404e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004052:	2201      	movs	r2, #1
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	43da      	mvns	r2, r3
 800405a:	4ba9      	ldr	r3, [pc, #676]	; (8004300 <_ZN8cHwUSB_03isrEv+0x47c>)
 800405c:	635a      	str	r2, [r3, #52]	; 0x34
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_XFRC );
 800405e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004062:	228c      	movs	r2, #140	; 0x8c
 8004064:	fb02 f303 	mul.w	r3, r2, r3
 8004068:	3348      	adds	r3, #72	; 0x48
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	4413      	add	r3, r2
 800406e:	3304      	adds	r3, #4
 8004070:	2101      	movs	r1, #1
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff fdd0 	bl	8003c18 <_ZN8cHwUSB_010EndpointIN12clrInterruptEm>
          epOUT[0].receiveZLP();
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff feb0 	bl	8003de4 <_ZN8cHwUSB_011EndpointOUT10receiveZLPEv>
          eventHandler( epNum | 0x80, true );          
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004090:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004094:	b2d1      	uxtb	r1, r2
 8004096:	2201      	movs	r2, #1
 8004098:	4798      	blx	r3
          epIN[epNum].transmit( false );
 800409a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800409e:	228c      	movs	r2, #140	; 0x8c
 80040a0:	fb02 f303 	mul.w	r3, r2, r3
 80040a4:	3348      	adds	r3, #72	; 0x48
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	4413      	add	r3, r2
 80040aa:	3304      	adds	r3, #4
 80040ac:	2100      	movs	r1, #0
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff fd04 	bl	8003abc <_ZN8cHwUSB_010EndpointIN8transmitEb>
        }
         
        if( interruptType & USB_OTG_DIEPINT_TOC )
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00c      	beq.n	80040d8 <_ZN8cHwUSB_03isrEv+0x254>
        {
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_TOC );
 80040be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040c2:	228c      	movs	r2, #140	; 0x8c
 80040c4:	fb02 f303 	mul.w	r3, r2, r3
 80040c8:	3348      	adds	r3, #72	; 0x48
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	4413      	add	r3, r2
 80040ce:	3304      	adds	r3, #4
 80040d0:	2108      	movs	r1, #8
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff fda0 	bl	8003c18 <_ZN8cHwUSB_010EndpointIN12clrInterruptEm>
        }
        
        if( interruptType & USB_OTG_DIEPINT_ITTXFE )
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	f003 0310 	and.w	r3, r3, #16
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00c      	beq.n	80040fc <_ZN8cHwUSB_03isrEv+0x278>
        {
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_ITTXFE );
 80040e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040e6:	228c      	movs	r2, #140	; 0x8c
 80040e8:	fb02 f303 	mul.w	r3, r2, r3
 80040ec:	3348      	adds	r3, #72	; 0x48
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	4413      	add	r3, r2
 80040f2:	3304      	adds	r3, #4
 80040f4:	2110      	movs	r1, #16
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff fd8e 	bl	8003c18 <_ZN8cHwUSB_010EndpointIN12clrInterruptEm>
        }
        
        if( interruptType & USB_OTG_DIEPINT_INEPNE )
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00c      	beq.n	8004120 <_ZN8cHwUSB_03isrEv+0x29c>
        {
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_INEPNE );
 8004106:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800410a:	228c      	movs	r2, #140	; 0x8c
 800410c:	fb02 f303 	mul.w	r3, r2, r3
 8004110:	3348      	adds	r3, #72	; 0x48
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	4413      	add	r3, r2
 8004116:	3304      	adds	r3, #4
 8004118:	2140      	movs	r1, #64	; 0x40
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff fd7c 	bl	8003c18 <_ZN8cHwUSB_010EndpointIN12clrInterruptEm>
        }
        
        if( interruptType & USB_OTG_DIEPINT_EPDISD )
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00c      	beq.n	8004144 <_ZN8cHwUSB_03isrEv+0x2c0>
        {
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_EPDISD );
 800412a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800412e:	228c      	movs	r2, #140	; 0x8c
 8004130:	fb02 f303 	mul.w	r3, r2, r3
 8004134:	3348      	adds	r3, #72	; 0x48
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	4413      	add	r3, r2
 800413a:	3304      	adds	r3, #4
 800413c:	2102      	movs	r1, #2
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff fd6a 	bl	8003c18 <_ZN8cHwUSB_010EndpointIN12clrInterruptEm>
        }
        
        if( interruptType & USB_OTG_DIEPINT_TXFE )
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414a:	2b00      	cmp	r3, #0
 800414c:	d018      	beq.n	8004180 <_ZN8cHwUSB_03isrEv+0x2fc>
        {
          epIN[epNum].writeToFifo();
 800414e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004152:	228c      	movs	r2, #140	; 0x8c
 8004154:	fb02 f303 	mul.w	r3, r2, r3
 8004158:	3348      	adds	r3, #72	; 0x48
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	4413      	add	r3, r2
 800415e:	3304      	adds	r3, #4
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff fc53 	bl	8003a0c <_ZN8cHwUSB_010EndpointIN11writeToFifoEv>
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_TXFE );
 8004166:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800416a:	228c      	movs	r2, #140	; 0x8c
 800416c:	fb02 f303 	mul.w	r3, r2, r3
 8004170:	3348      	adds	r3, #72	; 0x48
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4413      	add	r3, r2
 8004176:	3304      	adds	r3, #4
 8004178:	2180      	movs	r1, #128	; 0x80
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fd4c 	bl	8003c18 <_ZN8cHwUSB_010EndpointIN12clrInterruptEm>
        }
      }

      // handle next endpoint
      epNum++;
 8004180:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004184:	3301      	adds	r3, #1
 8004186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      interruptBits >>= 1;
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	085b      	lsrs	r3, r3, #1
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
    while( interruptBits )
 8004190:	e741      	b.n	8004016 <_ZN8cHwUSB_03isrEv+0x192>
    }
  }
  
  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_WKUINT ) )
 8004192:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f934 	bl	8004404 <_ZN8cHwUSB_018isInterruptPendingEm>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bf14      	ite	ne
 80041a2:	2301      	movne	r3, #1
 80041a4:	2300      	moveq	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <_ZN8cHwUSB_03isrEv+0x33e>
  {    
    USB_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80041ac:	4b54      	ldr	r3, [pc, #336]	; (8004300 <_ZN8cHwUSB_03isrEv+0x47c>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	4a53      	ldr	r2, [pc, #332]	; (8004300 <_ZN8cHwUSB_03isrEv+0x47c>)
 80041b2:	f023 0301 	bic.w	r3, r3, #1
 80041b6:	6053      	str	r3, [r2, #4]
    clrInterrupt( USB_OTG_GINTSTS_WKUINT );
 80041b8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f93b 	bl	8004438 <_ZN8cHwUSB_012clrInterruptEm>
  }
  
  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_USBSUSP ) )
 80041c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f91c 	bl	8004404 <_ZN8cHwUSB_018isInterruptPendingEm>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bf14      	ite	ne
 80041d2:	2301      	movne	r3, #1
 80041d4:	2300      	moveq	r3, #0
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d004      	beq.n	80041e6 <_ZN8cHwUSB_03isrEv+0x362>
  {
    clrInterrupt( USB_OTG_GINTSTS_USBSUSP );
 80041dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f929 	bl	8004438 <_ZN8cHwUSB_012clrInterruptEm>
  }
  
  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_USBRST ) )
 80041e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f90a 	bl	8004404 <_ZN8cHwUSB_018isInterruptPendingEm>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	bf14      	ite	ne
 80041f6:	2301      	movne	r3, #1
 80041f8:	2300      	moveq	r3, #0
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <_ZN8cHwUSB_03isrEv+0x392>
  {
    reset();
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3308      	adds	r3, #8
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	4798      	blx	r3
    clrInterrupt( USB_OTG_GINTSTS_USBRST );
 800420c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f911 	bl	8004438 <_ZN8cHwUSB_012clrInterruptEm>
  }
  
  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_ENUMDNE ) )
 8004216:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f8f2 	bl	8004404 <_ZN8cHwUSB_018isInterruptPendingEm>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	bf14      	ite	ne
 8004226:	2301      	movne	r3, #1
 8004228:	2300      	moveq	r3, #0
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d029      	beq.n	8004284 <_ZN8cHwUSB_03isrEv+0x400>
  {
    USB_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004230:	4b33      	ldr	r3, [pc, #204]	; (8004300 <_ZN8cHwUSB_03isrEv+0x47c>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	4a32      	ldr	r2, [pc, #200]	; (8004300 <_ZN8cHwUSB_03isrEv+0x47c>)
 8004236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800423a:	6053      	str	r3, [r2, #4]
    
    USB_OTG_FS->GUSBCFG &= ~(  USB_OTG_GUSBCFG_TRDT );    
 800423c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004246:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800424a:	60d3      	str	r3, [r2, #12]
    USB_OTG_FS->GUSBCFG |=  (  USB_OTG_GUSBCFG_TRDT_0 
 800424c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004256:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800425a:	60d3      	str	r3, [r2, #12]
                             | USB_OTG_GUSBCFG_TRDT_2 );  
      
    epOUT[0].config( MAX_EP0_SIZE );
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004262:	2200      	movs	r2, #0
 8004264:	2140      	movs	r1, #64	; 0x40
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff fce6 	bl	8003c38 <_ZN8cHwUSB_011EndpointOUT6configEth>
    epIN [0].config( MAX_EP0_SIZE );    
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	334c      	adds	r3, #76	; 0x4c
 8004270:	2200      	movs	r2, #0
 8004272:	2140      	movs	r1, #64	; 0x40
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff fb7d 	bl	8003974 <_ZN8cHwUSB_010EndpointIN6configEth>
    
    clrInterrupt( USB_OTG_GINTSTS_ENUMDNE );
 800427a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f8da 	bl	8004438 <_ZN8cHwUSB_012clrInterruptEm>
  }
    
  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_RXFLVL ) )
 8004284:	2110      	movs	r1, #16
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f8bc 	bl	8004404 <_ZN8cHwUSB_018isInterruptPendingEm>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	bf14      	ite	ne
 8004292:	2301      	movne	r3, #1
 8004294:	2300      	moveq	r3, #0
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d04e      	beq.n	800433a <_ZN8cHwUSB_03isrEv+0x4b6>
  {
    USB_OTG_FS->GINTMSK &= ~(USB_OTG_GINTSTS_RXFLVL); 
 800429c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80042a6:	f023 0310 	bic.w	r3, r3, #16
 80042aa:	6193      	str	r3, [r2, #24]
        
    DWORD temp = USB_OTG_FS->GRXSTSP;
 80042ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	617b      	str	r3, [r7, #20]
    
    BYTE epnum = temp & USB_OTG_GRXSTSP_EPNUM;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	74fb      	strb	r3, [r7, #19]
   
    if( ((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  2 ) // Packet status = OUT data packet received
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	0c5b      	lsrs	r3, r3, #17
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d11c      	bne.n	8004304 <_ZN8cHwUSB_03isrEv+0x480>
    { 
      if( temp & USB_OTG_GRXSTSP_BCNT )
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80042d0:	4013      	ands	r3, r2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d029      	beq.n	800432a <_ZN8cHwUSB_03isrEv+0x4a6>
      { 
        epOUT[epnum].readFromFifo( (temp & USB_OTG_GRXSTSP_BCNT) >> 4 );
 80042d6:	7cfb      	ldrb	r3, [r7, #19]
 80042d8:	228c      	movs	r2, #140	; 0x8c
 80042da:	fb02 f303 	mul.w	r3, r2, r3
 80042de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	4413      	add	r3, r2
 80042e6:	1d1a      	adds	r2, r3, #4
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	091b      	lsrs	r3, r3, #4
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	4619      	mov	r1, r3
 80042f6:	4610      	mov	r0, r2
 80042f8:	f7ff fcec 	bl	8003cd4 <_ZN8cHwUSB_011EndpointOUT12readFromFifoEt>
 80042fc:	e015      	b.n	800432a <_ZN8cHwUSB_03isrEv+0x4a6>
 80042fe:	bf00      	nop
 8004300:	50000800 	.word	0x50000800
      }
    }
    else if( ((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  6 ) // Packet status = Setup data packet received
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	0c5b      	lsrs	r3, r3, #17
 8004308:	f003 030f 	and.w	r3, r3, #15
 800430c:	2b06      	cmp	r3, #6
 800430e:	d10c      	bne.n	800432a <_ZN8cHwUSB_03isrEv+0x4a6>
    {
      epOUT[epnum].readFromFifo( 8 );
 8004310:	7cfb      	ldrb	r3, [r7, #19]
 8004312:	228c      	movs	r2, #140	; 0x8c
 8004314:	fb02 f303 	mul.w	r3, r2, r3
 8004318:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	4413      	add	r3, r2
 8004320:	3304      	adds	r3, #4
 8004322:	2108      	movs	r1, #8
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff fcd5 	bl	8003cd4 <_ZN8cHwUSB_011EndpointOUT12readFromFifoEt>
    }
    USB_OTG_FS->GINTMSK |= (USB_OTG_GINTSTS_RXFLVL); 
 800432a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004334:	f043 0310 	orr.w	r3, r3, #16
 8004338:	6193      	str	r3, [r2, #24]
  }
  
  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_SOF ) )
 800433a:	2108      	movs	r1, #8
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f861 	bl	8004404 <_ZN8cHwUSB_018isInterruptPendingEm>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	bf14      	ite	ne
 8004348:	2301      	movne	r3, #1
 800434a:	2300      	moveq	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <_ZN8cHwUSB_03isrEv+0x4d6>
  {
    clrInterrupt( USB_OTG_GINTSTS_SOF );
 8004352:	2108      	movs	r1, #8
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f86f 	bl	8004438 <_ZN8cHwUSB_012clrInterruptEm>
  }
  
  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_SRQINT ) )
 800435a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f850 	bl	8004404 <_ZN8cHwUSB_018isInterruptPendingEm>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	bf14      	ite	ne
 800436a:	2301      	movne	r3, #1
 800436c:	2300      	moveq	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d004      	beq.n	800437e <_ZN8cHwUSB_03isrEv+0x4fa>
  {
    clrInterrupt( USB_OTG_GINTSTS_SRQINT );
 8004374:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f85d 	bl	8004438 <_ZN8cHwUSB_012clrInterruptEm>
  } 
  
  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_OTGINT ) )
 800437e:	2104      	movs	r1, #4
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f83f 	bl	8004404 <_ZN8cHwUSB_018isInterruptPendingEm>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	bf14      	ite	ne
 800438c:	2301      	movne	r3, #1
 800438e:	2300      	moveq	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00d      	beq.n	80043b2 <_ZN8cHwUSB_03isrEv+0x52e>
  {
    DWORD temp = USB_OTG_FS->GOTGINT;
 8004396:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	60fb      	str	r3, [r7, #12]
    USB_OTG_FS->GOTGINT |= temp;
 800439e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	604b      	str	r3, [r1, #4]
 80043ae:	e000      	b.n	80043b2 <_ZN8cHwUSB_03isrEv+0x52e>
    return;
 80043b0:	bf00      	nop
  }
}
 80043b2:	3730      	adds	r7, #48	; 0x30
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <_ZN8cHwUSB_014getInInterruptEv>:
  return true;
}

//-------------------------------------------------------------------
DWORD cHwUSB_0::getInInterrupt( void )
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  return(    USB_DEVICE->DAINT
 80043c0:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <_ZN8cHwUSB_014getInInterruptEv+0x20>)
 80043c2:	699a      	ldr	r2, [r3, #24]
           & USB_DEVICE->DAINTMSK 
 80043c4:	4b04      	ldr	r3, [pc, #16]	; (80043d8 <_ZN8cHwUSB_014getInInterruptEv+0x20>)
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	4013      	ands	r3, r2
           & 0xFFFF               );
 80043ca:	b29b      	uxth	r3, r3
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	50000800 	.word	0x50000800

080043dc <_ZN8cHwUSB_015getOutInterruptEv>:

//-------------------------------------------------------------------
DWORD cHwUSB_0::getOutInterrupt( void )
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  return( (   USB_DEVICE->DAINT 
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <_ZN8cHwUSB_015getOutInterruptEv+0x24>)
 80043e6:	699a      	ldr	r2, [r3, #24]
            & USB_DEVICE->DAINTMSK 
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <_ZN8cHwUSB_015getOutInterruptEv+0x24>)
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	4013      	ands	r3, r2
            & 0xFFFF0000           ) >> 16);
 80043ee:	0c1b      	lsrs	r3, r3, #16
 80043f0:	b29b      	uxth	r3, r3
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	50000800 	.word	0x50000800

08004404 <_ZN8cHwUSB_018isInterruptPendingEm>:

//-------------------------------------------------------------------
BYTE cHwUSB_0::isInterruptPending( DWORD interuptID )
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  return( (   USB_OTG_FS->GINTSTS 
 800440e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004412:	695a      	ldr	r2, [r3, #20]
            & USB_OTG_FS->GINTMSK 
 8004414:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	401a      	ands	r2, r3
            & interuptID          ) == interuptID );  
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	4013      	ands	r3, r2
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	bf0c      	ite	eq
 8004426:	2301      	moveq	r3, #1
 8004428:	2300      	movne	r3, #0
 800442a:	b2db      	uxtb	r3, r3
}
 800442c:	4618      	mov	r0, r3
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <_ZN8cHwUSB_012clrInterruptEm>:

//-------------------------------------------------------------------
void cHwUSB_0::clrInterrupt( DWORD interuptID )
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  USB_OTG_FS->GINTSTS |= interuptID;
 8004442:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	4313      	orrs	r3, r2
 8004450:	614b      	str	r3, [r1, #20]
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
	...

08004460 <OTG_FS_IRQHandler>:
//-------------------------------------------------------------------
//-------------------------------------------------------------------
extern "C" 
{
  void OTG_FS_IRQHandler(void)
  {
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
    cSystem::disableInterrupt();
 8004464:	f7fd fb54 	bl	8001b10 <_ZN7cSystem16disableInterruptEv>
    cHwUSB_0::usbPtr->isr();
 8004468:	4b04      	ldr	r3, [pc, #16]	; (800447c <OTG_FS_IRQHandler+0x1c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff fd09 	bl	8003e84 <_ZN8cHwUSB_03isrEv>
    cSystem::enableInterrupt();
 8004472:	f7fd fb5f 	bl	8001b34 <_ZN7cSystem15enableInterruptEv>
  }
 8004476:	bf00      	nop
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20000204 	.word	0x20000204

08004480 <_ZN10cHwDisplayC1Ehh>:
//
// cHwDisplay
//
//*******************************************************************
//-------------------------------------------------------------------
cHwDisplay::cHwDisplay( BYTE numberOfLinesIn,
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	70fb      	strb	r3, [r7, #3]
 800448c:	4613      	mov	r3, r2
 800448e:	70bb      	strb	r3, [r7, #2]
                        BYTE numberOfColumnsIn )
 8004490:	4a08      	ldr	r2, [pc, #32]	; (80044b4 <_ZN10cHwDisplayC1Ehh+0x34>)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	601a      	str	r2, [r3, #0]
{
  numberOfLines  = numberOfLinesIn;
 8004496:	78fb      	ldrb	r3, [r7, #3]
 8004498:	b29a      	uxth	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	809a      	strh	r2, [r3, #4]
  numberOfColumns = numberOfColumnsIn;
 800449e:	78bb      	ldrb	r3, [r7, #2]
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	80da      	strh	r2, [r3, #6]
}
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	080075ac 	.word	0x080075ac

080044b8 <_ZN10cHwDisplay16getNumberOfLinesEv>:

//-------------------------------------------------------------------
inline BYTE cHwDisplay::getNumberOfLines( void )
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  return( numberOfLines );
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	889b      	ldrh	r3, [r3, #4]
 80044c4:	b2db      	uxtb	r3, r3
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <_ZN10cHwDisplay18getNumberOfColumnsEv>:

//-------------------------------------------------------------------
inline BYTE cHwDisplay::getNumberOfColumns( void )
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  return( numberOfColumns );
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	88db      	ldrh	r3, [r3, #6]
 80044de:	b2db      	uxtb	r3, r3
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <_ZN14cHwDisplayFontC1EPK24cHwDisplayFontPropertiesPKh>:
//
// cHwDisplayFont
//
//*******************************************************************
//-------------------------------------------------------------------
cHwDisplayFont::cHwDisplayFont( const cHwDisplayFontProperties *propIn,
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
                                const BYTE                     *dataIn )
{
  prop     = propIn;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	601a      	str	r2, [r3, #0]
  data     = dataIn;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	605a      	str	r2, [r3, #4]
  selected = data;  // default is first character
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	609a      	str	r2, [r3, #8]
}
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <_ZNK14cHwDisplayFont12getCharWidthEv>:

//-------------------------------------------------------------------
 BYTE cHwDisplayFont::getCharWidth( void ) const
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  return( GET_BYTE_PROGMEM(prop->charWidth) );
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	78db      	ldrb	r3, [r3, #3]
}
 8004528:	4618      	mov	r0, r3
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <_ZNK14cHwDisplayFont13getCharHeightEv>:

//-------------------------------------------------------------------
BYTE cHwDisplayFont::getCharHeight( void ) const
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  return( GET_BYTE_PROGMEM(prop->charHeight) );
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	791b      	ldrb	r3, [r3, #4]
}
 8004542:	4618      	mov	r0, r3
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <_ZN14cHwDisplayFont7setCharEh>:

//-------------------------------------------------------------------
void cHwDisplayFont::setChar( BYTE c )
{
 800454e:	b480      	push	{r7}
 8004550:	b085      	sub	sp, #20
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	460b      	mov	r3, r1
 8004558:	70fb      	strb	r3, [r7, #3]
  BYTE id = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	73fb      	strb	r3, [r7, #15]

  if( GET_BYTE_PROGMEM(prop->firstId) <= c && c <= GET_BYTE_PROGMEM(prop->lastId) ) // is char c defined?
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	78fa      	ldrb	r2, [r7, #3]
 8004566:	429a      	cmp	r2, r3
 8004568:	d30b      	bcc.n	8004582 <_ZN14cHwDisplayFont7setCharEh+0x34>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	785b      	ldrb	r3, [r3, #1]
 8004570:	78fa      	ldrb	r2, [r7, #3]
 8004572:	429a      	cmp	r2, r3
 8004574:	d805      	bhi.n	8004582 <_ZN14cHwDisplayFont7setCharEh+0x34>
  {
    id = c - GET_BYTE_PROGMEM(prop->firstId);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	78fa      	ldrb	r2, [r7, #3]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	73fb      	strb	r3, [r7, #15]
  }
  selected = data + (WORD)id * GET_BYTE_PROGMEM(prop->bytePerChar);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	7bfa      	ldrb	r2, [r7, #15]
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	6809      	ldr	r1, [r1, #0]
 800458c:	7889      	ldrb	r1, [r1, #2]
 800458e:	fb01 f202 	mul.w	r2, r1, r2
 8004592:	441a      	add	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	609a      	str	r2, [r3, #8]
}
 8004598:	bf00      	nop
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <_ZN14cHwDisplayFont8getPixelEhh>:

//-------------------------------------------------------------------
BYTE cHwDisplayFont::getPixel( BYTE x, BYTE y )
{
 80045a4:	b5b0      	push	{r4, r5, r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	70fb      	strb	r3, [r7, #3]
 80045b0:	4613      	mov	r3, r2
 80045b2:	70bb      	strb	r3, [r7, #2]
                                                 // calc pixel number
  WORD pixel  = ( (WORD)x + (WORD)y * getCharWidth() );
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	b29c      	uxth	r4, r3
 80045b8:	78bb      	ldrb	r3, [r7, #2]
 80045ba:	b29d      	uxth	r5, r3
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff ffac 	bl	800451a <_ZNK14cHwDisplayFont12getCharWidthEv>
 80045c2:	4603      	mov	r3, r0
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	fb15 f303 	smulbb	r3, r5, r3
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	4423      	add	r3, r4
 80045ce:	81fb      	strh	r3, [r7, #14]

                                                // get pixel value
  BYTE ret = GET_BYTE_PROGMEM_PTR(selected+(pixel>>3)) & ( 0x80>>(pixel&0x07) );
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	89fa      	ldrh	r2, [r7, #14]
 80045d6:	10d2      	asrs	r2, r2, #3
 80045d8:	4413      	add	r3, r2
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	b25a      	sxtb	r2, r3
 80045de:	89fb      	ldrh	r3, [r7, #14]
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	2180      	movs	r1, #128	; 0x80
 80045e6:	fa41 f303 	asr.w	r3, r1, r3
 80045ea:	b25b      	sxtb	r3, r3
 80045ec:	4013      	ands	r3, r2
 80045ee:	b25b      	sxtb	r3, r3
 80045f0:	737b      	strb	r3, [r7, #13]

  return( ret ? true : false );
 80045f2:	7b7b      	ldrb	r3, [r7, #13]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	bf14      	ite	ne
 80045f8:	2301      	movne	r3, #1
 80045fa:	2300      	moveq	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004608 <_ZN17cHwDisplayGraphicC1E14cHwDisplayFonth>:
//
// cHwDisplayGraphic
//
//*******************************************************************
//-------------------------------------------------------------------
cHwDisplayGraphic::cHwDisplayGraphic( cHwDisplayFont fontIn,
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	4638      	mov	r0, r7
 8004612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                      BYTE           zoomIn )
: cHwDisplay( 10, 20 ), //!< \todo adapt to / calculate by font size
  font( fontIn ),
  zoom( zoomIn )
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2214      	movs	r2, #20
 800461a:	210a      	movs	r1, #10
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff ff2f 	bl	8004480 <_ZN10cHwDisplayC1Ehh>
 8004622:	4a11      	ldr	r2, [pc, #68]	; (8004668 <_ZN17cHwDisplayGraphicC1E14cHwDisplayFonth+0x60>)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	3314      	adds	r3, #20
 800462c:	463a      	mov	r2, r7
 800462e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004630:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	7e3a      	ldrb	r2, [r7, #24]
 8004638:	f883 2020 	strb.w	r2, [r3, #32]
{
  BackColor  = Blue;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	221f      	movs	r2, #31
 8004640:	845a      	strh	r2, [r3, #34]	; 0x22
  PaintColor = Grey;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f24c 6218 	movw	r2, #50712	; 0xc618
 8004648:	849a      	strh	r2, [r3, #36]	; 0x24
  TextColor  = White;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004650:	84da      	strh	r2, [r3, #38]	; 0x26

  xPos = 0;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	811a      	strh	r2, [r3, #8]
  yPos = 0;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	815a      	strh	r2, [r3, #10]
}
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	08007550 	.word	0x08007550

0800466c <_ZN17cHwDisplayGraphic7setFontE14cHwDisplayFonth>:

//-------------------------------------------------------------------
void cHwDisplayGraphic::setFont( cHwDisplayFont fontIn,
                                 BYTE           zoomIn )
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	4638      	mov	r0, r7
 8004676:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  font = fontIn;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3314      	adds	r3, #20
 800467e:	463a      	mov	r2, r7
 8004680:	ca07      	ldmia	r2, {r0, r1, r2}
 8004682:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  zoom = zoomIn;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	7e3a      	ldrb	r2, [r7, #24]
 800468a:	f883 2020 	strb.w	r2, [r3, #32]
}
 800468e:	bf00      	nop
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <_ZN17cHwDisplayGraphic7setZoomEh>:

//-------------------------------------------------------------------
void cHwDisplayGraphic::setZoom( BYTE zoomIn )
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	460b      	mov	r3, r1
 80046a4:	70fb      	strb	r3, [r7, #3]
  zoom = zoomIn;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	78fa      	ldrb	r2, [r7, #3]
 80046aa:	f883 2020 	strb.w	r2, [r3, #32]
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <_ZN17cHwDisplayGraphic12setBackColorEt>:

//---------------------------------------------------------------
void cHwDisplayGraphic::setBackColor( WORD color )
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	460b      	mov	r3, r1
 80046c4:	807b      	strh	r3, [r7, #2]
  BackColor = color;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	887a      	ldrh	r2, [r7, #2]
 80046ca:	845a      	strh	r2, [r3, #34]	; 0x22
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <_ZN17cHwDisplayGraphic13setPaintColorEt>:

//---------------------------------------------------------------
void cHwDisplayGraphic::setPaintColor( WORD color )
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	807b      	strh	r3, [r7, #2]
  PaintColor = color;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	887a      	ldrh	r2, [r7, #2]
 80046e8:	849a      	strh	r2, [r3, #36]	; 0x24
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <_ZN17cHwDisplayGraphic12setTextColorEt>:

//---------------------------------------------------------------
void cHwDisplayGraphic::setTextColor( WORD color )
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
 80046fe:	460b      	mov	r3, r1
 8004700:	807b      	strh	r3, [r7, #2]
  TextColor = color;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	887a      	ldrh	r2, [r7, #2]
 8004706:	84da      	strh	r2, [r3, #38]	; 0x26
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <_ZN17cHwDisplayGraphic12gotoPixelPosEtt>:

//---------------------------------------------------------------
void cHwDisplayGraphic::gotoPixelPos( WORD x,
                                      WORD y )
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	807b      	strh	r3, [r7, #2]
 8004720:	4613      	mov	r3, r2
 8004722:	803b      	strh	r3, [r7, #0]
  xPos = x;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	887a      	ldrh	r2, [r7, #2]
 8004728:	811a      	strh	r2, [r3, #8]
  yPos = y;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	883a      	ldrh	r2, [r7, #0]
 800472e:	815a      	strh	r2, [r3, #10]
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <_ZN17cHwDisplayGraphic11gotoTextPosEhh>:

//---------------------------------------------------------------
void cHwDisplayGraphic::gotoTextPos( BYTE line,
                                     BYTE colum )
{
 800473c:	b590      	push	{r4, r7, lr}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	70fb      	strb	r3, [r7, #3]
 8004748:	4613      	mov	r3, r2
 800474a:	70bb      	strb	r3, [r7, #2]
  xPos = colum * zoom * font.getCharWidth();
 800474c:	78bb      	ldrb	r3, [r7, #2]
 800474e:	b29a      	uxth	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004756:	b29b      	uxth	r3, r3
 8004758:	fb12 f303 	smulbb	r3, r2, r3
 800475c:	b29c      	uxth	r4, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3314      	adds	r3, #20
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff fed9 	bl	800451a <_ZNK14cHwDisplayFont12getCharWidthEv>
 8004768:	4603      	mov	r3, r0
 800476a:	b29b      	uxth	r3, r3
 800476c:	fb14 f303 	smulbb	r3, r4, r3
 8004770:	b29a      	uxth	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	811a      	strh	r2, [r3, #8]
  yPos = line  * zoom * font.getCharHeight();
 8004776:	78fb      	ldrb	r3, [r7, #3]
 8004778:	b29a      	uxth	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004780:	b29b      	uxth	r3, r3
 8004782:	fb12 f303 	smulbb	r3, r2, r3
 8004786:	b29c      	uxth	r4, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3314      	adds	r3, #20
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff fed1 	bl	8004534 <_ZNK14cHwDisplayFont13getCharHeightEv>
 8004792:	4603      	mov	r3, r0
 8004794:	b29b      	uxth	r3, r3
 8004796:	fb14 f303 	smulbb	r3, r4, r3
 800479a:	b29a      	uxth	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	815a      	strh	r2, [r3, #10]
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd90      	pop	{r4, r7, pc}

080047a8 <_ZN17cHwDisplayGraphic7putCharEc>:

//---------------------------------------------------------------
void cHwDisplayGraphic::putChar( char ch )
{
 80047a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047ac:	b087      	sub	sp, #28
 80047ae:	af02      	add	r7, sp, #8
 80047b0:	6078      	str	r0, [r7, #4]
 80047b2:	460b      	mov	r3, r1
 80047b4:	70fb      	strb	r3, [r7, #3]
  font.setChar( ch ); // select char
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3314      	adds	r3, #20
 80047ba:	78fa      	ldrb	r2, [r7, #3]
 80047bc:	4611      	mov	r1, r2
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff fec5 	bl	800454e <_ZN14cHwDisplayFont7setCharEh>

  setArea( xPos,     // set painting area
           yPos,
           zoom*font.getCharWidth(),
           zoom*font.getCharHeight() + 1 );
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3348      	adds	r3, #72	; 0x48
 80047ca:	681c      	ldr	r4, [r3, #0]
  setArea( xPos,     // set painting area
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	891e      	ldrh	r6, [r3, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8b3 800a 	ldrh.w	r8, [r3, #10]
           zoom*font.getCharWidth(),
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047dc:	b29d      	uxth	r5, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3314      	adds	r3, #20
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff fe99 	bl	800451a <_ZNK14cHwDisplayFont12getCharWidthEv>
 80047e8:	4603      	mov	r3, r0
 80047ea:	b29b      	uxth	r3, r3
  setArea( xPos,     // set painting area
 80047ec:	fb15 f303 	smulbb	r3, r5, r3
 80047f0:	fa1f f983 	uxth.w	r9, r3
           zoom*font.getCharHeight() + 1 );
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047fa:	b29d      	uxth	r5, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3314      	adds	r3, #20
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff fe97 	bl	8004534 <_ZNK14cHwDisplayFont13getCharHeightEv>
 8004806:	4603      	mov	r3, r0
 8004808:	b29b      	uxth	r3, r3
 800480a:	fb15 f303 	smulbb	r3, r5, r3
 800480e:	b29b      	uxth	r3, r3
  setArea( xPos,     // set painting area
 8004810:	3301      	adds	r3, #1
 8004812:	b29b      	uxth	r3, r3
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	464b      	mov	r3, r9
 8004818:	4642      	mov	r2, r8
 800481a:	4631      	mov	r1, r6
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	47a0      	blx	r4

  for( BYTE j = 0; j < font.getCharHeight(); j++ )  // scan vert.
 8004820:	2300      	movs	r3, #0
 8004822:	73fb      	strb	r3, [r7, #15]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3314      	adds	r3, #20
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff fe83 	bl	8004534 <_ZNK14cHwDisplayFont13getCharHeightEv>
 800482e:	4603      	mov	r3, r0
 8004830:	461a      	mov	r2, r3
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	4293      	cmp	r3, r2
 8004836:	bf34      	ite	cc
 8004838:	2301      	movcc	r3, #1
 800483a:	2300      	movcs	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d048      	beq.n	80048d4 <_ZN17cHwDisplayGraphic7putCharEc+0x12c>
  {
     for( BYTE zoomY = 0; zoomY < zoom; zoomY++ )
 8004842:	2300      	movs	r3, #0
 8004844:	73bb      	strb	r3, [r7, #14]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800484c:	7bba      	ldrb	r2, [r7, #14]
 800484e:	429a      	cmp	r2, r3
 8004850:	d23c      	bcs.n	80048cc <_ZN17cHwDisplayGraphic7putCharEc+0x124>
     {
        for( BYTE i = 0 ; i < font.getCharWidth(); i++ ) // scan hor.
 8004852:	2300      	movs	r3, #0
 8004854:	737b      	strb	r3, [r7, #13]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3314      	adds	r3, #20
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff fe5d 	bl	800451a <_ZNK14cHwDisplayFont12getCharWidthEv>
 8004860:	4603      	mov	r3, r0
 8004862:	461a      	mov	r2, r3
 8004864:	7b7b      	ldrb	r3, [r7, #13]
 8004866:	4293      	cmp	r3, r2
 8004868:	bf34      	ite	cc
 800486a:	2301      	movcc	r3, #1
 800486c:	2300      	movcs	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d027      	beq.n	80048c4 <_ZN17cHwDisplayGraphic7putCharEc+0x11c>
        {
          BYTE pixel = font.getPixel(i, j);             // what color?
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3314      	adds	r3, #20
 8004878:	7bfa      	ldrb	r2, [r7, #15]
 800487a:	7b79      	ldrb	r1, [r7, #13]
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff fe91 	bl	80045a4 <_ZN14cHwDisplayFont8getPixelEhh>
 8004882:	4603      	mov	r3, r0
 8004884:	72fb      	strb	r3, [r7, #11]
          for( BYTE zoomX = 0; zoomX < zoom; zoomX++ )
 8004886:	2300      	movs	r3, #0
 8004888:	733b      	strb	r3, [r7, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004890:	7b3a      	ldrb	r2, [r7, #12]
 8004892:	429a      	cmp	r2, r3
 8004894:	d212      	bcs.n	80048bc <_ZN17cHwDisplayGraphic7putCharEc+0x114>
          {
            setPixel( (pixel) ? TextColor : BackColor );
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3350      	adds	r3, #80	; 0x50
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	7afb      	ldrb	r3, [r7, #11]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <_ZN17cHwDisplayGraphic7putCharEc+0x102>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048a8:	e001      	b.n	80048ae <_ZN17cHwDisplayGraphic7putCharEc+0x106>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80048ae:	4619      	mov	r1, r3
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	4790      	blx	r2
          for( BYTE zoomX = 0; zoomX < zoom; zoomX++ )
 80048b4:	7b3b      	ldrb	r3, [r7, #12]
 80048b6:	3301      	adds	r3, #1
 80048b8:	733b      	strb	r3, [r7, #12]
 80048ba:	e7e6      	b.n	800488a <_ZN17cHwDisplayGraphic7putCharEc+0xe2>
        for( BYTE i = 0 ; i < font.getCharWidth(); i++ ) // scan hor.
 80048bc:	7b7b      	ldrb	r3, [r7, #13]
 80048be:	3301      	adds	r3, #1
 80048c0:	737b      	strb	r3, [r7, #13]
 80048c2:	e7c8      	b.n	8004856 <_ZN17cHwDisplayGraphic7putCharEc+0xae>
     for( BYTE zoomY = 0; zoomY < zoom; zoomY++ )
 80048c4:	7bbb      	ldrb	r3, [r7, #14]
 80048c6:	3301      	adds	r3, #1
 80048c8:	73bb      	strb	r3, [r7, #14]
 80048ca:	e7bc      	b.n	8004846 <_ZN17cHwDisplayGraphic7putCharEc+0x9e>
  for( BYTE j = 0; j < font.getCharHeight(); j++ )  // scan vert.
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	3301      	adds	r3, #1
 80048d0:	73fb      	strb	r3, [r7, #15]
 80048d2:	e7a7      	b.n	8004824 <_ZN17cHwDisplayGraphic7putCharEc+0x7c>
          }
        }
     }
  }
  xPos += (WORD)zoom*font.getCharWidth(); // emulate cursor increment
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048da:	461c      	mov	r4, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3314      	adds	r3, #20
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff fe1a 	bl	800451a <_ZNK14cHwDisplayFont12getCharWidthEv>
 80048e6:	4603      	mov	r3, r0
 80048e8:	fb03 f104 	mul.w	r1, r3, r4
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	891a      	ldrh	r2, [r3, #8]
 80048f0:	b28b      	uxth	r3, r1
 80048f2:	4413      	add	r3, r2
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	811a      	strh	r2, [r3, #8]
}
 80048fa:	bf00      	nop
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004904 <_ZN17cHwDisplayGraphic8putPixelEtt>:

//---------------------------------------------------------------
void cHwDisplayGraphic::putPixel( WORD x,
                                  WORD y )
{
 8004904:	b590      	push	{r4, r7, lr}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	807b      	strh	r3, [r7, #2]
 8004910:	4613      	mov	r3, r2
 8004912:	803b      	strh	r3, [r7, #0]
  setPixel( PaintColor, x, y );
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	334c      	adds	r3, #76	; 0x4c
 800491a:	681c      	ldr	r4, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8004920:	883b      	ldrh	r3, [r7, #0]
 8004922:	887a      	ldrh	r2, [r7, #2]
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	47a0      	blx	r4
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	bd90      	pop	{r4, r7, pc}

08004930 <_ZN17cHwDisplayGraphic12putRectangleEtttt>:
//---------------------------------------------------------------
void cHwDisplayGraphic::putRectangle( WORD x,
                                      WORD y,
                                      WORD w,
                                      WORD h )
{
 8004930:	b590      	push	{r4, r7, lr}
 8004932:	b089      	sub	sp, #36	; 0x24
 8004934:	af02      	add	r7, sp, #8
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	4608      	mov	r0, r1
 800493a:	4611      	mov	r1, r2
 800493c:	461a      	mov	r2, r3
 800493e:	4603      	mov	r3, r0
 8004940:	817b      	strh	r3, [r7, #10]
 8004942:	460b      	mov	r3, r1
 8004944:	813b      	strh	r3, [r7, #8]
 8004946:	4613      	mov	r3, r2
 8004948:	80fb      	strh	r3, [r7, #6]
  setArea( x, y, w, h );          // set painting area
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3348      	adds	r3, #72	; 0x48
 8004950:	681c      	ldr	r4, [r3, #0]
 8004952:	88f8      	ldrh	r0, [r7, #6]
 8004954:	893a      	ldrh	r2, [r7, #8]
 8004956:	8979      	ldrh	r1, [r7, #10]
 8004958:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	4603      	mov	r3, r0
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	47a0      	blx	r4

  for( WORD i = 0; i < h; i++ )   // scan vert.
 8004962:	2300      	movs	r3, #0
 8004964:	82fb      	strh	r3, [r7, #22]
 8004966:	8afa      	ldrh	r2, [r7, #22]
 8004968:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800496a:	429a      	cmp	r2, r3
 800496c:	d216      	bcs.n	800499c <_ZN17cHwDisplayGraphic12putRectangleEtttt+0x6c>
  {
    for( WORD j = 0; j < w; j++ ) // scan hor.
 800496e:	2300      	movs	r3, #0
 8004970:	82bb      	strh	r3, [r7, #20]
 8004972:	8aba      	ldrh	r2, [r7, #20]
 8004974:	88fb      	ldrh	r3, [r7, #6]
 8004976:	429a      	cmp	r2, r3
 8004978:	d20c      	bcs.n	8004994 <_ZN17cHwDisplayGraphic12putRectangleEtttt+0x64>
    {
      setPixel( PaintColor );     // draw pixel
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3350      	adds	r3, #80	; 0x50
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004986:	4611      	mov	r1, r2
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	4798      	blx	r3
    for( WORD j = 0; j < w; j++ ) // scan hor.
 800498c:	8abb      	ldrh	r3, [r7, #20]
 800498e:	3301      	adds	r3, #1
 8004990:	82bb      	strh	r3, [r7, #20]
 8004992:	e7ee      	b.n	8004972 <_ZN17cHwDisplayGraphic12putRectangleEtttt+0x42>
  for( WORD i = 0; i < h; i++ )   // scan vert.
 8004994:	8afb      	ldrh	r3, [r7, #22]
 8004996:	3301      	adds	r3, #1
 8004998:	82fb      	strh	r3, [r7, #22]
 800499a:	e7e4      	b.n	8004966 <_ZN17cHwDisplayGraphic12putRectangleEtttt+0x36>
    }
  }
}
 800499c:	bf00      	nop
 800499e:	371c      	adds	r7, #28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd90      	pop	{r4, r7, pc}

080049a4 <_ZN17cHwDisplayGraphic9putBitmapEttttPKt>:
void cHwDisplayGraphic::putBitmap( WORD        x,
                                   WORD        y,
                                   WORD        w,
                                   WORD        h,
                                   const WORD *bitmap )
{
 80049a4:	b590      	push	{r4, r7, lr}
 80049a6:	b089      	sub	sp, #36	; 0x24
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	4608      	mov	r0, r1
 80049ae:	4611      	mov	r1, r2
 80049b0:	461a      	mov	r2, r3
 80049b2:	4603      	mov	r3, r0
 80049b4:	817b      	strh	r3, [r7, #10]
 80049b6:	460b      	mov	r3, r1
 80049b8:	813b      	strh	r3, [r7, #8]
 80049ba:	4613      	mov	r3, r2
 80049bc:	80fb      	strh	r3, [r7, #6]
  setArea( x, y, w, h );          // set painting area
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3348      	adds	r3, #72	; 0x48
 80049c4:	681c      	ldr	r4, [r3, #0]
 80049c6:	88f8      	ldrh	r0, [r7, #6]
 80049c8:	893a      	ldrh	r2, [r7, #8]
 80049ca:	8979      	ldrh	r1, [r7, #10]
 80049cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	4603      	mov	r3, r0
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	47a0      	blx	r4

  for( WORD i = 0; i < h; i++ )   // scan vert.
 80049d6:	2300      	movs	r3, #0
 80049d8:	82fb      	strh	r3, [r7, #22]
 80049da:	8afa      	ldrh	r2, [r7, #22]
 80049dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80049de:	429a      	cmp	r2, r3
 80049e0:	d218      	bcs.n	8004a14 <_ZN17cHwDisplayGraphic9putBitmapEttttPKt+0x70>
  {
    for( WORD j = 0; j < w; j++ ) // scan hor.
 80049e2:	2300      	movs	r3, #0
 80049e4:	82bb      	strh	r3, [r7, #20]
 80049e6:	8aba      	ldrh	r2, [r7, #20]
 80049e8:	88fb      	ldrh	r3, [r7, #6]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d20e      	bcs.n	8004a0c <_ZN17cHwDisplayGraphic9putBitmapEttttPKt+0x68>
    {
      setPixel( *bitmap++ );      // draw pixel and set to next
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3350      	adds	r3, #80	; 0x50
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	1c99      	adds	r1, r3, #2
 80049fa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	4619      	mov	r1, r3
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	4790      	blx	r2
    for( WORD j = 0; j < w; j++ ) // scan hor.
 8004a04:	8abb      	ldrh	r3, [r7, #20]
 8004a06:	3301      	adds	r3, #1
 8004a08:	82bb      	strh	r3, [r7, #20]
 8004a0a:	e7ec      	b.n	80049e6 <_ZN17cHwDisplayGraphic9putBitmapEttttPKt+0x42>
  for( WORD i = 0; i < h; i++ )   // scan vert.
 8004a0c:	8afb      	ldrh	r3, [r7, #22]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	82fb      	strh	r3, [r7, #22]
 8004a12:	e7e2      	b.n	80049da <_ZN17cHwDisplayGraphic9putBitmapEttttPKt+0x36>
    }
  }
}
 8004a14:	bf00      	nop
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd90      	pop	{r4, r7, pc}

08004a1c <_ZN12cHwI2CmasterC1Eh>:
//
// cHwI2Cmaster
//
//*******************************************************************
//-------------------------------------------------------------------
cHwI2Cmaster::cHwI2Cmaster( BYTE maskIntrIn )
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	70fb      	strb	r3, [r7, #3]
 8004a28:	4a07      	ldr	r2, [pc, #28]	; (8004a48 <_ZN12cHwI2CmasterC1Eh+0x2c>)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	601a      	str	r2, [r3, #0]
{
  isHardwareOK = true;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	711a      	strb	r2, [r3, #4]
  maskIntr     = maskIntrIn;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	78fa      	ldrb	r2, [r7, #3]
 8004a38:	715a      	strb	r2, [r3, #5]
}
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	080076d0 	.word	0x080076d0

08004a4c <_ZN12cHwI2Cmaster6Device4readEv>:

//-------------------------------------------------------------------
BYTE cHwI2Cmaster::Device::read( void )
{
 8004a4c:	b590      	push	{r4, r7, lr}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af02      	add	r7, sp, #8
 8004a52:	6078      	str	r0, [r7, #4]
  BYTE dat = 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	73fb      	strb	r3, [r7, #15]

  isErrorFlag |= i2c.read( hwAddr, NULL, 0, &dat, 1 );
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6858      	ldr	r0, [r3, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3304      	adds	r3, #4
 8004a64:	681c      	ldr	r4, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	7a19      	ldrb	r1, [r3, #8]
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	9301      	str	r3, [sp, #4]
 8004a6e:	f107 030f 	add.w	r3, r7, #15
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	2300      	movs	r3, #0
 8004a76:	2200      	movs	r2, #0
 8004a78:	47a0      	blx	r4
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	7a5b      	ldrb	r3, [r3, #9]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	725a      	strb	r2, [r3, #9]

  return( dat );
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd90      	pop	{r4, r7, pc}

08004a94 <_ZN12cHwI2Cmaster6Device4readEh>:

//-------------------------------------------------------------------
BYTE cHwI2Cmaster::Device::read( BYTE addr )
{
 8004a94:	b590      	push	{r4, r7, lr}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	70fb      	strb	r3, [r7, #3]
  BYTE dat = 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	73fb      	strb	r3, [r7, #15]

  isErrorFlag |= i2c.read( hwAddr, &addr, 1, &dat, 1 );
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6858      	ldr	r0, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3304      	adds	r3, #4
 8004ab0:	681c      	ldr	r4, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	7a19      	ldrb	r1, [r3, #8]
 8004ab6:	1cfa      	adds	r2, r7, #3
 8004ab8:	2301      	movs	r3, #1
 8004aba:	9301      	str	r3, [sp, #4]
 8004abc:	f107 030f 	add.w	r3, r7, #15
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	47a0      	blx	r4
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	461a      	mov	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	7a5b      	ldrb	r3, [r3, #9]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	725a      	strb	r2, [r3, #9]

  return( dat );
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd90      	pop	{r4, r7, pc}

08004ae0 <_ZN12cHwI2Cmaster6Device4readEt>:

//-------------------------------------------------------------------
BYTE cHwI2Cmaster::Device::read( WORD addr )
{
 8004ae0:	b590      	push	{r4, r7, lr}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af02      	add	r7, sp, #8
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	807b      	strh	r3, [r7, #2]
  BYTE dat        = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	73fb      	strb	r3, [r7, #15]
  BYTE addrTmp[2] = { (BYTE)(addr>>8),
 8004af0:	887b      	ldrh	r3, [r7, #2]
 8004af2:	121b      	asrs	r3, r3, #8
                      (BYTE)(addr&0xFF) };
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	733b      	strb	r3, [r7, #12]
 8004af8:	887b      	ldrh	r3, [r7, #2]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	737b      	strb	r3, [r7, #13]

  isErrorFlag |= i2c.read( hwAddr, (BYTE *)&addrTmp, 2, &dat, 1 );
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6858      	ldr	r0, [r3, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3304      	adds	r3, #4
 8004b0a:	681c      	ldr	r4, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	7a19      	ldrb	r1, [r3, #8]
 8004b10:	f107 020c 	add.w	r2, r7, #12
 8004b14:	2301      	movs	r3, #1
 8004b16:	9301      	str	r3, [sp, #4]
 8004b18:	f107 030f 	add.w	r3, r7, #15
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	2302      	movs	r3, #2
 8004b20:	47a0      	blx	r4
 8004b22:	4603      	mov	r3, r0
 8004b24:	461a      	mov	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	7a5b      	ldrb	r3, [r3, #9]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	725a      	strb	r2, [r3, #9]

  return( dat );
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd90      	pop	{r4, r7, pc}

08004b3c <_ZN12cHwI2Cmaster6Device4readEPhh>:

//-------------------------------------------------------------------
void cHwI2Cmaster::Device::read( BYTE *data, BYTE size )
{
 8004b3c:	b590      	push	{r4, r7, lr}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	4613      	mov	r3, r2
 8004b48:	71fb      	strb	r3, [r7, #7]
  isErrorFlag |= i2c.read( hwAddr, NULL, 0, data, size );
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6858      	ldr	r0, [r3, #4]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3304      	adds	r3, #4
 8004b56:	681c      	ldr	r4, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	7a19      	ldrb	r1, [r3, #8]
 8004b5c:	79fb      	ldrb	r3, [r7, #7]
 8004b5e:	9301      	str	r3, [sp, #4]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	2300      	movs	r3, #0
 8004b66:	2200      	movs	r2, #0
 8004b68:	47a0      	blx	r4
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	7a5b      	ldrb	r3, [r3, #9]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	725a      	strb	r2, [r3, #9]
}
 8004b7a:	bf00      	nop
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd90      	pop	{r4, r7, pc}

08004b82 <_ZN12cHwI2Cmaster6Device4readEhPhh>:

//-------------------------------------------------------------------
void cHwI2Cmaster::Device::read( BYTE addr, BYTE *data, BYTE size )
{
 8004b82:	b590      	push	{r4, r7, lr}
 8004b84:	b087      	sub	sp, #28
 8004b86:	af02      	add	r7, sp, #8
 8004b88:	60f8      	str	r0, [r7, #12]
 8004b8a:	607a      	str	r2, [r7, #4]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	460b      	mov	r3, r1
 8004b90:	72fb      	strb	r3, [r7, #11]
 8004b92:	4613      	mov	r3, r2
 8004b94:	72bb      	strb	r3, [r7, #10]
  isErrorFlag |= i2c.read( hwAddr, &addr, 1, data, size );
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6858      	ldr	r0, [r3, #4]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	681c      	ldr	r4, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	7a19      	ldrb	r1, [r3, #8]
 8004ba8:	f107 020b 	add.w	r2, r7, #11
 8004bac:	7abb      	ldrb	r3, [r7, #10]
 8004bae:	9301      	str	r3, [sp, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	47a0      	blx	r4
 8004bb8:	4603      	mov	r3, r0
 8004bba:	461a      	mov	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	7a5b      	ldrb	r3, [r3, #9]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	725a      	strb	r2, [r3, #9]
}
 8004bc8:	bf00      	nop
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd90      	pop	{r4, r7, pc}

08004bd0 <_ZN12cHwI2Cmaster6Device4readEtPhh>:

//-------------------------------------------------------------------
void cHwI2Cmaster::Device::read( WORD addr, BYTE *data, BYTE size )
{
 8004bd0:	b590      	push	{r4, r7, lr}
 8004bd2:	b089      	sub	sp, #36	; 0x24
 8004bd4:	af02      	add	r7, sp, #8
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	607a      	str	r2, [r7, #4]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	460b      	mov	r3, r1
 8004bde:	817b      	strh	r3, [r7, #10]
 8004be0:	4613      	mov	r3, r2
 8004be2:	727b      	strb	r3, [r7, #9]
  BYTE addrTmp[2] = { (BYTE)(addr>>8),
 8004be4:	897b      	ldrh	r3, [r7, #10]
 8004be6:	121b      	asrs	r3, r3, #8
                      (BYTE)(addr&0xFF) };
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	753b      	strb	r3, [r7, #20]
 8004bec:	897b      	ldrh	r3, [r7, #10]
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	757b      	strb	r3, [r7, #21]

  isErrorFlag |= i2c.read( hwAddr, addrTmp, 2, data, size );
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6858      	ldr	r0, [r3, #4]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	681c      	ldr	r4, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	7a19      	ldrb	r1, [r3, #8]
 8004c04:	f107 0214 	add.w	r2, r7, #20
 8004c08:	7a7b      	ldrb	r3, [r7, #9]
 8004c0a:	9301      	str	r3, [sp, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	2302      	movs	r3, #2
 8004c12:	47a0      	blx	r4
 8004c14:	4603      	mov	r3, r0
 8004c16:	461a      	mov	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	7a5b      	ldrb	r3, [r3, #9]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	725a      	strb	r2, [r3, #9]
}
 8004c24:	bf00      	nop
 8004c26:	371c      	adds	r7, #28
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd90      	pop	{r4, r7, pc}

08004c2c <_ZN12cHwI2Cmaster6Device5writeEh>:

//-------------------------------------------------------------------
void cHwI2Cmaster::Device::write( BYTE data )
{
 8004c2c:	b590      	push	{r4, r7, lr}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	70fb      	strb	r3, [r7, #3]
  isErrorFlag |= i2c.write( hwAddr, &data, 1, NULL, 0 );
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6858      	ldr	r0, [r3, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681c      	ldr	r4, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	7a19      	ldrb	r1, [r3, #8]
 8004c48:	1cfa      	adds	r2, r7, #3
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	2301      	movs	r3, #1
 8004c54:	47a0      	blx	r4
 8004c56:	4603      	mov	r3, r0
 8004c58:	461a      	mov	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	7a5b      	ldrb	r3, [r3, #9]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	725a      	strb	r2, [r3, #9]
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd90      	pop	{r4, r7, pc}

08004c6e <_ZN12cHwI2Cmaster6Device5writeEhh>:

//-------------------------------------------------------------------
void cHwI2Cmaster::Device::write( BYTE addr, BYTE data )
{
 8004c6e:	b590      	push	{r4, r7, lr}
 8004c70:	b085      	sub	sp, #20
 8004c72:	af02      	add	r7, sp, #8
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	460b      	mov	r3, r1
 8004c78:	70fb      	strb	r3, [r7, #3]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	70bb      	strb	r3, [r7, #2]
  isErrorFlag |= i2c.write( hwAddr, &addr, 1, &data, 1 );
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6858      	ldr	r0, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681c      	ldr	r4, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	7a19      	ldrb	r1, [r3, #8]
 8004c8e:	1cfa      	adds	r2, r7, #3
 8004c90:	2301      	movs	r3, #1
 8004c92:	9301      	str	r3, [sp, #4]
 8004c94:	1cbb      	adds	r3, r7, #2
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	2301      	movs	r3, #1
 8004c9a:	47a0      	blx	r4
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	7a5b      	ldrb	r3, [r3, #9]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	725a      	strb	r2, [r3, #9]
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd90      	pop	{r4, r7, pc}

08004cb4 <_ZN12cHwI2Cmaster6Device5writeEth>:

//-------------------------------------------------------------------
void cHwI2Cmaster::Device::write( WORD addr, BYTE data )
{
 8004cb4:	b590      	push	{r4, r7, lr}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	807b      	strh	r3, [r7, #2]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	707b      	strb	r3, [r7, #1]
  BYTE addrTmp[2] = { (BYTE)(addr>>8),
 8004cc4:	887b      	ldrh	r3, [r7, #2]
 8004cc6:	121b      	asrs	r3, r3, #8
                      (BYTE)(addr&0xFF) };
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	733b      	strb	r3, [r7, #12]
 8004ccc:	887b      	ldrh	r3, [r7, #2]
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	737b      	strb	r3, [r7, #13]

  isErrorFlag |= i2c.write( hwAddr, (BYTE*)&addrTmp, 2, &data, 1 );
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6858      	ldr	r0, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681c      	ldr	r4, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	7a19      	ldrb	r1, [r3, #8]
 8004ce2:	f107 020c 	add.w	r2, r7, #12
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	9301      	str	r3, [sp, #4]
 8004cea:	1c7b      	adds	r3, r7, #1
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	2302      	movs	r3, #2
 8004cf0:	47a0      	blx	r4
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	7a5b      	ldrb	r3, [r3, #9]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	725a      	strb	r2, [r3, #9]
}
 8004d02:	bf00      	nop
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd90      	pop	{r4, r7, pc}

08004d0a <_ZN12cHwI2Cmaster6Device5writeEPhh>:

//-------------------------------------------------------------------
void cHwI2Cmaster::Device::write( BYTE *data, BYTE size )
{
 8004d0a:	b590      	push	{r4, r7, lr}
 8004d0c:	b087      	sub	sp, #28
 8004d0e:	af02      	add	r7, sp, #8
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	4613      	mov	r3, r2
 8004d16:	71fb      	strb	r3, [r7, #7]
  isErrorFlag |= i2c.write( hwAddr, data, size, NULL, 0 );
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6858      	ldr	r0, [r3, #4]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681c      	ldr	r4, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	7a19      	ldrb	r1, [r3, #8]
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	9201      	str	r2, [sp, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	9200      	str	r2, [sp, #0]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	47a0      	blx	r4
 8004d36:	4603      	mov	r3, r0
 8004d38:	461a      	mov	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	7a5b      	ldrb	r3, [r3, #9]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	725a      	strb	r2, [r3, #9]
}
 8004d46:	bf00      	nop
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd90      	pop	{r4, r7, pc}

08004d4e <_ZN12cHwI2Cmaster6Device5writeEhPhh>:

//-------------------------------------------------------------------
void cHwI2Cmaster::Device::write( BYTE addr, BYTE *data, BYTE size )
{
 8004d4e:	b590      	push	{r4, r7, lr}
 8004d50:	b087      	sub	sp, #28
 8004d52:	af02      	add	r7, sp, #8
 8004d54:	60f8      	str	r0, [r7, #12]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	72fb      	strb	r3, [r7, #11]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	72bb      	strb	r3, [r7, #10]
  isErrorFlag |= i2c.write( hwAddr, &addr, 1, data, size );
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6858      	ldr	r0, [r3, #4]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681c      	ldr	r4, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	7a19      	ldrb	r1, [r3, #8]
 8004d72:	f107 020b 	add.w	r2, r7, #11
 8004d76:	7abb      	ldrb	r3, [r7, #10]
 8004d78:	9301      	str	r3, [sp, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	2301      	movs	r3, #1
 8004d80:	47a0      	blx	r4
 8004d82:	4603      	mov	r3, r0
 8004d84:	461a      	mov	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	7a5b      	ldrb	r3, [r3, #9]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	725a      	strb	r2, [r3, #9]
}
 8004d92:	bf00      	nop
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd90      	pop	{r4, r7, pc}

08004d9a <_ZN12cHwI2Cmaster6Device5writeEtPhh>:

//-------------------------------------------------------------------
void cHwI2Cmaster::Device::write( WORD addr, BYTE *data, BYTE size )
{
 8004d9a:	b590      	push	{r4, r7, lr}
 8004d9c:	b089      	sub	sp, #36	; 0x24
 8004d9e:	af02      	add	r7, sp, #8
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	461a      	mov	r2, r3
 8004da6:	460b      	mov	r3, r1
 8004da8:	817b      	strh	r3, [r7, #10]
 8004daa:	4613      	mov	r3, r2
 8004dac:	727b      	strb	r3, [r7, #9]
  BYTE addrTmp[2] = { (BYTE)(addr>>8),
 8004dae:	897b      	ldrh	r3, [r7, #10]
 8004db0:	121b      	asrs	r3, r3, #8
                      (BYTE)(addr&0xFF) };
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	753b      	strb	r3, [r7, #20]
 8004db6:	897b      	ldrh	r3, [r7, #10]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	757b      	strb	r3, [r7, #21]

  isErrorFlag |= i2c.write( hwAddr, addrTmp, 2, data, size );
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6858      	ldr	r0, [r3, #4]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681c      	ldr	r4, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	7a19      	ldrb	r1, [r3, #8]
 8004dcc:	f107 0214 	add.w	r2, r7, #20
 8004dd0:	7a7b      	ldrb	r3, [r7, #9]
 8004dd2:	9301      	str	r3, [sp, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	2302      	movs	r3, #2
 8004dda:	47a0      	blx	r4
 8004ddc:	4603      	mov	r3, r0
 8004dde:	461a      	mov	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	7a5b      	ldrb	r3, [r3, #9]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	725a      	strb	r2, [r3, #9]
}
 8004dec:	bf00      	nop
 8004dee:	371c      	adds	r7, #28
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd90      	pop	{r4, r7, pc}

08004df4 <_ZN12cHwI2Cmaster6Device7isErrorEv>:

//-------------------------------------------------------------------
BYTE cHwI2Cmaster::Device::isError( void )
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  BYTE ret = isErrorFlag;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	7a5b      	ldrb	r3, [r3, #9]
 8004e00:	73fb      	strb	r3, [r7, #15]

  isErrorFlag = false;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	725a      	strb	r2, [r3, #9]

  return( ret );
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <_ZN12cHwI2Cmaster5writeEhPhhS0_h>:
BYTE cHwI2Cmaster::write( BYTE  hwAddr,
                          BYTE *adr,
                          BYTE  sizeAdr,
                          BYTE *data,
                          BYTE  sizeData )
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b086      	sub	sp, #24
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	461a      	mov	r2, r3
 8004e22:	460b      	mov	r3, r1
 8004e24:	72fb      	strb	r3, [r7, #11]
 8004e26:	4613      	mov	r3, r2
 8004e28:	72bb      	strb	r3, [r7, #10]

  BYTE i = 0;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	75fb      	strb	r3, [r7, #23]
  isHardwareOK = true;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2201      	movs	r2, #1
 8004e32:	711a      	strb	r2, [r3, #4]

  if( maskIntr )
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	795b      	ldrb	r3, [r3, #5]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <_ZN12cHwI2Cmaster5writeEhPhhS0_h+0x2a>
    cSystem::disableInterrupt();
 8004e3c:	f7fc fe68 	bl	8001b10 <_ZN7cSystem16disableInterruptEv>

  if( sizeAdr || sizeData )
 8004e40:	7abb      	ldrb	r3, [r7, #10]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d103      	bne.n	8004e4e <_ZN12cHwI2Cmaster5writeEhPhhS0_h+0x38>
 8004e46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d038      	beq.n	8004ec0 <_ZN12cHwI2Cmaster5writeEhPhhS0_h+0xaa>
  {
    start();
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3308      	adds	r3, #8
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	4798      	blx	r3
    sendAddr( hwAddr ); // master write
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	3310      	adds	r3, #16
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	7afa      	ldrb	r2, [r7, #11]
 8004e64:	4611      	mov	r1, r2
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	4798      	blx	r3
    for( i=0; i< sizeAdr; i++ )
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	75fb      	strb	r3, [r7, #23]
 8004e6e:	7dfa      	ldrb	r2, [r7, #23]
 8004e70:	7abb      	ldrb	r3, [r7, #10]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d20e      	bcs.n	8004e94 <_ZN12cHwI2Cmaster5writeEhPhhS0_h+0x7e>
    {
       writeByte( adr[i] );
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3314      	adds	r3, #20
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	7dfa      	ldrb	r2, [r7, #23]
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	440a      	add	r2, r1
 8004e84:	7812      	ldrb	r2, [r2, #0]
 8004e86:	4611      	mov	r1, r2
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	4798      	blx	r3
    for( i=0; i< sizeAdr; i++ )
 8004e8c:	7dfb      	ldrb	r3, [r7, #23]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	75fb      	strb	r3, [r7, #23]
 8004e92:	e7ec      	b.n	8004e6e <_ZN12cHwI2Cmaster5writeEhPhhS0_h+0x58>
    }
    for( i=0; i< sizeData; i++ )
 8004e94:	2300      	movs	r3, #0
 8004e96:	75fb      	strb	r3, [r7, #23]
 8004e98:	7dfa      	ldrb	r2, [r7, #23]
 8004e9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d20e      	bcs.n	8004ec0 <_ZN12cHwI2Cmaster5writeEhPhhS0_h+0xaa>
    {
       writeByte( data[i] );
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3314      	adds	r3, #20
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	7dfa      	ldrb	r2, [r7, #23]
 8004eac:	6a39      	ldr	r1, [r7, #32]
 8004eae:	440a      	add	r2, r1
 8004eb0:	7812      	ldrb	r2, [r2, #0]
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	4798      	blx	r3
    for( i=0; i< sizeData; i++ )
 8004eb8:	7dfb      	ldrb	r3, [r7, #23]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	75fb      	strb	r3, [r7, #23]
 8004ebe:	e7eb      	b.n	8004e98 <_ZN12cHwI2Cmaster5writeEhPhhS0_h+0x82>
    }
  }

  stop();
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	330c      	adds	r3, #12
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	4798      	blx	r3

  if( maskIntr )
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	795b      	ldrb	r3, [r3, #5]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <_ZN12cHwI2Cmaster5writeEhPhhS0_h+0xc2>
    cSystem::enableInterrupt();
 8004ed4:	f7fc fe2e 	bl	8001b34 <_ZN7cSystem15enableInterruptEv>


  return( !isHardwareOK );
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	791b      	ldrb	r3, [r3, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	bf0c      	ite	eq
 8004ee0:	2301      	moveq	r3, #1
 8004ee2:	2300      	movne	r3, #0
 8004ee4:	b2db      	uxtb	r3, r3
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <_ZN12cHwI2Cmaster4readEhPhhS0_h>:
BYTE cHwI2Cmaster::read( BYTE  hwAddr,
                         BYTE *adr,
                         BYTE  sizeAdr,
                         BYTE *data,
                         BYTE  sizeData )
{
 8004eee:	b590      	push	{r4, r7, lr}
 8004ef0:	b087      	sub	sp, #28
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	460b      	mov	r3, r1
 8004efc:	72fb      	strb	r3, [r7, #11]
 8004efe:	4613      	mov	r3, r2
 8004f00:	72bb      	strb	r3, [r7, #10]
  BYTE i = 0;
 8004f02:	2300      	movs	r3, #0
 8004f04:	75fb      	strb	r3, [r7, #23]

  isHardwareOK = true;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	711a      	strb	r2, [r3, #4]

  if( maskIntr )
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	795b      	ldrb	r3, [r3, #5]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <_ZN12cHwI2Cmaster4readEhPhhS0_h+0x2a>
    cSystem::disableInterrupt();
 8004f14:	f7fc fdfc 	bl	8001b10 <_ZN7cSystem16disableInterruptEv>

  if( sizeAdr )
 8004f18:	7abb      	ldrb	r3, [r7, #10]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d022      	beq.n	8004f64 <_ZN12cHwI2Cmaster4readEhPhhS0_h+0x76>
  {
    start();
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3308      	adds	r3, #8
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	4798      	blx	r3
    sendAddr( hwAddr ); // master write
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3310      	adds	r3, #16
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	7afa      	ldrb	r2, [r7, #11]
 8004f34:	4611      	mov	r1, r2
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	4798      	blx	r3
    for( i=0; i< sizeAdr; i++ )
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	75fb      	strb	r3, [r7, #23]
 8004f3e:	7dfa      	ldrb	r2, [r7, #23]
 8004f40:	7abb      	ldrb	r3, [r7, #10]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d20e      	bcs.n	8004f64 <_ZN12cHwI2Cmaster4readEhPhhS0_h+0x76>
    {
       writeByte( adr[i] );
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3314      	adds	r3, #20
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	7dfa      	ldrb	r2, [r7, #23]
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	440a      	add	r2, r1
 8004f54:	7812      	ldrb	r2, [r2, #0]
 8004f56:	4611      	mov	r1, r2
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	4798      	blx	r3
    for( i=0; i< sizeAdr; i++ )
 8004f5c:	7dfb      	ldrb	r3, [r7, #23]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	75fb      	strb	r3, [r7, #23]
 8004f62:	e7ec      	b.n	8004f3e <_ZN12cHwI2Cmaster4readEhPhhS0_h+0x50>
    }
  }

  if( sizeData )
 8004f64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d032      	beq.n	8004fd2 <_ZN12cHwI2Cmaster4readEhPhhS0_h+0xe4>
  {
    start();
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3308      	adds	r3, #8
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	4798      	blx	r3
    sendAddr( hwAddr | 0x01 ); // master read
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3310      	adds	r3, #16
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	7afa      	ldrb	r2, [r7, #11]
 8004f82:	f042 0201 	orr.w	r2, r2, #1
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	4611      	mov	r1, r2
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	4798      	blx	r3
    for( i=0; i < sizeData - 1; i++ )
 8004f8e:	2300      	movs	r3, #0
 8004f90:	75fb      	strb	r3, [r7, #23]
 8004f92:	7dfa      	ldrb	r2, [r7, #23]
 8004f94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	da0e      	bge.n	8004fbc <_ZN12cHwI2Cmaster4readEhPhhS0_h+0xce>
    {
      data[i] = readByteAck();
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3318      	adds	r3, #24
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	7dfa      	ldrb	r2, [r7, #23]
 8004fa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004faa:	188c      	adds	r4, r1, r2
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	4798      	blx	r3
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	7023      	strb	r3, [r4, #0]
    for( i=0; i < sizeData - 1; i++ )
 8004fb4:	7dfb      	ldrb	r3, [r7, #23]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	75fb      	strb	r3, [r7, #23]
 8004fba:	e7ea      	b.n	8004f92 <_ZN12cHwI2Cmaster4readEhPhhS0_h+0xa4>
    }
    data[i] = readByteNack();
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	331c      	adds	r3, #28
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	7dfa      	ldrb	r2, [r7, #23]
 8004fc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fc8:	188c      	adds	r4, r1, r2
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	4798      	blx	r3
 8004fce:	4603      	mov	r3, r0
 8004fd0:	7023      	strb	r3, [r4, #0]
  }

  stop();
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	330c      	adds	r3, #12
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	4798      	blx	r3

  if( maskIntr )
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	795b      	ldrb	r3, [r3, #5]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <_ZN12cHwI2Cmaster4readEhPhhS0_h+0xfc>
    cSystem::enableInterrupt();
 8004fe6:	f7fc fda5 	bl	8001b34 <_ZN7cSystem15enableInterruptEv>

  return( !isHardwareOK );
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	791b      	ldrb	r3, [r3, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	bf0c      	ite	eq
 8004ff2:	2301      	moveq	r3, #1
 8004ff4:	2300      	movne	r3, #0
 8004ff6:	b2db      	uxtb	r3, r3
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd90      	pop	{r4, r7, pc}

08005000 <_ZN7cHwPort3PinC1ERS_h>:
//
// cHwPort::Pin
//
//*******************************************************************
//-------------------------------------------------------------------
cHwPort::Pin::Pin( cHwPort &portIn, BYTE pinIdIn )
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	4613      	mov	r3, r2
 800500c:	71fb      	strb	r3, [r7, #7]

: port( portIn )
 800500e:	4a0c      	ldr	r2, [pc, #48]	; (8005040 <_ZN7cHwPort3PinC1ERS_h+0x40>)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	605a      	str	r2, [r3, #4]

{
  pinId   = pinIdIn;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	79fa      	ldrb	r2, [r7, #7]
 800501e:	721a      	strb	r2, [r3, #8]
  pinMask = (1<<pinId);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	7a1b      	ldrb	r3, [r3, #8]
 8005024:	461a      	mov	r2, r3
 8005026:	2301      	movs	r3, #1
 8005028:	4093      	lsls	r3, r2
 800502a:	461a      	mov	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	60da      	str	r2, [r3, #12]
}
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4618      	mov	r0, r3
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	08007754 	.word	0x08007754

08005044 <_ZN6cHwRTCC1Ev>:
// 
// cHwRTC
//
//*******************************************************************
//-------------------------------------------------------------------
cHwRTC::cHwRTC( void )
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	4a04      	ldr	r2, [pc, #16]	; (8005060 <_ZN6cHwRTCC1Ev+0x1c>)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	601a      	str	r2, [r3, #0]
{
  // nothing to do ...
}
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4618      	mov	r0, r3
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	08007674 	.word	0x08007674

08005064 <_ZN8cHwTimer12getCycleTimeEv>:
// cHwTimer
//
//*******************************************************************
//-------------------------------------------------------------------
DWORD cHwTimer::getCycleTime( void )
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  return( cycleTime );
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
}
 8005070:	4618      	mov	r0, r3
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <_ZN8cHwTimer3addEPN5cList4ItemE>:

//-------------------------------------------------------------------
void cHwTimer::add( cList::Item *ptr )
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  isrList.add( ptr );
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	3308      	adds	r3, #8
 800508a:	6839      	ldr	r1, [r7, #0]
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fde8 	bl	8005c62 <_ZN5cList3addEPNS_4ItemE>
}
 8005092:	bf00      	nop
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <_ZN8cHwTimer10isrHandlerEv>:

//-------------------------------------------------------------------
inline void cHwTimer::isrHandler( void )
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b082      	sub	sp, #8
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  isrList.updateAll();
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	3308      	adds	r3, #8
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fe06 	bl	8005cb8 <_ZN5cList9updateAllEv>
}
 80050ac:	bf00      	nop
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <_ZN7cHwUARTC1Ehh>:
//
// cHwUART
//
//*******************************************************************
//-------------------------------------------------------------------
cHwUART::cHwUART( BYTE sizeRxBuf, BYTE sizeTxBuf )
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	70fb      	strb	r3, [r7, #3]
 80050c0:	4613      	mov	r3, r2
 80050c2:	70bb      	strb	r3, [r7, #2]

: dataRxBuf( sizeRxBuf ), // initialize both FIFOs
  dataTxBuf( sizeTxBuf )
 80050c4:	4a0c      	ldr	r2, [pc, #48]	; (80050f8 <_ZN7cHwUARTC1Ehh+0x44>)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3304      	adds	r3, #4
 80050ce:	78fa      	ldrb	r2, [r7, #3]
 80050d0:	4611      	mov	r1, r2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fe1c 	bl	8005d10 <_ZN5cFifoIhEC1Eh>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	330c      	adds	r3, #12
 80050dc:	78ba      	ldrb	r2, [r7, #2]
 80050de:	4611      	mov	r1, r2
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 fe15 	bl	8005d10 <_ZN5cFifoIhEC1Eh>

{
  txReady = true;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	751a      	strb	r2, [r3, #20]
}
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	08007614 	.word	0x08007614

080050fc <_ZN7cHwUART5isrRxEv>:

//-------------------------------------------------------------------
inline void cHwUART::isrRx( void )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  BYTE data = getByte(); // read data from hardware
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3328      	adds	r3, #40	; 0x28
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	4798      	blx	r3
 8005110:	4603      	mov	r3, r0
 8005112:	73fb      	strb	r3, [r7, #15]

  dataRxBuf << data;     // pipe data into FIFO
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3304      	adds	r3, #4
 8005118:	f107 020f 	add.w	r2, r7, #15
 800511c:	4611      	mov	r1, r2
 800511e:	4618      	mov	r0, r3
 8005120:	f000 fe1a 	bl	8005d58 <_ZN5cFifoIhElsERKh>
}
 8005124:	bf00      	nop
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <_ZN7cHwUART5isrTxEv>:

//-------------------------------------------------------------------
inline void cHwUART::isrTx( void )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  BYTE data = 0;
 8005134:	2300      	movs	r3, #0
 8005136:	73fb      	strb	r3, [r7, #15]

  if( !dataTxBuf.isEmpty() ) // data to been sent?
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	330c      	adds	r3, #12
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fe41 	bl	8005dc4 <_ZN5cFifoIhE7isEmptyEv>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	bf0c      	ite	eq
 8005148:	2301      	moveq	r3, #1
 800514a:	2300      	movne	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d013      	beq.n	800517a <_ZN7cHwUART5isrTxEv+0x4e>
  {
    dataTxBuf >> data;       // read data from FIFO
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	330c      	adds	r3, #12
 8005156:	f107 020f 	add.w	r2, r7, #15
 800515a:	4611      	mov	r1, r2
 800515c:	4618      	mov	r0, r3
 800515e:	f000 fe46 	bl	8005dee <_ZN5cFifoIhErsERh>
    txReady = false;         // set flag before setByte() because
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	751a      	strb	r2, [r3, #20]
                             // some hardware doesn't support
                             // interrupts and isrTx is called recursiv
    setByte( data );         // write data to hardware
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3324      	adds	r3, #36	; 0x24
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	7bfa      	ldrb	r2, [r7, #15]
 8005172:	4611      	mov	r1, r2
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	4798      	blx	r3
  }
  else
  {
    txReady = true;          // we are ready
  }
}
 8005178:	e002      	b.n	8005180 <_ZN7cHwUART5isrTxEv+0x54>
    txReady = true;          // we are ready
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	751a      	strb	r2, [r3, #20]
}
 8005180:	bf00      	nop
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <_ZN7cHwUART12transmitByteEh>:

//-------------------------------------------------------------------
void cHwUART::transmitByte( BYTE data )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	70fb      	strb	r3, [r7, #3]
    isrTx();
  }
//-------------------------------------------------------------
*/

  while( dataTxBuf.isFull() ) // wait until FIFO is ready
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	330c      	adds	r3, #12
 8005198:	4618      	mov	r0, r3
 800519a:	f000 fe5c 	bl	8005e56 <_ZN5cFifoIhE6isFullEv>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	bf14      	ite	ne
 80051a4:	2301      	movne	r3, #1
 80051a6:	2300      	moveq	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <_ZN7cHwUART12transmitByteEh+0x3c>
  {
    if( txReady )             // this case is an error:
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	7d1b      	ldrb	r3, [r3, #20]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d0ee      	beq.n	8005194 <_ZN7cHwUART12transmitByteEh+0xc>
                              //   FIFO is full,
                              //   but isrTx is not running
    {
      isrTx();                // call isrTx explicit
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	331c      	adds	r3, #28
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	4798      	blx	r3
  while( dataTxBuf.isFull() ) // wait until FIFO is ready
 80051c2:	e7e7      	b.n	8005194 <_ZN7cHwUART12transmitByteEh+0xc>
    }
                              // else: Data transfer is running,
                              //       we have to wait until complete
  }

  dataTxBuf << data;          // pipe data into FIFO
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	330c      	adds	r3, #12
 80051c8:	1cfa      	adds	r2, r7, #3
 80051ca:	4611      	mov	r1, r2
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 fdc3 	bl	8005d58 <_ZN5cFifoIhElsERKh>

  if( txReady )               // at first time, isrTx has to be
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	7d1b      	ldrb	r3, [r3, #20]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d005      	beq.n	80051e6 <_ZN7cHwUART12transmitByteEh+0x5e>
                              // called explicit without interrupt
  {
    isrTx();
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	331c      	adds	r3, #28
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	4798      	blx	r3
  }
}
 80051e6:	bf00      	nop
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <_ZN7cHwUART3setEh>:

//-------------------------------------------------------------------
void cHwUART::set( BYTE data )
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b082      	sub	sp, #8
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
 80051f6:	460b      	mov	r3, r1
 80051f8:	70fb      	strb	r3, [r7, #3]
  transmitByte( data );
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3320      	adds	r3, #32
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	78fa      	ldrb	r2, [r7, #3]
 8005204:	4611      	mov	r1, r2
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	4798      	blx	r3
}
 800520a:	bf00      	nop
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <_ZN7cHwUART3setEPKhh>:

//-------------------------------------------------------------------
void cHwUART::set( const BYTE *data, BYTE length )
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b084      	sub	sp, #16
 8005216:	af00      	add	r7, sp, #0
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	4613      	mov	r3, r2
 800521e:	71fb      	strb	r3, [r7, #7]
  while( length-- )
 8005220:	79fb      	ldrb	r3, [r7, #7]
 8005222:	1e5a      	subs	r2, r3, #1
 8005224:	71fa      	strb	r2, [r7, #7]
 8005226:	2b00      	cmp	r3, #0
 8005228:	bf14      	ite	ne
 800522a:	2301      	movne	r3, #1
 800522c:	2300      	moveq	r3, #0
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00b      	beq.n	800524c <_ZN7cHwUART3setEPKhh+0x3a>
  {
    transmitByte( *(data++ ) ); // put a character and set pointer to next
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3320      	adds	r3, #32
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	1c59      	adds	r1, r3, #1
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	4619      	mov	r1, r3
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	4790      	blx	r2
  while( length-- )
 800524a:	e7e9      	b.n	8005220 <_ZN7cHwUART3setEPKhh+0xe>
  }
}
 800524c:	bf00      	nop
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <_ZN7cHwUART3setEPKc>:

//-------------------------------------------------------------------
void cHwUART::set( const char *str )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  while( *str )       // until end of null terminated string
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00b      	beq.n	800527e <_ZN7cHwUART3setEPKc+0x2a>
  {
    transmitByte( *(str++ ) ); // put a character and set pointer to next
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3320      	adds	r3, #32
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	1c59      	adds	r1, r3, #1
 8005272:	6039      	str	r1, [r7, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	4619      	mov	r1, r3
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	4790      	blx	r2
  while( *str )       // until end of null terminated string
 800527c:	e7ef      	b.n	800525e <_ZN7cHwUART3setEPKc+0xa>
  }
}
 800527e:	bf00      	nop
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <_ZN7cHwUART14isTxBufferFullEv>:
//-------------------------------------------------------------------
inline bool cHwUART::isTxBufferFull( void )
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  return( dataTxBuf.isFull() );
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	330c      	adds	r3, #12
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fddf 	bl	8005e56 <_ZN5cFifoIhE6isFullEv>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	bf14      	ite	ne
 800529e:	2301      	movne	r3, #1
 80052a0:	2300      	moveq	r3, #0
 80052a2:	b2db      	uxtb	r3, r3
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <_ZN7cHwUART3getEPh>:

//-------------------------------------------------------------------
bool cHwUART::get( BYTE *data )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  BYTE tmp = 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	73fb      	strb	r3, [r7, #15]

  if( dataRxBuf >> tmp )   // is there a data byte in the FIFO?
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3304      	adds	r3, #4
 80052be:	f107 020f 	add.w	r2, r7, #15
 80052c2:	4611      	mov	r1, r2
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 fd92 	bl	8005dee <_ZN5cFifoIhErsERh>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	bf14      	ite	ne
 80052d0:	2301      	movne	r3, #1
 80052d2:	2300      	moveq	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d004      	beq.n	80052e4 <_ZN7cHwUART3getEPh+0x38>
  {
    *data = tmp;           // copy data byte to pointer
 80052da:	7bfa      	ldrb	r2, [r7, #15]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	701a      	strb	r2, [r3, #0]
    return( true );        // yes, we received a data byte
 80052e0:	2301      	movs	r3, #1
 80052e2:	e000      	b.n	80052e6 <_ZN7cHwUART3getEPh+0x3a>
  }
  else
  {
    return( false );       // no data byte received
 80052e4:	2300      	movs	r3, #0
  }
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <_ZN7cHwUART3getEv>:

//-------------------------------------------------------------------
BYTE cHwUART::get( void )
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b084      	sub	sp, #16
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  BYTE tmp = 0;
 80052f6:	2300      	movs	r3, #0
 80052f8:	73fb      	strb	r3, [r7, #15]

  if( get( &tmp) )   // is there a data byte in the FIFO?
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3310      	adds	r3, #16
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f107 020f 	add.w	r2, r7, #15
 8005306:	4611      	mov	r1, r2
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	4798      	blx	r3
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <_ZN7cHwUART3getEv+0x28>
  {
    return( tmp );        // yes, we received a data byte
 8005312:	7bfb      	ldrb	r3, [r7, #15]
 8005314:	e000      	b.n	8005318 <_ZN7cHwUART3getEv+0x2a>
  }
  else
  {
    return( 0 );         // no data byte received
 8005316:	2300      	movs	r3, #0
  }
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <_ZN11cDevDisplayC1Ev>:
//
// cDevDisplay
//
//*******************************************************************
//-------------------------------------------------------------------
cDevDisplay::cDevDisplay( void )
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	4a04      	ldr	r2, [pc, #16]	; (800533c <_ZN11cDevDisplayC1Ev+0x1c>)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	601a      	str	r2, [r3, #0]
{
}
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4618      	mov	r0, r3
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	080075cc 	.word	0x080075cc

08005340 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	ed87 0a01 	vstr	s0, [r7, #4]
 800534a:	ed97 0a01 	vldr	s0, [r7, #4]
 800534e:	f001 fa87 	bl	8006860 <sqrtf>
 8005352:	eef0 7a40 	vmov.f32	s15, s0
 8005356:	eeb0 0a67 	vmov.f32	s0, s15
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <_ZN18cDevDisplayGraphicC1ER17cHwDisplayGraphic>:
//
// cDevDisplayGraphic
//
//*******************************************************************
//-------------------------------------------------------------------
cDevDisplayGraphic::cDevDisplayGraphic( cHwDisplayGraphic &displayIn )
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]

: display( displayIn )
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff ffd7 	bl	8005320 <_ZN11cDevDisplayC1Ev>
 8005372:	4a07      	ldr	r2, [pc, #28]	; (8005390 <_ZN18cDevDisplayGraphicC1ER17cHwDisplayGraphic+0x30>)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	605a      	str	r2, [r3, #4]

{
  clear();
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f808 	bl	8005394 <_ZN18cDevDisplayGraphic5clearEv>
}
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4618      	mov	r0, r3
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	08007508 	.word	0x08007508

08005394 <_ZN18cDevDisplayGraphic5clearEv>:

//-------------------------------------------------------------------
void cDevDisplayGraphic::clear( void )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  //! \todo which color?
  display.clear();
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	461a      	mov	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4610      	mov	r0, r2
 80053ac:	4798      	blx	r3
}
 80053ae:	bf00      	nop
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <_ZN18cDevDisplayGraphic7refreshEv>:

//-------------------------------------------------------------------
void cDevDisplayGraphic::refresh( void )
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b082      	sub	sp, #8
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  display.refresh();
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3304      	adds	r3, #4
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4610      	mov	r0, r2
 80053ce:	4798      	blx	r3
}
 80053d0:	bf00      	nop
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <_ZN18cDevDisplayGraphic6printfEhhhPKcz>:
void cDevDisplayGraphic::printf( BYTE        line,
                                 BYTE        column,
                                 BYTE        minLen,
                                 const char *format,
                                 ... )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08c      	sub	sp, #48	; 0x30
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	4608      	mov	r0, r1
 80053e2:	4611      	mov	r1, r2
 80053e4:	461a      	mov	r2, r3
 80053e6:	4603      	mov	r3, r0
 80053e8:	70fb      	strb	r3, [r7, #3]
 80053ea:	460b      	mov	r3, r1
 80053ec:	70bb      	strb	r3, [r7, #2]
 80053ee:	4613      	mov	r3, r2
 80053f0:	707b      	strb	r3, [r7, #1]

  //! \todo: string-klasse verwenden oder string-Groesse als Parameter/Template?
  char str[31]; // ein paar Zeichen als Reserve

  va_list argzeiger;
  va_start( argzeiger, format );
 80053f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80053f6:	60fb      	str	r3, [r7, #12]
  vsprintf( str, format, argzeiger );
 80053f8:	f107 0310 	add.w	r3, r7, #16
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005400:	4618      	mov	r0, r3
 8005402:	f001 fbeb 	bl	8006bdc <vsiprintf>
  va_end  ( argzeiger );

  display.gotoTextPos( line, column );
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6858      	ldr	r0, [r3, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3308      	adds	r3, #8
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	78ba      	ldrb	r2, [r7, #2]
 8005416:	78f9      	ldrb	r1, [r7, #3]
 8005418:	4798      	blx	r3

  // Zeichenweise an Display uebertragen
  for( i = 0; str[i] != 0; i++ )
 800541a:	2300      	movs	r3, #0
 800541c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005420:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005424:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005428:	4413      	add	r3, r2
 800542a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d015      	beq.n	800545e <_ZN18cDevDisplayGraphic6printfEhhhPKcz+0x86>
  {
    display.putChar( str[i] );
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6858      	ldr	r0, [r3, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	330c      	adds	r3, #12
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005444:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005448:	440a      	add	r2, r1
 800544a:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 800544e:	4611      	mov	r1, r2
 8005450:	4798      	blx	r3
  for( i = 0; str[i] != 0; i++ )
 8005452:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005456:	3301      	adds	r3, #1
 8005458:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800545c:	e7e0      	b.n	8005420 <_ZN18cDevDisplayGraphic6printfEhhhPKcz+0x48>
  }

  // Rest mit Leerzeichen ueberschreiben
  for( /* no init*/ ; i < minLen; i++)
 800545e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005462:	787b      	ldrb	r3, [r7, #1]
 8005464:	429a      	cmp	r2, r3
 8005466:	d20f      	bcs.n	8005488 <_ZN18cDevDisplayGraphic6printfEhhhPKcz+0xb0>
  {
    display.putChar( ' ' );
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	330c      	adds	r3, #12
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2120      	movs	r1, #32
 8005478:	4610      	mov	r0, r2
 800547a:	4798      	blx	r3
  for( /* no init*/ ; i < minLen; i++)
 800547c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005480:	3301      	adds	r3, #1
 8005482:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005486:	e7ea      	b.n	800545e <_ZN18cDevDisplayGraphic6printfEhhhPKcz+0x86>
  }
}
 8005488:	bf00      	nop
 800548a:	3730      	adds	r7, #48	; 0x30
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <_ZN18cDevDisplayGraphic7setFontE14cHwDisplayFonth>:

//-------------------------------------------------------------------
void cDevDisplayGraphic::setFont( cHwDisplayFont font,
                                  BYTE           zoom )
{
 8005490:	b590      	push	{r4, r7, lr}
 8005492:	b087      	sub	sp, #28
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	4638      	mov	r0, r7
 800549a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  display.setFont( font, zoom );
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6858      	ldr	r0, [r3, #4]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3318      	adds	r3, #24
 80054aa:	681c      	ldr	r4, [r3, #0]
 80054ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	463b      	mov	r3, r7
 80054b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054b6:	47a0      	blx	r4
};
 80054b8:	bf00      	nop
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd90      	pop	{r4, r7, pc}

080054c0 <_ZN18cDevDisplayGraphic7setZoomEh>:

//-------------------------------------------------------------------
void cDevDisplayGraphic::setZoom( BYTE zoom )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	460b      	mov	r3, r1
 80054ca:	70fb      	strb	r3, [r7, #3]
  display.setZoom( zoom );
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	331c      	adds	r3, #28
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	78f9      	ldrb	r1, [r7, #3]
 80054dc:	4610      	mov	r0, r2
 80054de:	4798      	blx	r3
};
 80054e0:	bf00      	nop
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <_ZN18cDevDisplayGraphic12setBackColorEt>:

//-------------------------------------------------------------------
void cDevDisplayGraphic::setBackColor( WORD color )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	807b      	strh	r3, [r7, #2]
  display.setBackColor( color );
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3320      	adds	r3, #32
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	8879      	ldrh	r1, [r7, #2]
 8005504:	4610      	mov	r0, r2
 8005506:	4798      	blx	r3
}
 8005508:	bf00      	nop
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <_ZN18cDevDisplayGraphic12setTextColorEt>:

//-------------------------------------------------------------------
void cDevDisplayGraphic::setTextColor( WORD color )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	807b      	strh	r3, [r7, #2]
  display.setTextColor( color );
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3328      	adds	r3, #40	; 0x28
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	8879      	ldrh	r1, [r7, #2]
 800552c:	4610      	mov	r0, r2
 800552e:	4798      	blx	r3
}
 8005530:	bf00      	nop
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <_ZN18cDevDisplayGraphic8drawTextEtthPKcz>:
void cDevDisplayGraphic::drawText( WORD        x,
                                   WORD        y,
                                   BYTE        minLen,
                                   const char *format,
                                   ... )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08e      	sub	sp, #56	; 0x38
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	4608      	mov	r0, r1
 8005542:	4611      	mov	r1, r2
 8005544:	461a      	mov	r2, r3
 8005546:	4603      	mov	r3, r0
 8005548:	817b      	strh	r3, [r7, #10]
 800554a:	460b      	mov	r3, r1
 800554c:	813b      	strh	r3, [r7, #8]
 800554e:	4613      	mov	r3, r2
 8005550:	71fb      	strb	r3, [r7, #7]

  //! \todo: string-klasse verwenden oder string-Groesse als Parameter/Template?
  char str[31]; // ein paar Zeichen als Reserve

  va_list argzeiger;
  va_start( argzeiger, format );
 8005552:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005556:	617b      	str	r3, [r7, #20]
  vsprintf( str, format, argzeiger );
 8005558:	f107 0318 	add.w	r3, r7, #24
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005560:	4618      	mov	r0, r3
 8005562:	f001 fb3b 	bl	8006bdc <vsiprintf>
  va_end  ( argzeiger );

  display.gotoPixelPos( x, y );
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6858      	ldr	r0, [r3, #4]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	332c      	adds	r3, #44	; 0x2c
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	893a      	ldrh	r2, [r7, #8]
 8005576:	8979      	ldrh	r1, [r7, #10]
 8005578:	4798      	blx	r3

  // Zeichenweise an Display uebertragen
  for( i = 0; str[i] != 0; i++ )
 800557a:	2300      	movs	r3, #0
 800557c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005580:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005584:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005588:	4413      	add	r3, r2
 800558a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d015      	beq.n	80055be <_ZN18cDevDisplayGraphic8drawTextEtthPKcz+0x86>
  {
    display.putChar( str[i] );
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6858      	ldr	r0, [r3, #4]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	330c      	adds	r3, #12
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80055a4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80055a8:	440a      	add	r2, r1
 80055aa:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 80055ae:	4611      	mov	r1, r2
 80055b0:	4798      	blx	r3
  for( i = 0; str[i] != 0; i++ )
 80055b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055b6:	3301      	adds	r3, #1
 80055b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80055bc:	e7e0      	b.n	8005580 <_ZN18cDevDisplayGraphic8drawTextEtthPKcz+0x48>
  }

  // Rest mit Leerzeichen ueberschreiben
  for( /*no init*/; i < minLen; i++ )
 80055be:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d20f      	bcs.n	80055e8 <_ZN18cDevDisplayGraphic8drawTextEtthPKcz+0xb0>
  {
    display.putChar( ' ' );
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	330c      	adds	r3, #12
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2120      	movs	r1, #32
 80055d8:	4610      	mov	r0, r2
 80055da:	4798      	blx	r3
  for( /*no init*/; i < minLen; i++ )
 80055dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055e0:	3301      	adds	r3, #1
 80055e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80055e6:	e7ea      	b.n	80055be <_ZN18cDevDisplayGraphic8drawTextEtthPKcz+0x86>
  }
}
 80055e8:	bf00      	nop
 80055ea:	3738      	adds	r7, #56	; 0x38
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <_ZN18cDevDisplayGraphic8drawTextEttPKc>:

//-------------------------------------------------------------------
void cDevDisplayGraphic::drawText( WORD        x,
                                   WORD        y,
                                   const char *str )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	607b      	str	r3, [r7, #4]
 80055fa:	460b      	mov	r3, r1
 80055fc:	817b      	strh	r3, [r7, #10]
 80055fe:	4613      	mov	r3, r2
 8005600:	813b      	strh	r3, [r7, #8]
  BYTE i;

  display.gotoPixelPos( x, y );
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6858      	ldr	r0, [r3, #4]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	332c      	adds	r3, #44	; 0x2c
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	893a      	ldrh	r2, [r7, #8]
 8005612:	8979      	ldrh	r1, [r7, #10]
 8005614:	4798      	blx	r3

  // Zeichenweise an Display uebertragen
  for( i = 0; str[i] != 0; i++ )
 8005616:	2300      	movs	r3, #0
 8005618:	75fb      	strb	r3, [r7, #23]
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	4413      	add	r3, r2
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d010      	beq.n	8005648 <_ZN18cDevDisplayGraphic8drawTextEttPKc+0x58>
  {
    display.putChar( str[i] );
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6858      	ldr	r0, [r3, #4]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	330c      	adds	r3, #12
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	7dfa      	ldrb	r2, [r7, #23]
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	440a      	add	r2, r1
 800563a:	7812      	ldrb	r2, [r2, #0]
 800563c:	4611      	mov	r1, r2
 800563e:	4798      	blx	r3
  for( i = 0; str[i] != 0; i++ )
 8005640:	7dfb      	ldrb	r3, [r7, #23]
 8005642:	3301      	adds	r3, #1
 8005644:	75fb      	strb	r3, [r7, #23]
 8005646:	e7e8      	b.n	800561a <_ZN18cDevDisplayGraphic8drawTextEttPKc+0x2a>
  }
}
 8005648:	bf00      	nop
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <_ZN18cDevDisplayGraphic9drawPixelEttt>:

//-------------------------------------------------------------------
void cDevDisplayGraphic::drawPixel( WORD x,
                                    WORD y,
                                    WORD color )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	4608      	mov	r0, r1
 800565a:	4611      	mov	r1, r2
 800565c:	461a      	mov	r2, r3
 800565e:	4603      	mov	r3, r0
 8005660:	817b      	strh	r3, [r7, #10]
 8005662:	460b      	mov	r3, r1
 8005664:	813b      	strh	r3, [r7, #8]
 8005666:	4613      	mov	r3, r2
 8005668:	80fb      	strh	r3, [r7, #6]
   display.setPaintColor( color );
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3324      	adds	r3, #36	; 0x24
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	88f9      	ldrh	r1, [r7, #6]
 800567a:	4610      	mov	r0, r2
 800567c:	4798      	blx	r3
   display.putPixel( x, y );
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6858      	ldr	r0, [r3, #4]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3330      	adds	r3, #48	; 0x30
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	893a      	ldrh	r2, [r7, #8]
 800568e:	8979      	ldrh	r1, [r7, #10]
 8005690:	4798      	blx	r3
}
 8005692:	bf00      	nop
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <_ZN18cDevDisplayGraphic13drawRectangleEttttt>:
void cDevDisplayGraphic::drawRectangle( WORD x,
                                        WORD y,
                                        WORD w,
                                        WORD h,
                                        WORD color )
{
 800569a:	b5b0      	push	{r4, r5, r7, lr}
 800569c:	b086      	sub	sp, #24
 800569e:	af02      	add	r7, sp, #8
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	4608      	mov	r0, r1
 80056a4:	4611      	mov	r1, r2
 80056a6:	461a      	mov	r2, r3
 80056a8:	4603      	mov	r3, r0
 80056aa:	817b      	strh	r3, [r7, #10]
 80056ac:	460b      	mov	r3, r1
 80056ae:	813b      	strh	r3, [r7, #8]
 80056b0:	4613      	mov	r3, r2
 80056b2:	80fb      	strh	r3, [r7, #6]
   display.setPaintColor( color );
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3324      	adds	r3, #36	; 0x24
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80056c4:	4610      	mov	r0, r2
 80056c6:	4798      	blx	r3
   display.putRectangle( x, y, w, h );
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6858      	ldr	r0, [r3, #4]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3334      	adds	r3, #52	; 0x34
 80056d4:	681c      	ldr	r4, [r3, #0]
 80056d6:	88fd      	ldrh	r5, [r7, #6]
 80056d8:	893a      	ldrh	r2, [r7, #8]
 80056da:	8979      	ldrh	r1, [r7, #10]
 80056dc:	8c3b      	ldrh	r3, [r7, #32]
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	462b      	mov	r3, r5
 80056e2:	47a0      	blx	r4
}
 80056e4:	bf00      	nop
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bdb0      	pop	{r4, r5, r7, pc}

080056ec <_ZN18cDevDisplayGraphic9drawFrameEtttttt>:
                                    WORD y,
                                    WORD w,
                                    WORD h,
                                    WORD th,
                                    WORD color )
{
 80056ec:	b590      	push	{r4, r7, lr}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af02      	add	r7, sp, #8
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	4608      	mov	r0, r1
 80056f6:	4611      	mov	r1, r2
 80056f8:	461a      	mov	r2, r3
 80056fa:	4603      	mov	r3, r0
 80056fc:	817b      	strh	r3, [r7, #10]
 80056fe:	460b      	mov	r3, r1
 8005700:	813b      	strh	r3, [r7, #8]
 8005702:	4613      	mov	r3, r2
 8005704:	80fb      	strh	r3, [r7, #6]
  // horizontal
  drawRectangle( x, y     , w, th, color );
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3328      	adds	r3, #40	; 0x28
 800570c:	681c      	ldr	r4, [r3, #0]
 800570e:	88f8      	ldrh	r0, [r7, #6]
 8005710:	893a      	ldrh	r2, [r7, #8]
 8005712:	8979      	ldrh	r1, [r7, #10]
 8005714:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005716:	9301      	str	r3, [sp, #4]
 8005718:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	4603      	mov	r3, r0
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	47a0      	blx	r4
  drawRectangle( x, y+h-th, w, th, color );
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3328      	adds	r3, #40	; 0x28
 8005728:	681c      	ldr	r4, [r3, #0]
 800572a:	893a      	ldrh	r2, [r7, #8]
 800572c:	8c3b      	ldrh	r3, [r7, #32]
 800572e:	4413      	add	r3, r2
 8005730:	b29a      	uxth	r2, r3
 8005732:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	b29a      	uxth	r2, r3
 8005738:	88f8      	ldrh	r0, [r7, #6]
 800573a:	8979      	ldrh	r1, [r7, #10]
 800573c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800573e:	9301      	str	r3, [sp, #4]
 8005740:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	4603      	mov	r3, r0
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	47a0      	blx	r4

  // vertikal
  drawRectangle( x,      y, th, h, color );
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3328      	adds	r3, #40	; 0x28
 8005750:	681c      	ldr	r4, [r3, #0]
 8005752:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8005754:	893a      	ldrh	r2, [r7, #8]
 8005756:	8979      	ldrh	r1, [r7, #10]
 8005758:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800575a:	9301      	str	r3, [sp, #4]
 800575c:	8c3b      	ldrh	r3, [r7, #32]
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	4603      	mov	r3, r0
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	47a0      	blx	r4
  drawRectangle( x+w-th, y, th, h, color );
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3328      	adds	r3, #40	; 0x28
 800576c:	681c      	ldr	r4, [r3, #0]
 800576e:	897a      	ldrh	r2, [r7, #10]
 8005770:	88fb      	ldrh	r3, [r7, #6]
 8005772:	4413      	add	r3, r2
 8005774:	b29a      	uxth	r2, r3
 8005776:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	b299      	uxth	r1, r3
 800577c:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800577e:	893a      	ldrh	r2, [r7, #8]
 8005780:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005782:	9301      	str	r3, [sp, #4]
 8005784:	8c3b      	ldrh	r3, [r7, #32]
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	4603      	mov	r3, r0
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	47a0      	blx	r4
}
 800578e:	bf00      	nop
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	bd90      	pop	{r4, r7, pc}

08005796 <_ZN18cDevDisplayGraphic10drawCircleEtttt>:
//-------------------------------------------------------------------
void cDevDisplayGraphic::drawCircle( WORD x0,
                                     WORD y0,
                                     WORD r,
                                     WORD color )
{
 8005796:	b590      	push	{r4, r7, lr}
 8005798:	b089      	sub	sp, #36	; 0x24
 800579a:	af02      	add	r7, sp, #8
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	4608      	mov	r0, r1
 80057a0:	4611      	mov	r1, r2
 80057a2:	461a      	mov	r2, r3
 80057a4:	4603      	mov	r3, r0
 80057a6:	817b      	strh	r3, [r7, #10]
 80057a8:	460b      	mov	r3, r1
 80057aa:	813b      	strh	r3, [r7, #8]
 80057ac:	4613      	mov	r3, r2
 80057ae:	80fb      	strh	r3, [r7, #6]
  for( WORD x = 0; x <= r; x++ )
 80057b0:	2300      	movs	r3, #0
 80057b2:	82fb      	strh	r3, [r7, #22]
 80057b4:	8afa      	ldrh	r2, [r7, #22]
 80057b6:	88fb      	ldrh	r3, [r7, #6]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d858      	bhi.n	800586e <_ZN18cDevDisplayGraphic10drawCircleEtttt+0xd8>
  {
    int h = (int)sqrt( (float)r*r-(float)x*x );
 80057bc:	88fb      	ldrh	r3, [r7, #6]
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80057c6:	88fb      	ldrh	r3, [r7, #6]
 80057c8:	ee07 3a90 	vmov	s15, r3
 80057cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057d4:	8afb      	ldrh	r3, [r7, #22]
 80057d6:	ee07 3a90 	vmov	s15, r3
 80057da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057de:	8afb      	ldrh	r3, [r7, #22]
 80057e0:	ee07 3a90 	vmov	s15, r3
 80057e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057f0:	eeb0 0a67 	vmov.f32	s0, s15
 80057f4:	f7ff fda4 	bl	8005340 <_ZSt4sqrtf>
 80057f8:	eef0 7a40 	vmov.f32	s15, s0
 80057fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005800:	ee17 3a90 	vmov	r3, s15
 8005804:	613b      	str	r3, [r7, #16]
    drawRectangle( x0+x, y0-h, 1, 2*h, color );
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3328      	adds	r3, #40	; 0x28
 800580c:	681c      	ldr	r4, [r3, #0]
 800580e:	897a      	ldrh	r2, [r7, #10]
 8005810:	8afb      	ldrh	r3, [r7, #22]
 8005812:	4413      	add	r3, r2
 8005814:	b299      	uxth	r1, r3
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	b29b      	uxth	r3, r3
 800581a:	893a      	ldrh	r2, [r7, #8]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	b298      	uxth	r0, r3
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	b29b      	uxth	r3, r3
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	b29b      	uxth	r3, r3
 8005828:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800582a:	9201      	str	r2, [sp, #4]
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	2301      	movs	r3, #1
 8005830:	4602      	mov	r2, r0
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	47a0      	blx	r4
    drawRectangle( x0-x, y0-h, 1, 2*h, color );
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	3328      	adds	r3, #40	; 0x28
 800583c:	681c      	ldr	r4, [r3, #0]
 800583e:	897a      	ldrh	r2, [r7, #10]
 8005840:	8afb      	ldrh	r3, [r7, #22]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	b299      	uxth	r1, r3
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	b29b      	uxth	r3, r3
 800584a:	893a      	ldrh	r2, [r7, #8]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	b298      	uxth	r0, r3
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	b29b      	uxth	r3, r3
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	b29b      	uxth	r3, r3
 8005858:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800585a:	9201      	str	r2, [sp, #4]
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	2301      	movs	r3, #1
 8005860:	4602      	mov	r2, r0
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	47a0      	blx	r4
  for( WORD x = 0; x <= r; x++ )
 8005866:	8afb      	ldrh	r3, [r7, #22]
 8005868:	3301      	adds	r3, #1
 800586a:	82fb      	strh	r3, [r7, #22]
 800586c:	e7a2      	b.n	80057b4 <_ZN18cDevDisplayGraphic10drawCircleEtttt+0x1e>
  }
}
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	bd90      	pop	{r4, r7, pc}

08005876 <_ZN18cDevDisplayGraphic8drawLineEtttttt>:
                                   WORD y0,
                                   WORD x1,
                                   WORD y1,
                                   WORD th,
                                   WORD color )
{
 8005876:	b5b0      	push	{r4, r5, r7, lr}
 8005878:	b08e      	sub	sp, #56	; 0x38
 800587a:	af02      	add	r7, sp, #8
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	4608      	mov	r0, r1
 8005880:	4611      	mov	r1, r2
 8005882:	461a      	mov	r2, r3
 8005884:	4603      	mov	r3, r0
 8005886:	817b      	strh	r3, [r7, #10]
 8005888:	460b      	mov	r3, r1
 800588a:	813b      	strh	r3, [r7, #8]
 800588c:	4613      	mov	r3, r2
 800588e:	80fb      	strh	r3, [r7, #6]
  long t;
  int  x;
  int  y;
  int  dx = (int)x1-x0;
 8005890:	88fa      	ldrh	r2, [r7, #6]
 8005892:	897b      	ldrh	r3, [r7, #10]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	623b      	str	r3, [r7, #32]
  int  dy = (int)y1-y0;
 8005898:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800589c:	893b      	ldrh	r3, [r7, #8]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	61fb      	str	r3, [r7, #28]

  if( dy == 0 ) // horizontal
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d12c      	bne.n	8005902 <_ZN18cDevDisplayGraphic8drawLineEtttttt+0x8c>
  {
    x0 = (x0 < x1) ? x0 : x1;
 80058a8:	897a      	ldrh	r2, [r7, #10]
 80058aa:	88fb      	ldrh	r3, [r7, #6]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d201      	bcs.n	80058b4 <_ZN18cDevDisplayGraphic8drawLineEtttttt+0x3e>
 80058b0:	897b      	ldrh	r3, [r7, #10]
 80058b2:	e000      	b.n	80058b6 <_ZN18cDevDisplayGraphic8drawLineEtttttt+0x40>
 80058b4:	88fb      	ldrh	r3, [r7, #6]
 80058b6:	817b      	strh	r3, [r7, #10]
    y0 = (y0 < y1) ? y0 : y1;
 80058b8:	893a      	ldrh	r2, [r7, #8]
 80058ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80058be:	429a      	cmp	r2, r3
 80058c0:	d201      	bcs.n	80058c6 <_ZN18cDevDisplayGraphic8drawLineEtttttt+0x50>
 80058c2:	893b      	ldrh	r3, [r7, #8]
 80058c4:	e001      	b.n	80058ca <_ZN18cDevDisplayGraphic8drawLineEtttttt+0x54>
 80058c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80058ca:	813b      	strh	r3, [r7, #8]
    drawRectangle( x0, y0-th/2, abs(dx), th, color );
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3328      	adds	r3, #40	; 0x28
 80058d2:	681c      	ldr	r4, [r3, #0]
 80058d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80058d8:	085b      	lsrs	r3, r3, #1
 80058da:	b29b      	uxth	r3, r3
 80058dc:	893a      	ldrh	r2, [r7, #8]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	bfb8      	it	lt
 80058e8:	425b      	neglt	r3, r3
 80058ea:	b298      	uxth	r0, r3
 80058ec:	8979      	ldrh	r1, [r7, #10]
 80058ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80058f2:	9301      	str	r3, [sp, #4]
 80058f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	4603      	mov	r3, r0
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	47a0      	blx	r4
      {
        drawPixel( x, y+i, color );
      }
    }
  }
}
 8005900:	e0b5      	b.n	8005a6e <_ZN18cDevDisplayGraphic8drawLineEtttttt+0x1f8>
  else if( dx == 0 ) // vertikal
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d12d      	bne.n	8005964 <_ZN18cDevDisplayGraphic8drawLineEtttttt+0xee>
    x0 = (x0 < x1) ? x0 : x1;
 8005908:	897a      	ldrh	r2, [r7, #10]
 800590a:	88fb      	ldrh	r3, [r7, #6]
 800590c:	429a      	cmp	r2, r3
 800590e:	d201      	bcs.n	8005914 <_ZN18cDevDisplayGraphic8drawLineEtttttt+0x9e>
 8005910:	897b      	ldrh	r3, [r7, #10]
 8005912:	e000      	b.n	8005916 <_ZN18cDevDisplayGraphic8drawLineEtttttt+0xa0>
 8005914:	88fb      	ldrh	r3, [r7, #6]
 8005916:	817b      	strh	r3, [r7, #10]
    y0 = (y0 < y1) ? y0 : y1;
 8005918:	893a      	ldrh	r2, [r7, #8]
 800591a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800591e:	429a      	cmp	r2, r3
 8005920:	d201      	bcs.n	8005926 <_ZN18cDevDisplayGraphic8drawLineEtttttt+0xb0>
 8005922:	893b      	ldrh	r3, [r7, #8]
 8005924:	e001      	b.n	800592a <_ZN18cDevDisplayGraphic8drawLineEtttttt+0xb4>
 8005926:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800592a:	813b      	strh	r3, [r7, #8]
    drawRectangle(x0-th/2, y0, th, abs(dy), color );
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3328      	adds	r3, #40	; 0x28
 8005932:	681c      	ldr	r4, [r3, #0]
 8005934:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005938:	085b      	lsrs	r3, r3, #1
 800593a:	b29b      	uxth	r3, r3
 800593c:	897a      	ldrh	r2, [r7, #10]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	b299      	uxth	r1, r3
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	2b00      	cmp	r3, #0
 8005946:	bfb8      	it	lt
 8005948:	425b      	neglt	r3, r3
 800594a:	b29b      	uxth	r3, r3
 800594c:	f8b7 5044 	ldrh.w	r5, [r7, #68]	; 0x44
 8005950:	8938      	ldrh	r0, [r7, #8]
 8005952:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005956:	9201      	str	r2, [sp, #4]
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	462b      	mov	r3, r5
 800595c:	4602      	mov	r2, r0
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	47a0      	blx	r4
}
 8005962:	e084      	b.n	8005a6e <_ZN18cDevDisplayGraphic8drawLineEtttttt+0x1f8>
  else if( abs(dx) <= abs(dy) )
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800596a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	2b00      	cmp	r3, #0
 8005972:	bfb8      	it	lt
 8005974:	425b      	neglt	r3, r3
 8005976:	429a      	cmp	r2, r3
 8005978:	dc3c      	bgt.n	80059f4 <_ZN18cDevDisplayGraphic8drawLineEtttttt+0x17e>
    for( t = abs(dy); t >= 0; t-- )  // t = 1 downto 0
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	2b00      	cmp	r3, #0
 800597e:	bfb8      	it	lt
 8005980:	425b      	neglt	r3, r3
 8005982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005986:	2b00      	cmp	r3, #0
 8005988:	db71      	blt.n	8005a6e <_ZN18cDevDisplayGraphic8drawLineEtttttt+0x1f8>
      x = x0 + t*dx/abs(dy);         // x = x0+dx downto x0
 800598a:	897a      	ldrh	r2, [r7, #10]
 800598c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598e:	6a39      	ldr	r1, [r7, #32]
 8005990:	fb01 f103 	mul.w	r1, r1, r3
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	2b00      	cmp	r3, #0
 8005998:	bfb8      	it	lt
 800599a:	425b      	neglt	r3, r3
 800599c:	fb91 f3f3 	sdiv	r3, r1, r3
 80059a0:	4413      	add	r3, r2
 80059a2:	61bb      	str	r3, [r7, #24]
      y = y0 + ( (dy>0) ? +t : -t ); // y = y0+dy downto y0
 80059a4:	893a      	ldrh	r2, [r7, #8]
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	dc02      	bgt.n	80059b2 <_ZN18cDevDisplayGraphic8drawLineEtttttt+0x13c>
 80059ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ae:	425b      	negs	r3, r3
 80059b0:	e000      	b.n	80059b4 <_ZN18cDevDisplayGraphic8drawLineEtttttt+0x13e>
 80059b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b4:	4413      	add	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]
      for( int i = th; i >= 0; i-- )
 80059b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80059bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80059be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	db13      	blt.n	80059ec <_ZN18cDevDisplayGraphic8drawLineEtttttt+0x176>
        drawPixel( x+i, y, color );
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3324      	adds	r3, #36	; 0x24
 80059ca:	681c      	ldr	r4, [r3, #0]
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	4413      	add	r3, r2
 80059d6:	b299      	uxth	r1, r3
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	b29a      	uxth	r2, r3
 80059dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	47a0      	blx	r4
      for( int i = th; i >= 0; i-- )
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	3b01      	subs	r3, #1
 80059e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80059ea:	e7e8      	b.n	80059be <_ZN18cDevDisplayGraphic8drawLineEtttttt+0x148>
    for( t = abs(dy); t >= 0; t-- )  // t = 1 downto 0
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	3b01      	subs	r3, #1
 80059f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059f2:	e7c7      	b.n	8005984 <_ZN18cDevDisplayGraphic8drawLineEtttttt+0x10e>
    for( t = abs(dx); t >= 0; t-- )  // t = 1 downto 0
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	bfb8      	it	lt
 80059fa:	425b      	neglt	r3, r3
 80059fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	db34      	blt.n	8005a6e <_ZN18cDevDisplayGraphic8drawLineEtttttt+0x1f8>
      x = x0 + ( (dx>0) ? +t : -t ); // x = x0+dx downto x0
 8005a04:	897a      	ldrh	r2, [r7, #10]
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	dc02      	bgt.n	8005a12 <_ZN18cDevDisplayGraphic8drawLineEtttttt+0x19c>
 8005a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0e:	425b      	negs	r3, r3
 8005a10:	e000      	b.n	8005a14 <_ZN18cDevDisplayGraphic8drawLineEtttttt+0x19e>
 8005a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a14:	4413      	add	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
      y = y0 + t*dy/abs(dx);         // y = y0+dy downto y0
 8005a18:	893a      	ldrh	r2, [r7, #8]
 8005a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1c:	69f9      	ldr	r1, [r7, #28]
 8005a1e:	fb01 f103 	mul.w	r1, r1, r3
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	bfb8      	it	lt
 8005a28:	425b      	neglt	r3, r3
 8005a2a:	fb91 f3f3 	sdiv	r3, r1, r3
 8005a2e:	4413      	add	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]
      for( int i = th; i >= 0; i-- )
 8005a32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005a36:	627b      	str	r3, [r7, #36]	; 0x24
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	db13      	blt.n	8005a66 <_ZN18cDevDisplayGraphic8drawLineEtttttt+0x1f0>
        drawPixel( x, y+i, color );
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3324      	adds	r3, #36	; 0x24
 8005a44:	681c      	ldr	r4, [r3, #0]
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	b299      	uxth	r1, r3
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	4413      	add	r3, r2
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	47a0      	blx	r4
      for( int i = th; i >= 0; i-- )
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	3b01      	subs	r3, #1
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
 8005a64:	e7e8      	b.n	8005a38 <_ZN18cDevDisplayGraphic8drawLineEtttttt+0x1c2>
    for( t = abs(dx); t >= 0; t-- )  // t = 1 downto 0
 8005a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a6c:	e7c7      	b.n	80059fe <_ZN18cDevDisplayGraphic8drawLineEtttttt+0x188>
}
 8005a6e:	bf00      	nop
 8005a70:	3730      	adds	r7, #48	; 0x30
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bdb0      	pop	{r4, r5, r7, pc}

08005a76 <_ZN18cDevDisplayGraphic10drawBitmapEttttPKt>:
void cDevDisplayGraphic::drawBitmap( WORD        x,
                                     WORD        y,
                                     WORD        w,
                                     WORD        h,
                                     const WORD *bitmap )
{
 8005a76:	b5b0      	push	{r4, r5, r7, lr}
 8005a78:	b086      	sub	sp, #24
 8005a7a:	af02      	add	r7, sp, #8
 8005a7c:	60f8      	str	r0, [r7, #12]
 8005a7e:	4608      	mov	r0, r1
 8005a80:	4611      	mov	r1, r2
 8005a82:	461a      	mov	r2, r3
 8005a84:	4603      	mov	r3, r0
 8005a86:	817b      	strh	r3, [r7, #10]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	813b      	strh	r3, [r7, #8]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	80fb      	strh	r3, [r7, #6]
  display.putBitmap( x, y, w, h, bitmap );
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6858      	ldr	r0, [r3, #4]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	3338      	adds	r3, #56	; 0x38
 8005a9c:	681c      	ldr	r4, [r3, #0]
 8005a9e:	88fd      	ldrh	r5, [r7, #6]
 8005aa0:	893a      	ldrh	r2, [r7, #8]
 8005aa2:	8979      	ldrh	r1, [r7, #10]
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	9301      	str	r3, [sp, #4]
 8005aa8:	8c3b      	ldrh	r3, [r7, #32]
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	462b      	mov	r3, r5
 8005aae:	47a0      	blx	r4
}
 8005ab0:	bf00      	nop
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bdb0      	pop	{r4, r5, r7, pc}

08005ab8 <_ZN18cDevDisplayGraphic14getDefaultFontEv>:

//-------------------------------------------------------------------
cHwDisplayFont cDevDisplayGraphic::getDefaultFont( void )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  return( display.getDefaultFont() );
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	6859      	ldr	r1, [r3, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	333c      	adds	r3, #60	; 0x3c
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	4798      	blx	r3
 8005ad6:	bf00      	nop
}
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <_ZN10cDevTextIOC1EhhPKcS1_>:
//
// cDevTextIO
//
//*******************************************************************
//-------------------------------------------------------------------
cDevTextIO::cDevTextIO( BYTE        inBufSizeIn,
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	607b      	str	r3, [r7, #4]
 8005aea:	460b      	mov	r3, r1
 8005aec:	72fb      	strb	r3, [r7, #11]
 8005aee:	4613      	mov	r3, r2
 8005af0:	72bb      	strb	r3, [r7, #10]
                        BYTE        outBufSizeIn,
                        const char *eosIn,
                        const char *keyIn )
 8005af2:	4a18      	ldr	r2, [pc, #96]	; (8005b54 <_ZN10cDevTextIOC1EhhPKcS1_+0x74>)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	601a      	str	r2, [r3, #0]
{
  inBufSize  = inBufSizeIn;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	7afa      	ldrb	r2, [r7, #11]
 8005afc:	731a      	strb	r2, [r3, #12]
  outBufSize = outBufSizeIn;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	7aba      	ldrb	r2, [r7, #10]
 8005b02:	735a      	strb	r2, [r3, #13]
  strIn      = new char[ inBufSize + 1];
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	7b1b      	ldrb	r3, [r3, #12]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fb fe60 	bl	80017d0 <_Znaj>
 8005b10:	4603      	mov	r3, r0
 8005b12:	461a      	mov	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	605a      	str	r2, [r3, #4]
  strOut     = new char[outBufSize + 1];
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	7b5b      	ldrb	r3, [r3, #13]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fb fe56 	bl	80017d0 <_Znaj>
 8005b24:	4603      	mov	r3, r0
 8005b26:	461a      	mov	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	609a      	str	r2, [r3, #8]
  idx        = 0;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	739a      	strb	r2, [r3, #14]
  eos        = eosIn;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	611a      	str	r2, [r3, #16]
  key        = keyIn;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	615a      	str	r2, [r3, #20]
  escape     = 0;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	761a      	strb	r2, [r3, #24]
  last       = 0;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	765a      	strb	r2, [r3, #25]
}
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	080074f4 	.word	0x080074f4

08005b58 <_ZN10cDevTextIO6printfEPKcz>:
  return( NULL );
}

//-------------------------------------------------------------------
void cDevTextIO::printf( const char *format, ... )
{
 8005b58:	b40e      	push	{r1, r2, r3}
 8005b5a:	b5b0      	push	{r4, r5, r7, lr}
 8005b5c:	b085      	sub	sp, #20
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  va_list argzeiger;

  va_start ( argzeiger, format );
 8005b62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b66:	60fb      	str	r3, [r7, #12]
  vsnprintf( strOut, outBufSize, format, argzeiger );
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6898      	ldr	r0, [r3, #8]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	7b5b      	ldrb	r3, [r3, #13]
 8005b70:	4619      	mov	r1, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b76:	f001 f80d 	bl	8006b94 <vsniprintf>
  va_end   ( argzeiger );

  // Set output
  set( (BYTE*)strOut, strlen(strOut) );
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	3304      	adds	r3, #4
 8005b80:	681c      	ldr	r4, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689d      	ldr	r5, [r3, #8]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fa fb72 	bl	8000274 <strlen>
 8005b90:	4603      	mov	r3, r0
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	461a      	mov	r2, r3
 8005b96:	4629      	mov	r1, r5
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	47a0      	blx	r4
}
 8005b9c:	bf00      	nop
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8005ba6:	b003      	add	sp, #12
 8005ba8:	4770      	bx	lr
	...

08005bac <_ZN15cDevTextIO_UARTC1ER7cHwUARThhPKcS3_>:
//
// cDevTextIO_UART
//
//*******************************************************************
//-------------------------------------------------------------------
cDevTextIO_UART::cDevTextIO_UART( cHwUART    &uartIn,
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	461a      	mov	r2, r3
 8005bba:	460b      	mov	r3, r1
 8005bbc:	71fb      	strb	r3, [r7, #7]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	71bb      	strb	r3, [r7, #6]
: cDevTextIO( inBufSizeIn,
              outBufSizeIn,
              eosIn,
              keyIn ),
                          
  uart      ( uartIn )
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	79ba      	ldrb	r2, [r7, #6]
 8005bc6:	79f9      	ldrb	r1, [r7, #7]
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	f7ff ff87 	bl	8005ae0 <_ZN10cDevTextIOC1EhhPKcS1_>
 8005bd2:	4a05      	ldr	r2, [pc, #20]	; (8005be8 <_ZN15cDevTextIO_UARTC1ER7cHwUARThhPKcS3_+0x3c>)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	61da      	str	r2, [r3, #28]

{
}
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	080074e0 	.word	0x080074e0

08005bec <_ZN15cDevTextIO_UART3setEPhh>:

//-------------------------------------------------------------------
inline void cDevTextIO_UART::set( BYTE *str, BYTE size )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	71fb      	strb	r3, [r7, #7]
  uart.set( str, size );
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	69d8      	ldr	r0, [r3, #28]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3304      	adds	r3, #4
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	79fa      	ldrb	r2, [r7, #7]
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	4798      	blx	r3
}
 8005c0e:	bf00      	nop
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <_ZN15cDevTextIO_UART3getEPh>:
    
//-------------------------------------------------------------------
inline bool cDevTextIO_UART::get( BYTE *c )
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b082      	sub	sp, #8
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	6039      	str	r1, [r7, #0]
  return( uart.get( c ) );
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	69da      	ldr	r2, [r3, #28]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3310      	adds	r3, #16
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6839      	ldr	r1, [r7, #0]
 8005c30:	4610      	mov	r0, r2
 8005c32:	4798      	blx	r3
 8005c34:	4603      	mov	r3, r0
}    
 8005c36:	4618      	mov	r0, r3
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <__cxa_pure_virtual>:

//*******************************************************************
extern "C"
{
  void __cxa_pure_virtual( void )
  {
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	af00      	add	r7, sp, #0
    abort();
 8005c42:	f000 fe36 	bl	80068b2 <abort>

08005c46 <_ZN5cListC1Ev>:
//
// cList
//
//*******************************************************************
//-------------------------------------------------------------------
cList::cList( void )
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
{
  PtrFirst = 0;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	601a      	str	r2, [r3, #0]
}
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4618      	mov	r0, r3
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <_ZN5cList3addEPNS_4ItemE>:

//-------------------------------------------------------------------
BYTE cList::add(Item *itemPtr)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b085      	sub	sp, #20
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	6039      	str	r1, [r7, #0]
  Item *ptr;

  // Is itemPtr still in list?
  ptr = PtrFirst;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	60fb      	str	r3, [r7, #12]

  while( ptr )
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00e      	beq.n	8005c96 <_ZN5cList3addEPNS_4ItemE+0x34>
  {
    if( ptr == itemPtr )
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d101      	bne.n	8005c84 <_ZN5cList3addEPNS_4ItemE+0x22>
    {
      return( false );
 8005c80:	2300      	movs	r3, #0
 8005c82:	e013      	b.n	8005cac <_ZN5cList3addEPNS_4ItemE+0x4a>
    }
    if(ptr->PtrNext) // Does curent object have a next object?
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <_ZN5cList3addEPNS_4ItemE+0x32>
    {
      ptr = ptr->PtrNext;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	60fb      	str	r3, [r7, #12]
  while( ptr )
 8005c92:	e7ee      	b.n	8005c72 <_ZN5cList3addEPNS_4ItemE+0x10>
    }
    else
    {
      break;
 8005c94:	bf00      	nop
    }
  }

  // Add a new object,
  // ptr may referes to last object in the list
  if( ptr ) // append new object to last object in list
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <_ZN5cList3addEPNS_4ItemE+0x42>
  {
    ptr->PtrNext = itemPtr;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	605a      	str	r2, [r3, #4]
 8005ca2:	e002      	b.n	8005caa <_ZN5cList3addEPNS_4ItemE+0x48>
  }
  else // insert first object into list
  {
    PtrFirst = itemPtr;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	601a      	str	r2, [r3, #0]
  }
  return( true );
 8005caa:	2301      	movs	r3, #1
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <_ZN5cList9updateAllEv>:
  return( ptr );
}

//-------------------------------------------------------------------
void cList::updateAll( void )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  Item* ptr = PtrFirst;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	60fb      	str	r3, [r7, #12]

  while( ptr )
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <_ZN5cList9updateAllEv+0x26>
  {
    ptr->update();
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	4798      	blx	r3
    ptr = ptr->PtrNext;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	60fb      	str	r3, [r7, #12]
  while( ptr )
 8005cdc:	e7f3      	b.n	8005cc6 <_ZN5cList9updateAllEv+0xe>
  }
}
 8005cde:	bf00      	nop
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <_Z3MINIhET_S0_S0_>:
//*******************************************************************
/*! Compares two values and returns the minimum
    \param  x,y
    \return minimum of (x,y)
*/
template <class T> inline T MIN( T x, T y )
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	4603      	mov	r3, r0
 8005cee:	460a      	mov	r2, r1
 8005cf0:	71fb      	strb	r3, [r7, #7]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	71bb      	strb	r3, [r7, #6]
{
  if( x < y )
 8005cf6:	79fa      	ldrb	r2, [r7, #7]
 8005cf8:	79bb      	ldrb	r3, [r7, #6]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d201      	bcs.n	8005d02 <_Z3MINIhET_S0_S0_+0x1c>
    return( x );
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	e000      	b.n	8005d04 <_Z3MINIhET_S0_S0_+0x1e>
  else
    return( y );
 8005d02:	79bb      	ldrb	r3, [r7, #6]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <_ZN5cFifoIhEC1Eh>:
  public:
    //---------------------------------------------------------------
    /*! Create a FIFO and allocate it's memory
        \param sizeIn FIFO size (max number of objects stored in FIFO)
    */
    cFifo( BYTE sizeIn )
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	70fb      	strb	r3, [r7, #3]
    {
      in   = 0;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	711a      	strb	r2, [r3, #4]
      out  = 0;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	715a      	strb	r2, [r3, #5]
      anz  = 0;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	719a      	strb	r2, [r3, #6]
      size = sizeIn;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	78fa      	ldrb	r2, [r7, #3]
 8005d32:	71da      	strb	r2, [r3, #7]
      if( size > 0 )
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	79db      	ldrb	r3, [r3, #7]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d008      	beq.n	8005d4e <_ZN5cFifoIhEC1Eh+0x3e>
      {
        speicher = new T[size];
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	79db      	ldrb	r3, [r3, #7]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fb fd45 	bl	80017d0 <_Znaj>
 8005d46:	4603      	mov	r3, r0
 8005d48:	461a      	mov	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	601a      	str	r2, [r3, #0]
      }
    }
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4618      	mov	r0, r3
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <_ZN5cFifoIhElsERKh>:
        \param ref Reference to an object
        \return
                - true, if succeeded
                - false, if FIFO is full, object not written
    */
    BYTE operator<<( const T &ref )
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
    {
      BYTE ret = 0;
 8005d62:	2300      	movs	r3, #0
 8005d64:	73fb      	strb	r3, [r7, #15]

      cSystem::disableInterrupt();
 8005d66:	f7fb fed3 	bl	8001b10 <_ZN7cSystem16disableInterruptEv>
      if( anz < size )
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	799a      	ldrb	r2, [r3, #6]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	79db      	ldrb	r3, [r3, #7]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d21f      	bcs.n	8005db6 <_ZN5cFifoIhElsERKh+0x5e>
      {
        speicher[in] = ref;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	7912      	ldrb	r2, [r2, #4]
 8005d7e:	4413      	add	r3, r2
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	7812      	ldrb	r2, [r2, #0]
 8005d84:	701a      	strb	r2, [r3, #0]
        in = (in < size-1) ? in+1 : 0;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	791b      	ldrb	r3, [r3, #4]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	79db      	ldrb	r3, [r3, #7]
 8005d90:	3b01      	subs	r3, #1
 8005d92:	429a      	cmp	r2, r3
 8005d94:	da04      	bge.n	8005da0 <_ZN5cFifoIhElsERKh+0x48>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	791b      	ldrb	r3, [r3, #4]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	e000      	b.n	8005da2 <_ZN5cFifoIhElsERKh+0x4a>
 8005da0:	2200      	movs	r2, #0
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	711a      	strb	r2, [r3, #4]
        anz++;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	799b      	ldrb	r3, [r3, #6]
 8005daa:	3301      	adds	r3, #1
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	719a      	strb	r2, [r3, #6]
        ret = 1;
 8005db2:	2301      	movs	r3, #1
 8005db4:	73fb      	strb	r3, [r7, #15]
      }
      cSystem::enableInterrupt();
 8005db6:	f7fb febd 	bl	8001b34 <_ZN7cSystem15enableInterruptEv>

      return( ret );
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
    }
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <_ZN5cFifoIhE7isEmptyEv>:
    BYTE isEmpty( void )
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
      cSystem::disableInterrupt();
 8005dcc:	f7fb fea0 	bl	8001b10 <_ZN7cSystem16disableInterruptEv>
      ret = ( anz == 0 );
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	799b      	ldrb	r3, [r3, #6]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	bf0c      	ite	eq
 8005dd8:	2301      	moveq	r3, #1
 8005dda:	2300      	movne	r3, #0
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	73fb      	strb	r3, [r7, #15]
      cSystem::enableInterrupt();
 8005de0:	f7fb fea8 	bl	8001b34 <_ZN7cSystem15enableInterruptEv>
      return(ret);
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
    }
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <_ZN5cFifoIhErsERh>:
        \param ref Referenc to an object
        \return
                - true, if succeeded
                - false, if FIFO is empty, no object read
    */
    BYTE operator>>( T &ref )
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b084      	sub	sp, #16
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	6039      	str	r1, [r7, #0]
    {
      BYTE ret = 0;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	73fb      	strb	r3, [r7, #15]

      cSystem::disableInterrupt();
 8005dfc:	f7fb fe88 	bl	8001b10 <_ZN7cSystem16disableInterruptEv>
      if( anz != 0 )
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	799b      	ldrb	r3, [r3, #6]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01f      	beq.n	8005e48 <_ZN5cFifoIhErsERh+0x5a>
      {
        ref = speicher[out];
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	7952      	ldrb	r2, [r2, #5]
 8005e10:	4413      	add	r3, r2
 8005e12:	781a      	ldrb	r2, [r3, #0]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	701a      	strb	r2, [r3, #0]
        out = (out < size-1) ? out+1 : 0;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	795b      	ldrb	r3, [r3, #5]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	79db      	ldrb	r3, [r3, #7]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	429a      	cmp	r2, r3
 8005e26:	da04      	bge.n	8005e32 <_ZN5cFifoIhErsERh+0x44>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	795b      	ldrb	r3, [r3, #5]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	e000      	b.n	8005e34 <_ZN5cFifoIhErsERh+0x46>
 8005e32:	2200      	movs	r2, #0
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	715a      	strb	r2, [r3, #5]
        anz--;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	799b      	ldrb	r3, [r3, #6]
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	719a      	strb	r2, [r3, #6]
        ret = 1;
 8005e44:	2301      	movs	r3, #1
 8005e46:	73fb      	strb	r3, [r7, #15]
      }
      cSystem::enableInterrupt();
 8005e48:	f7fb fe74 	bl	8001b34 <_ZN7cSystem15enableInterruptEv>

      return( ret );
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
    }
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <_ZN5cFifoIhE6isFullEv>:
    BYTE isFull( void )
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
      cSystem::disableInterrupt();
 8005e5e:	f7fb fe57 	bl	8001b10 <_ZN7cSystem16disableInterruptEv>
      ret = ( anz >= size );
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	799a      	ldrb	r2, [r3, #6]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	79db      	ldrb	r3, [r3, #7]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	bf2c      	ite	cs
 8005e6e:	2301      	movcs	r3, #1
 8005e70:	2300      	movcc	r3, #0
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	73fb      	strb	r3, [r7, #15]
      cSystem::enableInterrupt();
 8005e76:	f7fb fe5d 	bl	8001b34 <_ZN7cSystem15enableInterruptEv>
      return( ret );
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
    }
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <_ZN7cHwLTDCC1Em>:
		cHwLTDC( uint32_t startAddrIn )   
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
      startAddr = startAddrIn;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	601a      	str	r2, [r3, #0]
			RCC->APB2ENR  |=  RCC_APB2ENR_LTDCEN;   // clock enable		 
 8005e94:	4b0c      	ldr	r3, [pc, #48]	; (8005ec8 <_ZN7cHwLTDCC1Em+0x44>)
 8005e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e98:	4a0b      	ldr	r2, [pc, #44]	; (8005ec8 <_ZN7cHwLTDCC1Em+0x44>)
 8005e9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e9e:	6453      	str	r3, [r2, #68]	; 0x44
			RCC->APB2RSTR |=  RCC_APB2RSTR_LTDCRST; // reset cycle
 8005ea0:	4b09      	ldr	r3, [pc, #36]	; (8005ec8 <_ZN7cHwLTDCC1Em+0x44>)
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	4a08      	ldr	r2, [pc, #32]	; (8005ec8 <_ZN7cHwLTDCC1Em+0x44>)
 8005ea6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005eaa:	6253      	str	r3, [r2, #36]	; 0x24
			RCC->APB2RSTR &= ~RCC_APB2RSTR_LTDCRST;
 8005eac:	4b06      	ldr	r3, [pc, #24]	; (8005ec8 <_ZN7cHwLTDCC1Em+0x44>)
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	4a05      	ldr	r2, [pc, #20]	; (8005ec8 <_ZN7cHwLTDCC1Em+0x44>)
 8005eb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005eb6:	6253      	str	r3, [r2, #36]	; 0x24
		}
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40023800 	.word	0x40023800

08005ecc <_ZN6cHwFMCC1ENS_7FMCtypeEb>:
  public:
    //---------------------------------------------------------------
    /*! Initialize the FSCM hardware
        \param xxx  xxx
    */
    cHwFMC( FMCtype typeIn, bool bothIn = false )
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	70fb      	strb	r3, [r7, #3]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	70bb      	strb	r3, [r7, #2]
    {
      type = typeIn&0x0F;
 8005edc:	78fb      	ldrb	r3, [r7, #3]
 8005ede:	f003 030f 	and.w	r3, r3, #15
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	701a      	strb	r2, [r3, #0]
      bank = (typeIn>>4)&0x0F;
 8005ee8:	78fb      	ldrb	r3, [r7, #3]
 8005eea:	091b      	lsrs	r3, r3, #4
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	705a      	strb	r2, [r3, #1]
      both = bothIn;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	78ba      	ldrb	r2, [r7, #2]
 8005ef6:	709a      	strb	r2, [r3, #2]

      WORD mode =  cHwPinConfig::FAST_SPEED
 8005ef8:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8005efc:	81fb      	strh	r3, [r7, #14]
                 | cHwPinConfig::PUSH_PULL
                 | cHwPinConfig::PULL_UP // ???
                 | cHwPinConfig::NO_PUPD;

      cHwPinConfig::set(cHwPinConfig::FMC_D0,mode);
 8005efe:	89fb      	ldrh	r3, [r7, #14]
 8005f00:	4619      	mov	r1, r3
 8005f02:	2069      	movs	r0, #105	; 0x69
 8005f04:	f7fc f87a 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D1,mode);
 8005f08:	89fb      	ldrh	r3, [r7, #14]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	206a      	movs	r0, #106	; 0x6a
 8005f0e:	f7fc f875 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D2,mode);
 8005f12:	89fb      	ldrh	r3, [r7, #14]
 8005f14:	4619      	mov	r1, r3
 8005f16:	2075      	movs	r0, #117	; 0x75
 8005f18:	f7fc f870 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D3,mode);
 8005f1c:	89fb      	ldrh	r3, [r7, #14]
 8005f1e:	4619      	mov	r1, r3
 8005f20:	2080      	movs	r0, #128	; 0x80
 8005f22:	f7fc f86b 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D4,mode);
 8005f26:	89fb      	ldrh	r3, [r7, #14]
 8005f28:	4619      	mov	r1, r3
 8005f2a:	2083      	movs	r0, #131	; 0x83
 8005f2c:	f7fc f866 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D5,mode);
 8005f30:	89fb      	ldrh	r3, [r7, #14]
 8005f32:	4619      	mov	r1, r3
 8005f34:	2084      	movs	r0, #132	; 0x84
 8005f36:	f7fc f861 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D6,mode);
 8005f3a:	89fb      	ldrh	r3, [r7, #14]
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	2085      	movs	r0, #133	; 0x85
 8005f40:	f7fc f85c 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D7,mode);
 8005f44:	89fb      	ldrh	r3, [r7, #14]
 8005f46:	4619      	mov	r1, r3
 8005f48:	2086      	movs	r0, #134	; 0x86
 8005f4a:	f7fc f857 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D8,mode);
 8005f4e:	89fb      	ldrh	r3, [r7, #14]
 8005f50:	4619      	mov	r1, r3
 8005f52:	2087      	movs	r0, #135	; 0x87
 8005f54:	f7fc f852 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D9,mode);
 8005f58:	89fb      	ldrh	r3, [r7, #14]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	2088      	movs	r0, #136	; 0x88
 8005f5e:	f7fc f84d 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D10,mode);
 8005f62:	89fb      	ldrh	r3, [r7, #14]
 8005f64:	4619      	mov	r1, r3
 8005f66:	206b      	movs	r0, #107	; 0x6b
 8005f68:	f7fc f848 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D11,mode);
 8005f6c:	89fb      	ldrh	r3, [r7, #14]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	206c      	movs	r0, #108	; 0x6c
 8005f72:	f7fc f843 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D12,mode);
 8005f76:	89fb      	ldrh	r3, [r7, #14]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	206d      	movs	r0, #109	; 0x6d
 8005f7c:	f7fc f83e 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D13,mode);
 8005f80:	89fb      	ldrh	r3, [r7, #14]
 8005f82:	4619      	mov	r1, r3
 8005f84:	206e      	movs	r0, #110	; 0x6e
 8005f86:	f7fc f839 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D14,mode);
 8005f8a:	89fb      	ldrh	r3, [r7, #14]
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	206f      	movs	r0, #111	; 0x6f
 8005f90:	f7fc f834 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D15,mode);
 8005f94:	89fb      	ldrh	r3, [r7, #14]
 8005f96:	4619      	mov	r1, r3
 8005f98:	2070      	movs	r0, #112	; 0x70
 8005f9a:	f7fc f82f 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D16,mode);
 8005f9e:	89fb      	ldrh	r3, [r7, #14]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	2071      	movs	r0, #113	; 0x71
 8005fa4:	f7fc f82a 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D17,mode);
 8005fa8:	89fb      	ldrh	r3, [r7, #14]
 8005faa:	4619      	mov	r1, r3
 8005fac:	2072      	movs	r0, #114	; 0x72
 8005fae:	f7fc f825 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D18,mode);
 8005fb2:	89fb      	ldrh	r3, [r7, #14]
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	2073      	movs	r0, #115	; 0x73
 8005fb8:	f7fc f820 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D19,mode);
 8005fbc:	89fb      	ldrh	r3, [r7, #14]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	2074      	movs	r0, #116	; 0x74
 8005fc2:	f7fc f81b 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D20,mode);
 8005fc6:	89fb      	ldrh	r3, [r7, #14]
 8005fc8:	4619      	mov	r1, r3
 8005fca:	2076      	movs	r0, #118	; 0x76
 8005fcc:	f7fc f816 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D21,mode);
 8005fd0:	89fb      	ldrh	r3, [r7, #14]
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	2077      	movs	r0, #119	; 0x77
 8005fd6:	f7fc f811 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D22,mode);
 8005fda:	89fb      	ldrh	r3, [r7, #14]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	2078      	movs	r0, #120	; 0x78
 8005fe0:	f7fc f80c 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D23,mode);
 8005fe4:	89fb      	ldrh	r3, [r7, #14]
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	2079      	movs	r0, #121	; 0x79
 8005fea:	f7fc f807 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D24,mode);
 8005fee:	89fb      	ldrh	r3, [r7, #14]
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	207a      	movs	r0, #122	; 0x7a
 8005ff4:	f7fc f802 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D25,mode);
 8005ff8:	89fb      	ldrh	r3, [r7, #14]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	207b      	movs	r0, #123	; 0x7b
 8005ffe:	f7fb fffd 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D26,mode);
 8006002:	89fb      	ldrh	r3, [r7, #14]
 8006004:	4619      	mov	r1, r3
 8006006:	207c      	movs	r0, #124	; 0x7c
 8006008:	f7fb fff8 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D27,mode);
 800600c:	89fb      	ldrh	r3, [r7, #14]
 800600e:	4619      	mov	r1, r3
 8006010:	207d      	movs	r0, #125	; 0x7d
 8006012:	f7fb fff3 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D28,mode);
 8006016:	89fb      	ldrh	r3, [r7, #14]
 8006018:	4619      	mov	r1, r3
 800601a:	207e      	movs	r0, #126	; 0x7e
 800601c:	f7fb ffee 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D29,mode);
 8006020:	89fb      	ldrh	r3, [r7, #14]
 8006022:	4619      	mov	r1, r3
 8006024:	207f      	movs	r0, #127	; 0x7f
 8006026:	f7fb ffe9 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D30,mode);
 800602a:	89fb      	ldrh	r3, [r7, #14]
 800602c:	4619      	mov	r1, r3
 800602e:	2081      	movs	r0, #129	; 0x81
 8006030:	f7fb ffe4 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_D31,mode);
 8006034:	89fb      	ldrh	r3, [r7, #14]
 8006036:	4619      	mov	r1, r3
 8006038:	2082      	movs	r0, #130	; 0x82
 800603a:	f7fb ffdf 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>

      cHwPinConfig::set(cHwPinConfig::FMC_NBL0,mode);
 800603e:	89fb      	ldrh	r3, [r7, #14]
 8006040:	4619      	mov	r1, r3
 8006042:	208a      	movs	r0, #138	; 0x8a
 8006044:	f7fb ffda 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_NBL1,mode);
 8006048:	89fb      	ldrh	r3, [r7, #14]
 800604a:	4619      	mov	r1, r3
 800604c:	208b      	movs	r0, #139	; 0x8b
 800604e:	f7fb ffd5 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>

      cHwPinConfig::set(cHwPinConfig::FMC_A0,mode);
 8006052:	89fb      	ldrh	r3, [r7, #14]
 8006054:	4619      	mov	r1, r3
 8006056:	204a      	movs	r0, #74	; 0x4a
 8006058:	f7fb ffd0 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_A1,mode);
 800605c:	89fb      	ldrh	r3, [r7, #14]
 800605e:	4619      	mov	r1, r3
 8006060:	204b      	movs	r0, #75	; 0x4b
 8006062:	f7fb ffcb 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_A2,mode);
 8006066:	89fb      	ldrh	r3, [r7, #14]
 8006068:	4619      	mov	r1, r3
 800606a:	2056      	movs	r0, #86	; 0x56
 800606c:	f7fb ffc6 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_A3,mode);
 8006070:	89fb      	ldrh	r3, [r7, #14]
 8006072:	4619      	mov	r1, r3
 8006074:	205d      	movs	r0, #93	; 0x5d
 8006076:	f7fb ffc1 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_A4,mode);
 800607a:	89fb      	ldrh	r3, [r7, #14]
 800607c:	4619      	mov	r1, r3
 800607e:	205e      	movs	r0, #94	; 0x5e
 8006080:	f7fb ffbc 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_A5,mode);
 8006084:	89fb      	ldrh	r3, [r7, #14]
 8006086:	4619      	mov	r1, r3
 8006088:	205f      	movs	r0, #95	; 0x5f
 800608a:	f7fb ffb7 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_A6,mode);
 800608e:	89fb      	ldrh	r3, [r7, #14]
 8006090:	4619      	mov	r1, r3
 8006092:	2060      	movs	r0, #96	; 0x60
 8006094:	f7fb ffb2 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_A7,mode);
 8006098:	89fb      	ldrh	r3, [r7, #14]
 800609a:	4619      	mov	r1, r3
 800609c:	2061      	movs	r0, #97	; 0x61
 800609e:	f7fb ffad 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_A8,mode);
 80060a2:	89fb      	ldrh	r3, [r7, #14]
 80060a4:	4619      	mov	r1, r3
 80060a6:	2062      	movs	r0, #98	; 0x62
 80060a8:	f7fb ffa8 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_A9,mode);
 80060ac:	89fb      	ldrh	r3, [r7, #14]
 80060ae:	4619      	mov	r1, r3
 80060b0:	2063      	movs	r0, #99	; 0x63
 80060b2:	f7fb ffa3 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_A10,mode);
 80060b6:	89fb      	ldrh	r3, [r7, #14]
 80060b8:	4619      	mov	r1, r3
 80060ba:	204c      	movs	r0, #76	; 0x4c
 80060bc:	f7fb ff9e 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_A11,mode);
 80060c0:	89fb      	ldrh	r3, [r7, #14]
 80060c2:	4619      	mov	r1, r3
 80060c4:	204d      	movs	r0, #77	; 0x4d
 80060c6:	f7fb ff99 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_A12,mode);
 80060ca:	89fb      	ldrh	r3, [r7, #14]
 80060cc:	4619      	mov	r1, r3
 80060ce:	204e      	movs	r0, #78	; 0x4e
 80060d0:	f7fb ff94 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_A13,mode);
 80060d4:	89fb      	ldrh	r3, [r7, #14]
 80060d6:	4619      	mov	r1, r3
 80060d8:	204f      	movs	r0, #79	; 0x4f
 80060da:	f7fb ff8f 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_A14,mode);
 80060de:	89fb      	ldrh	r3, [r7, #14]
 80060e0:	4619      	mov	r1, r3
 80060e2:	2050      	movs	r0, #80	; 0x50
 80060e4:	f7fb ff8a 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_A15,mode);
 80060e8:	89fb      	ldrh	r3, [r7, #14]
 80060ea:	4619      	mov	r1, r3
 80060ec:	2051      	movs	r0, #81	; 0x51
 80060ee:	f7fb ff85 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>

      cHwPinConfig::set(cHwPinConfig::FMC_SDCLK,mode);
 80060f2:	89fb      	ldrh	r3, [r7, #14]
 80060f4:	4619      	mov	r1, r3
 80060f6:	2098      	movs	r0, #152	; 0x98
 80060f8:	f7fb ff80 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_SDNCAS,mode);
 80060fc:	89fb      	ldrh	r3, [r7, #14]
 80060fe:	4619      	mov	r1, r3
 8006100:	2099      	movs	r0, #153	; 0x99
 8006102:	f7fb ff7b 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>

      cHwPinConfig::set(cHwPinConfig::FMC_SDNRAS,mode);
 8006106:	89fb      	ldrh	r3, [r7, #14]
 8006108:	4619      	mov	r1, r3
 800610a:	209c      	movs	r0, #156	; 0x9c
 800610c:	f7fb ff76 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>

      cHwPinConfig::set(cHwPinConfig::FMC_SDCKE0,mode);
 8006110:	89fb      	ldrh	r3, [r7, #14]
 8006112:	4619      	mov	r1, r3
 8006114:	2096      	movs	r0, #150	; 0x96
 8006116:	f7fb ff71 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_SDNE0,mode);
 800611a:	89fb      	ldrh	r3, [r7, #14]
 800611c:	4619      	mov	r1, r3
 800611e:	209a      	movs	r0, #154	; 0x9a
 8006120:	f7fb ff6c 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_SDNWE,mode);
 8006124:	89fb      	ldrh	r3, [r7, #14]
 8006126:	4619      	mov	r1, r3
 8006128:	209d      	movs	r0, #157	; 0x9d
 800612a:	f7fb ff67 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_NBL2,mode);
 800612e:	89fb      	ldrh	r3, [r7, #14]
 8006130:	4619      	mov	r1, r3
 8006132:	208c      	movs	r0, #140	; 0x8c
 8006134:	f7fb ff62 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>
      cHwPinConfig::set(cHwPinConfig::FMC_NBL3,mode);
 8006138:	89fb      	ldrh	r3, [r7, #14]
 800613a:	4619      	mov	r1, r3
 800613c:	208d      	movs	r0, #141	; 0x8d
 800613e:	f7fb ff5d 	bl	8001ffc <_ZN12cHwPinConfig3setENS_8FunctionEm>

      /* Enable FMC clock */
      RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;
 8006142:	4b09      	ldr	r3, [pc, #36]	; (8006168 <_ZN6cHwFMCC1ENS_7FMCtypeEb+0x29c>)
 8006144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006146:	4a08      	ldr	r2, [pc, #32]	; (8006168 <_ZN6cHwFMCC1ENS_7FMCtypeEb+0x29c>)
 8006148:	f043 0301 	orr.w	r3, r3, #1
 800614c:	6393      	str	r3, [r2, #56]	; 0x38

      if( type == SDRAM )
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	2b02      	cmp	r3, #2
 8006154:	d102      	bne.n	800615c <_ZN6cHwFMCC1ENS_7FMCtypeEb+0x290>
      {
        SDRAM_Init( );
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f81c 	bl	8006194 <_ZN6cHwFMC10SDRAM_InitEv>
      }
    }
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	40023800 	.word	0x40023800

0800616c <_ZN6cHwFMC9startAddrEv>:
    
    //---------------------------------------------------------------
    uint32_t startAddr( void )
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
    {
      if( bank == 0 )
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	785b      	ldrb	r3, [r3, #1]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d102      	bne.n	8006182 <_ZN6cHwFMC9startAddrEv+0x16>
        return( 0xC0000000 );
 800617c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8006180:	e001      	b.n	8006186 <_ZN6cHwFMC9startAddrEv+0x1a>
      else
        return( 0xD0000000 );
 8006182:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
    }
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
	...

08006194 <_ZN6cHwFMC10SDRAM_InitEv>:
    
  private:
    //---------------------------------------------------------------
    void SDRAM_Init(  )
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
    {
      uint32_t reg  = 0;
 800619c:	2300      	movs	r3, #0
 800619e:	60fb      	str	r3, [r7, #12]
      // Step 1 and 2
      // Common initialization,
      // see Reference Manual, DocID028270-Rev 3, page 388
      //--------------------------------------------------
      // SDRAM Control registers
      reg  = FMC_Bank5_6->SDCR[0/*BANK1*/];
 80061a0:	4b37      	ldr	r3, [pc, #220]	; (8006280 <_ZN6cHwFMC10SDRAM_InitEv+0xec>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	60fb      	str	r3, [r7, #12]
      reg &= ~( FMC_SDCR1_SDCLK
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061ac:	60fb      	str	r3, [r7, #12]
              | FMC_SDCR1_RBURST
              | FMC_SDCR1_RPIPE );
      reg |=  (  (2<<10)          // Clock configuration: 2xHCLK periods
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 80061b4:	60fb      	str	r3, [r7, #12]
              |  FMC_SDCR1_RBURST // Burst read:enable
              |  (0<<13) );       // Read pipe: No HCLK clock cycle delay
      FMC_Bank5_6->SDCR[0/*BANK1*/] = reg;
 80061b6:	4a32      	ldr	r2, [pc, #200]	; (8006280 <_ZN6cHwFMC10SDRAM_InitEv+0xec>)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6013      	str	r3, [r2, #0]

      // SDRAM Timing registers
      reg  = FMC_Bank5_6->SDTR[0/*BANK1*/];
 80061bc:	4b30      	ldr	r3, [pc, #192]	; (8006280 <_ZN6cHwFMC10SDRAM_InitEv+0xec>)
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	60fb      	str	r3, [r7, #12]
      reg &= ~( FMC_SDTR1_TRC
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	4b2f      	ldr	r3, [pc, #188]	; (8006284 <_ZN6cHwFMC10SDRAM_InitEv+0xf0>)
 80061c6:	4013      	ands	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
              | FMC_SDTR1_TRP );
      reg |=  ( ((7 - 1) << 12)    // Row cycle delay: 7 cycles
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f443 1383 	orr.w	r3, r3, #1073152	; 0x106000
 80061d0:	60fb      	str	r3, [r7, #12]
              | ((2 - 1) << 20) ); // Row precharge delay: 2 cycles
      FMC_Bank5_6->SDTR[0/*BANK1*/] = reg;
 80061d2:	4a2b      	ldr	r2, [pc, #172]	; (8006280 <_ZN6cHwFMC10SDRAM_InitEv+0xec>)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6093      	str	r3, [r2, #8]

      // Bank specific initialization
      //-----------------------------
      // SDRAM Control registers
      reg  = FMC_Bank5_6->SDCR[bank];
 80061d8:	4a29      	ldr	r2, [pc, #164]	; (8006280 <_ZN6cHwFMC10SDRAM_InitEv+0xec>)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	785b      	ldrb	r3, [r3, #1]
 80061de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061e2:	60fb      	str	r3, [r7, #12]
      reg &= ~( FMC_SDCR1_NC
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	4b28      	ldr	r3, [pc, #160]	; (8006288 <_ZN6cHwFMC10SDRAM_InitEv+0xf4>)
 80061e8:	4013      	ands	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]
              | FMC_SDCR1_NR
              | FMC_SDCR1_MWID
              | FMC_SDCR1_NB
              | FMC_SDCR1_CAS
              | FMC_SDCR1_WP );
      reg |=  ( (0 <<  0)       // Number of column address bits:8
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f443 73f2 	orr.w	r3, r3, #484	; 0x1e4
 80061f2:	60fb      	str	r3, [r7, #12]
              | (1 <<  2)       // Number of row address bits:12
              | (2 <<  4)       // Memory data bus width:32 bits
              | (1 <<  6)       // Number of internal banks:4
              | (3 <<  7)       // CAS Latency:3 (must be same as in Load Mode Register)
              |!FMC_SDCR1_WP ); // Write protection: disable
      FMC_Bank5_6->SDCR[bank] = reg;
 80061f4:	4a22      	ldr	r2, [pc, #136]	; (8006280 <_ZN6cHwFMC10SDRAM_InitEv+0xec>)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	785b      	ldrb	r3, [r3, #1]
 80061fa:	4619      	mov	r1, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

      // SDRAM Timing registers
      reg  = FMC_Bank5_6->SDTR[bank];
 8006202:	4a1f      	ldr	r2, [pc, #124]	; (8006280 <_ZN6cHwFMC10SDRAM_InitEv+0xec>)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	785b      	ldrb	r3, [r3, #1]
 8006208:	3302      	adds	r3, #2
 800620a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800620e:	60fb      	str	r3, [r7, #12]
      reg &= ~( FMC_SDTR1_TMRD
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	4b1e      	ldr	r3, [pc, #120]	; (800628c <_ZN6cHwFMC10SDRAM_InitEv+0xf8>)
 8006214:	4013      	ands	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
              | FMC_SDTR1_TXSR
              | FMC_SDTR1_TRAS
              | FMC_SDTR1_TWR
              | FMC_SDTR1_TRCD );
      reg |=  ( ((2 - 1) <<  0)   // Load Mode Register to Active: 2 cycles
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	4b1d      	ldr	r3, [pc, #116]	; (8006290 <_ZN6cHwFMC10SDRAM_InitEv+0xfc>)
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]
              | ((7 - 1) <<  4)   // Exit Self-refresh delay: 7 cycles
              | ((4 - 1) <<  8)   // Self refresh time: 4 cycles
              | ((2 - 1) << 16)   // Recovery delay: 2 cycles
              | ((2 - 1) << 24)); // Row to column delay: 2 cycles
      FMC_Bank5_6->SDTR[bank] = reg;
 8006220:	4917      	ldr	r1, [pc, #92]	; (8006280 <_ZN6cHwFMC10SDRAM_InitEv+0xec>)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	785b      	ldrb	r3, [r3, #1]
 8006226:	3302      	adds	r3, #2
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      // Device specific initialization
      //-------------------------------

      // Step 3: Configure a clock configuration enable command
      SendCommand( 0x01/*Clock Configuration Enable*/, 1, 0 );
 800622e:	2300      	movs	r3, #0
 8006230:	2201      	movs	r2, #1
 8006232:	2101      	movs	r1, #1
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f82d 	bl	8006294 <_ZN6cHwFMC11SendCommandEmmm>

      // Step 4: Insert 100 us minimum delay
      cSystem::delayMilliSec(1);
 800623a:	2001      	movs	r0, #1
 800623c:	f7fb fcb1 	bl	8001ba2 <_ZN7cSystem13delayMilliSecEt>

      // Step 5: Configure a PALL (precharge all) command
      SendCommand( 0x02/*PALL Command*/, 1, 0 );
 8006240:	2300      	movs	r3, #0
 8006242:	2201      	movs	r2, #1
 8006244:	2102      	movs	r1, #2
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f824 	bl	8006294 <_ZN6cHwFMC11SendCommandEmmm>

      // Step 6: Configure an Auto Refresh command
      SendCommand( 0x03/*Auto Refresh Command*/, 8, 0 );
 800624c:	2300      	movs	r3, #0
 800624e:	2208      	movs	r2, #8
 8006250:	2103      	movs	r1, #3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f81e 	bl	8006294 <_ZN6cHwFMC11SendCommandEmmm>

      // Step 7: Program the external memory mode register
      // see: Micron SDR SDRAM "MT48LC4M32B2", Datasheet
      reg = ( (0<<0)   // Burst length: 1
 8006258:	f44f 730c 	mov.w	r3, #560	; 0x230
 800625c:	60fb      	str	r3, [r7, #12]
            | (0<<3)   // Burst type:sequential
            | (3<<4)   // CAS Latency:3 (must be same as in SDCR)
            | (0<<7)   // Operating Mode: standard
            | (1<<9) );// Write Burst Mode: single
      SendCommand(0x04/*Load Mode Register*/, 1, reg);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	2104      	movs	r1, #4
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f815 	bl	8006294 <_ZN6cHwFMC11SendCommandEmmm>
      //      Refresh count:  4k = 4096
      //
      // here:fclkSD = 100 MHz
      //      COUNT = RefreshPeriod/RefreshCount*fclkSD + 20
      //            = 64E-3/4096*100E6 +20 = 1583
      FMC_Bank5_6->SDRTR |= (1583 << 1);
 800626a:	4b05      	ldr	r3, [pc, #20]	; (8006280 <_ZN6cHwFMC10SDRAM_InitEv+0xec>)
 800626c:	695a      	ldr	r2, [r3, #20]
 800626e:	4904      	ldr	r1, [pc, #16]	; (8006280 <_ZN6cHwFMC10SDRAM_InitEv+0xec>)
 8006270:	f640 435e 	movw	r3, #3166	; 0xc5e
 8006274:	4313      	orrs	r3, r2
 8006276:	614b      	str	r3, [r1, #20]
    }
 8006278:	bf00      	nop
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	a0000140 	.word	0xa0000140
 8006284:	ff0f0fff 	.word	0xff0f0fff
 8006288:	fffffc00 	.word	0xfffffc00
 800628c:	f0f0f000 	.word	0xf0f0f000
 8006290:	01010361 	.word	0x01010361

08006294 <_ZN6cHwFMC11SendCommandEmmm>:

  private:
    //---------------------------------------------------------------
    void SendCommand( uint32_t Command,       //!< Command issued to the SDRAM device
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]

      // see: Reference Manual, DocID028270-Rev 3, page 402:
      //      "If two SDRAM banks are used, the Auto-refresh and
      //       PALL command must be issued simultaneously to the two devices
      //       with CTB1 and CTB2 bits set"
      if( both && (   Command == 0x02    // PALL Command
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	789b      	ldrb	r3, [r3, #2]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d008      	beq.n	80062bc <_ZN6cHwFMC11SendCommandEmmm+0x28>
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d002      	beq.n	80062b6 <_ZN6cHwFMC11SendCommandEmmm+0x22>
                   || Command == 0x03 )) // Auto Refresh Mode
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d102      	bne.n	80062bc <_ZN6cHwFMC11SendCommandEmmm+0x28>
        ctb = 3; // use CTB1 and CTB2 simultanously
 80062b6:	2303      	movs	r3, #3
 80062b8:	617b      	str	r3, [r7, #20]
 80062ba:	e008      	b.n	80062ce <_ZN6cHwFMC11SendCommandEmmm+0x3a>
      else if( bank == 0)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	785b      	ldrb	r3, [r3, #1]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d102      	bne.n	80062ca <_ZN6cHwFMC11SendCommandEmmm+0x36>
        ctb = 1<<1; // CTB1
 80062c4:	2302      	movs	r3, #2
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	e001      	b.n	80062ce <_ZN6cHwFMC11SendCommandEmmm+0x3a>
      else
        ctb = 1<<0; // CTB2
 80062ca:	2301      	movs	r3, #1
 80062cc:	617b      	str	r3, [r7, #20]

      FMC_Bank5_6->SDCMR = ( (Command         << 0)
                           | (ctb             << 3)
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	00da      	lsls	r2, r3, #3
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	431a      	orrs	r2, r3
                           | ((AutoRefresh-1) << 5)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	3b01      	subs	r3, #1
 80062da:	015b      	lsls	r3, r3, #5
 80062dc:	431a      	orrs	r2, r3
                           | (ModeRegister    << 9) );
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	025b      	lsls	r3, r3, #9
      FMC_Bank5_6->SDCMR = ( (Command         << 0)
 80062e2:	490a      	ldr	r1, [pc, #40]	; (800630c <_ZN6cHwFMC11SendCommandEmmm+0x78>)
                           | (ModeRegister    << 9) );
 80062e4:	4313      	orrs	r3, r2
      FMC_Bank5_6->SDCMR = ( (Command         << 0)
 80062e6:	610b      	str	r3, [r1, #16]
      // TODO: timeout
      while( FMC_Bank5_6->SDSR & FMC_SDSR_BUSY ); // wait until command is send
 80062e8:	4b08      	ldr	r3, [pc, #32]	; (800630c <_ZN6cHwFMC11SendCommandEmmm+0x78>)
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	f003 0320 	and.w	r3, r3, #32
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	bf14      	ite	ne
 80062f4:	2301      	movne	r3, #1
 80062f6:	2300      	moveq	r3, #0
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d000      	beq.n	8006300 <_ZN6cHwFMC11SendCommandEmmm+0x6c>
 80062fe:	e7f3      	b.n	80062e8 <_ZN6cHwFMC11SendCommandEmmm+0x54>
    }
 8006300:	bf00      	nop
 8006302:	371c      	adds	r7, #28
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	a0000140 	.word	0xa0000140

08006310 <_ZN6cHwDSIC1Em>:
    cHwDSI( uint32_t startAddr )
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
    : hwLTDC( startAddr )
 800631a:	4a10      	ldr	r2, [pc, #64]	; (800635c <_ZN6cHwDSIC1Em+0x4c>)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	3304      	adds	r3, #4
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff fdac 	bl	8005e84 <_ZN7cHwLTDCC1Em>
			RCC->APB2ENR  |=  RCC_APB2ENR_DSIEN;
 800632c:	4b0c      	ldr	r3, [pc, #48]	; (8006360 <_ZN6cHwDSIC1Em+0x50>)
 800632e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006330:	4a0b      	ldr	r2, [pc, #44]	; (8006360 <_ZN6cHwDSIC1Em+0x50>)
 8006332:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006336:	6453      	str	r3, [r2, #68]	; 0x44
			RCC->APB2RSTR |=  RCC_APB2RSTR_DSIRST;
 8006338:	4b09      	ldr	r3, [pc, #36]	; (8006360 <_ZN6cHwDSIC1Em+0x50>)
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	4a08      	ldr	r2, [pc, #32]	; (8006360 <_ZN6cHwDSIC1Em+0x50>)
 800633e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006342:	6253      	str	r3, [r2, #36]	; 0x24
			RCC->APB2RSTR &= ~RCC_APB2RSTR_DSIRST;
 8006344:	4b06      	ldr	r3, [pc, #24]	; (8006360 <_ZN6cHwDSIC1Em+0x50>)
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	4a05      	ldr	r2, [pc, #20]	; (8006360 <_ZN6cHwDSIC1Em+0x50>)
 800634a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800634e:	6253      	str	r3, [r2, #36]	; 0x24
		}
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4618      	mov	r0, r3
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	08007c14 	.word	0x08007c14
 8006360:	40023800 	.word	0x40023800

08006364 <_ZN6cHwDSI10writeShortEhh>:
		virtual void writeShort( uint8_t para0, uint8_t para1 )
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	460b      	mov	r3, r1
 800636e:	70fb      	strb	r3, [r7, #3]
 8006370:	4613      	mov	r3, r2
 8006372:	70bb      	strb	r3, [r7, #2]
			while( !(DSI->GPSR & DSI_GPSR_CMDFE) ); // Wait for Command FIFO Empty
 8006374:	4b0d      	ldr	r3, [pc, #52]	; (80063ac <_ZN6cHwDSI10writeShortEhh+0x48>)
 8006376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	2b00      	cmp	r3, #0
 800637e:	bf0c      	ite	eq
 8006380:	2301      	moveq	r3, #1
 8006382:	2300      	movne	r3, #0
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d000      	beq.n	800638c <_ZN6cHwDSI10writeShortEhh+0x28>
 800638a:	e7f3      	b.n	8006374 <_ZN6cHwDSI10writeShortEhh+0x10>
			            | ((uint32_t)para0 <<  8)   // data
 800638c:	78fb      	ldrb	r3, [r7, #3]
 800638e:	021a      	lsls	r2, r3, #8
			            | ((uint32_t)para1 << 16) );// data
 8006390:	78bb      	ldrb	r3, [r7, #2]
 8006392:	041b      	lsls	r3, r3, #16
 8006394:	4313      	orrs	r3, r2
			DSI->GHCR = ( 0x15                      // data type: DCS Write Short Packet 1 Parameters 
 8006396:	4a05      	ldr	r2, [pc, #20]	; (80063ac <_ZN6cHwDSI10writeShortEhh+0x48>)
			            | ((uint32_t)para1 << 16) );// data
 8006398:	f043 0315 	orr.w	r3, r3, #21
			DSI->GHCR = ( 0x15                      // data type: DCS Write Short Packet 1 Parameters 
 800639c:	66d3      	str	r3, [r2, #108]	; 0x6c
		}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	40016c00 	.word	0x40016c00

080063b0 <_ZN6cHwDSI9writeLongEPhm>:
		virtual void writeLong( uint8_t*para, uint32_t N )
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
			uint32_t n = 0;
 80063bc:	2300      	movs	r3, #0
 80063be:	617b      	str	r3, [r7, #20]
			while( !(DSI->GPSR & DSI_GPSR_CMDFE) ); // Wait for Command FIFO Empty
 80063c0:	4b1f      	ldr	r3, [pc, #124]	; (8006440 <_ZN6cHwDSI9writeLongEPhm+0x90>)
 80063c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	bf0c      	ite	eq
 80063cc:	2301      	moveq	r3, #1
 80063ce:	2300      	movne	r3, #0
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d000      	beq.n	80063d8 <_ZN6cHwDSI9writeLongEPhm+0x28>
 80063d6:	e7f3      	b.n	80063c0 <_ZN6cHwDSI9writeLongEPhm+0x10>
			while(n < N)
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d220      	bcs.n	8006422 <_ZN6cHwDSI9writeLongEPhm+0x72>
				DSI->GPDR = (  (uint32_t)(*(para + n  ))
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	4413      	add	r3, r2
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	4619      	mov	r1, r3
										| ((uint32_t)(*(para + n+1)) <<  8) 
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	3301      	adds	r3, #1
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	4413      	add	r3, r2
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	021b      	lsls	r3, r3, #8
 80063f6:	ea41 0203 	orr.w	r2, r1, r3
										| ((uint32_t)(*(para + n+2)) << 16) 
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	3302      	adds	r3, #2
 80063fe:	68b9      	ldr	r1, [r7, #8]
 8006400:	440b      	add	r3, r1
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	041b      	lsls	r3, r3, #16
 8006406:	431a      	orrs	r2, r3
										| ((uint32_t)(*(para + n+3)) << 24) );
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	3303      	adds	r3, #3
 800640c:	68b9      	ldr	r1, [r7, #8]
 800640e:	440b      	add	r3, r1
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	061b      	lsls	r3, r3, #24
				DSI->GPDR = (  (uint32_t)(*(para + n  ))
 8006414:	490a      	ldr	r1, [pc, #40]	; (8006440 <_ZN6cHwDSI9writeLongEPhm+0x90>)
										| ((uint32_t)(*(para + n+3)) << 24) );
 8006416:	4313      	orrs	r3, r2
				DSI->GPDR = (  (uint32_t)(*(para + n  ))
 8006418:	670b      	str	r3, [r1, #112]	; 0x70
				n += 4;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	3304      	adds	r3, #4
 800641e:	617b      	str	r3, [r7, #20]
			while(n < N)
 8006420:	e7da      	b.n	80063d8 <_ZN6cHwDSI9writeLongEPhm+0x28>
						      | ((N&0xFFFF) << 8) ); // Word Count MSB+LSB
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	021a      	lsls	r2, r3, #8
 8006426:	4b07      	ldr	r3, [pc, #28]	; (8006444 <_ZN6cHwDSI9writeLongEPhm+0x94>)
 8006428:	4013      	ands	r3, r2
			DSI->GHCR = ( 0x39                 // data type: DCS Write Long Packet
 800642a:	4a05      	ldr	r2, [pc, #20]	; (8006440 <_ZN6cHwDSI9writeLongEPhm+0x90>)
						      | ((N&0xFFFF) << 8) ); // Word Count MSB+LSB
 800642c:	f043 0339 	orr.w	r3, r3, #57	; 0x39
			DSI->GHCR = ( 0x39                 // data type: DCS Write Long Packet
 8006430:	66d3      	str	r3, [r2, #108]	; 0x6c
		}
 8006432:	bf00      	nop
 8006434:	371c      	adds	r7, #28
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	40016c00 	.word	0x40016c00
 8006444:	00ffff00 	.word	0x00ffff00

08006448 <_ZN12cHwI2Cmaster6DeviceC1ERS_h>:
      public:
        //-----------------------------------------------------------
        /*! \todo comment missing ...
        */
        //-----------------------------------------------------------
        Device( cHwI2Cmaster &i2cIn,     //!< Reference to I2C hardware
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	4613      	mov	r3, r2
 8006454:	71fb      	strb	r3, [r7, #7]
                BYTE          hwAddrIn   //!< Device's hardware address
              )

        : i2c( i2cIn)
 8006456:	4a09      	ldr	r2, [pc, #36]	; (800647c <_ZN12cHwI2Cmaster6DeviceC1ERS_h+0x34>)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	605a      	str	r2, [r3, #4]

        {
          hwAddr = hwAddrIn;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	79fa      	ldrb	r2, [r7, #7]
 8006466:	721a      	strb	r2, [r3, #8]
          isErrorFlag = false;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	725a      	strb	r2, [r3, #9]
        }
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	4618      	mov	r0, r3
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	080076f8 	.word	0x080076f8

08006480 <_ZN18cDevDisplayGraphic8getWidthEv>:
        \todo comment
    */
    virtual cHwDisplayFont getDefaultFont( void );
														 
    //---------------------------------------------------------------
		WORD getWidth( void )
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
		{
			return( display.getWidth() );
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3340      	adds	r3, #64	; 0x40
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4610      	mov	r0, r2
 8006498:	4798      	blx	r3
 800649a:	4603      	mov	r3, r0
		}
 800649c:	4618      	mov	r0, r3
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <_ZN18cDevDisplayGraphic9getHeightEv>:

    //---------------------------------------------------------------
		WORD getHeight( void )
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
		{
			return( display.getHeight() );
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3344      	adds	r3, #68	; 0x44
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4610      	mov	r0, r2
 80064bc:	4798      	blx	r3
 80064be:	4603      	mov	r3, r0
		}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <_Z3mintt>:

#include "Color.h"

//*******************************************************************

WORD min(WORD a, WORD b) {
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	460a      	mov	r2, r1
 80064d2:	80fb      	strh	r3, [r7, #6]
 80064d4:	4613      	mov	r3, r2
 80064d6:	80bb      	strh	r3, [r7, #4]
	 return a < b ? a : b;
 80064d8:	88fa      	ldrh	r2, [r7, #6]
 80064da:	88bb      	ldrh	r3, [r7, #4]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d201      	bcs.n	80064e4 <_Z3mintt+0x1c>
 80064e0:	88fb      	ldrh	r3, [r7, #6]
 80064e2:	e000      	b.n	80064e6 <_Z3mintt+0x1e>
 80064e4:	88bb      	ldrh	r3, [r7, #4]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
	...

080064f4 <_Z9drawBoardv>:

void drawBoard() {
 80064f4:	b590      	push	{r4, r7, lr}
 80064f6:	b089      	sub	sp, #36	; 0x24
 80064f8:	af04      	add	r7, sp, #16
	WORD sideLength = min(lcd.getWidth(), lcd.getHeight());
 80064fa:	485e      	ldr	r0, [pc, #376]	; (8006674 <_Z9drawBoardv+0x180>)
 80064fc:	f7ff ffc0 	bl	8006480 <_ZN18cDevDisplayGraphic8getWidthEv>
 8006500:	4603      	mov	r3, r0
 8006502:	461c      	mov	r4, r3
 8006504:	485b      	ldr	r0, [pc, #364]	; (8006674 <_Z9drawBoardv+0x180>)
 8006506:	f7ff ffcd 	bl	80064a4 <_ZN18cDevDisplayGraphic9getHeightEv>
 800650a:	4603      	mov	r3, r0
 800650c:	4619      	mov	r1, r3
 800650e:	4620      	mov	r0, r4
 8006510:	f7ff ffda 	bl	80064c8 <_Z3mintt>
 8006514:	4603      	mov	r3, r0
 8006516:	817b      	strh	r3, [r7, #10]
	WORD cellSize = sideLength/3;
 8006518:	897b      	ldrh	r3, [r7, #10]
 800651a:	4a57      	ldr	r2, [pc, #348]	; (8006678 <_Z9drawBoardv+0x184>)
 800651c:	fba2 2303 	umull	r2, r3, r2, r3
 8006520:	085b      	lsrs	r3, r3, #1
 8006522:	813b      	strh	r3, [r7, #8]

	WORD x = sideLength < lcd.getWidth() ? (lcd.getWidth() - sideLength) / 2 : 0;
 8006524:	4853      	ldr	r0, [pc, #332]	; (8006674 <_Z9drawBoardv+0x180>)
 8006526:	f7ff ffab 	bl	8006480 <_ZN18cDevDisplayGraphic8getWidthEv>
 800652a:	4603      	mov	r3, r0
 800652c:	461a      	mov	r2, r3
 800652e:	897b      	ldrh	r3, [r7, #10]
 8006530:	4293      	cmp	r3, r2
 8006532:	d20c      	bcs.n	800654e <_Z9drawBoardv+0x5a>
 8006534:	484f      	ldr	r0, [pc, #316]	; (8006674 <_Z9drawBoardv+0x180>)
 8006536:	f7ff ffa3 	bl	8006480 <_ZN18cDevDisplayGraphic8getWidthEv>
 800653a:	4603      	mov	r3, r0
 800653c:	461a      	mov	r2, r3
 800653e:	897b      	ldrh	r3, [r7, #10]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	da00      	bge.n	8006548 <_Z9drawBoardv+0x54>
 8006546:	3301      	adds	r3, #1
 8006548:	105b      	asrs	r3, r3, #1
 800654a:	b29b      	uxth	r3, r3
 800654c:	e000      	b.n	8006550 <_Z9drawBoardv+0x5c>
 800654e:	2300      	movs	r3, #0
 8006550:	80fb      	strh	r3, [r7, #6]
	WORD y = sideLength < lcd.getHeight() ? (lcd.getHeight() - sideLength) / 2 : 0;
 8006552:	4848      	ldr	r0, [pc, #288]	; (8006674 <_Z9drawBoardv+0x180>)
 8006554:	f7ff ffa6 	bl	80064a4 <_ZN18cDevDisplayGraphic9getHeightEv>
 8006558:	4603      	mov	r3, r0
 800655a:	461a      	mov	r2, r3
 800655c:	897b      	ldrh	r3, [r7, #10]
 800655e:	4293      	cmp	r3, r2
 8006560:	d20c      	bcs.n	800657c <_Z9drawBoardv+0x88>
 8006562:	4844      	ldr	r0, [pc, #272]	; (8006674 <_Z9drawBoardv+0x180>)
 8006564:	f7ff ff9e 	bl	80064a4 <_ZN18cDevDisplayGraphic9getHeightEv>
 8006568:	4603      	mov	r3, r0
 800656a:	461a      	mov	r2, r3
 800656c:	897b      	ldrh	r3, [r7, #10]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	da00      	bge.n	8006576 <_Z9drawBoardv+0x82>
 8006574:	3301      	adds	r3, #1
 8006576:	105b      	asrs	r3, r3, #1
 8006578:	b29b      	uxth	r3, r3
 800657a:	e000      	b.n	800657e <_Z9drawBoardv+0x8a>
 800657c:	2300      	movs	r3, #0
 800657e:	80bb      	strh	r3, [r7, #4]

	lcd.printf(0, 100, 0, "x=%d", x);
 8006580:	88fb      	ldrh	r3, [r7, #6]
 8006582:	9301      	str	r3, [sp, #4]
 8006584:	4b3d      	ldr	r3, [pc, #244]	; (800667c <_Z9drawBoardv+0x188>)
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	2300      	movs	r3, #0
 800658a:	2264      	movs	r2, #100	; 0x64
 800658c:	2100      	movs	r1, #0
 800658e:	4839      	ldr	r0, [pc, #228]	; (8006674 <_Z9drawBoardv+0x180>)
 8006590:	f7fe ff22 	bl	80053d8 <_ZN18cDevDisplayGraphic6printfEhhhPKcz>
	lcd.printf(1, 100, 0, "y=%d", y);
 8006594:	88bb      	ldrh	r3, [r7, #4]
 8006596:	9301      	str	r3, [sp, #4]
 8006598:	4b39      	ldr	r3, [pc, #228]	; (8006680 <_Z9drawBoardv+0x18c>)
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	2300      	movs	r3, #0
 800659e:	2264      	movs	r2, #100	; 0x64
 80065a0:	2101      	movs	r1, #1
 80065a2:	4834      	ldr	r0, [pc, #208]	; (8006674 <_Z9drawBoardv+0x180>)
 80065a4:	f7fe ff18 	bl	80053d8 <_ZN18cDevDisplayGraphic6printfEhhhPKcz>

	lcd.drawRectangle(0, 0, lcd.getWidth(), lcd.getHeight(), Color::White);
 80065a8:	4832      	ldr	r0, [pc, #200]	; (8006674 <_Z9drawBoardv+0x180>)
 80065aa:	f7ff ff69 	bl	8006480 <_ZN18cDevDisplayGraphic8getWidthEv>
 80065ae:	4603      	mov	r3, r0
 80065b0:	461c      	mov	r4, r3
 80065b2:	4830      	ldr	r0, [pc, #192]	; (8006674 <_Z9drawBoardv+0x180>)
 80065b4:	f7ff ff76 	bl	80064a4 <_ZN18cDevDisplayGraphic9getHeightEv>
 80065b8:	4603      	mov	r3, r0
 80065ba:	461a      	mov	r2, r3
 80065bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065c0:	9301      	str	r3, [sp, #4]
 80065c2:	9200      	str	r2, [sp, #0]
 80065c4:	4623      	mov	r3, r4
 80065c6:	2200      	movs	r2, #0
 80065c8:	2100      	movs	r1, #0
 80065ca:	482a      	ldr	r0, [pc, #168]	; (8006674 <_Z9drawBoardv+0x180>)
 80065cc:	f7ff f865 	bl	800569a <_ZN18cDevDisplayGraphic13drawRectangleEttttt>
	for(int i = 0; i <= 3; i++) {
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b03      	cmp	r3, #3
 80065d8:	dc44      	bgt.n	8006664 <_Z9drawBoardv+0x170>
		lcd.drawLine(x, y + i * cellSize, x + sideLength, y + i * cellSize, 1, Color::Black);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	893a      	ldrh	r2, [r7, #8]
 80065e0:	fb12 f303 	smulbb	r3, r2, r3
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	88bb      	ldrh	r3, [r7, #4]
 80065e8:	4413      	add	r3, r2
 80065ea:	b298      	uxth	r0, r3
 80065ec:	88fa      	ldrh	r2, [r7, #6]
 80065ee:	897b      	ldrh	r3, [r7, #10]
 80065f0:	4413      	add	r3, r2
 80065f2:	b29c      	uxth	r4, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	893a      	ldrh	r2, [r7, #8]
 80065fa:	fb12 f303 	smulbb	r3, r2, r3
 80065fe:	b29a      	uxth	r2, r3
 8006600:	88bb      	ldrh	r3, [r7, #4]
 8006602:	4413      	add	r3, r2
 8006604:	b29b      	uxth	r3, r3
 8006606:	88f9      	ldrh	r1, [r7, #6]
 8006608:	2200      	movs	r2, #0
 800660a:	9202      	str	r2, [sp, #8]
 800660c:	2201      	movs	r2, #1
 800660e:	9201      	str	r2, [sp, #4]
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	4623      	mov	r3, r4
 8006614:	4602      	mov	r2, r0
 8006616:	4817      	ldr	r0, [pc, #92]	; (8006674 <_Z9drawBoardv+0x180>)
 8006618:	f7ff f92d 	bl	8005876 <_ZN18cDevDisplayGraphic8drawLineEtttttt>
		lcd.drawLine(x + i * cellSize, y, x + i * cellSize, y + sideLength, 1, Color::Black);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	b29b      	uxth	r3, r3
 8006620:	893a      	ldrh	r2, [r7, #8]
 8006622:	fb12 f303 	smulbb	r3, r2, r3
 8006626:	b29a      	uxth	r2, r3
 8006628:	88fb      	ldrh	r3, [r7, #6]
 800662a:	4413      	add	r3, r2
 800662c:	b299      	uxth	r1, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	b29b      	uxth	r3, r3
 8006632:	893a      	ldrh	r2, [r7, #8]
 8006634:	fb12 f303 	smulbb	r3, r2, r3
 8006638:	b29a      	uxth	r2, r3
 800663a:	88fb      	ldrh	r3, [r7, #6]
 800663c:	4413      	add	r3, r2
 800663e:	b298      	uxth	r0, r3
 8006640:	88ba      	ldrh	r2, [r7, #4]
 8006642:	897b      	ldrh	r3, [r7, #10]
 8006644:	4413      	add	r3, r2
 8006646:	b29b      	uxth	r3, r3
 8006648:	88ba      	ldrh	r2, [r7, #4]
 800664a:	2400      	movs	r4, #0
 800664c:	9402      	str	r4, [sp, #8]
 800664e:	2401      	movs	r4, #1
 8006650:	9401      	str	r4, [sp, #4]
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	4603      	mov	r3, r0
 8006656:	4807      	ldr	r0, [pc, #28]	; (8006674 <_Z9drawBoardv+0x180>)
 8006658:	f7ff f90d 	bl	8005876 <_ZN18cDevDisplayGraphic8drawLineEtttttt>
	for(int i = 0; i <= 3; i++) {
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3301      	adds	r3, #1
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	e7b7      	b.n	80065d4 <_Z9drawBoardv+0xe0>
	}

	lcd.refresh();
 8006664:	4803      	ldr	r0, [pc, #12]	; (8006674 <_Z9drawBoardv+0x180>)
 8006666:	f7fe fea6 	bl	80053b6 <_ZN18cDevDisplayGraphic7refreshEv>
}
 800666a:	bf00      	nop
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	bd90      	pop	{r4, r7, pc}
 8006672:	bf00      	nop
 8006674:	20000330 	.word	0x20000330
 8006678:	aaaaaaab 	.word	0xaaaaaaab
 800667c:	08007408 	.word	0x08007408
 8006680:	08007410 	.word	0x08007410

08006684 <main>:

int main(void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
  lcd.clear();
 800668a:	4808      	ldr	r0, [pc, #32]	; (80066ac <main+0x28>)
 800668c:	f7fe fe82 	bl	8005394 <_ZN18cDevDisplayGraphic5clearEv>
  //lcd.setZoom(2);

  drawBoard();
 8006690:	f7ff ff30 	bl	80064f4 <_Z9drawBoardv>

  cHwI2Cmaster::Device i2cTouch( i2c, 0x54 /*I2C-Addresse*/ );
 8006694:	1d3b      	adds	r3, r7, #4
 8006696:	2254      	movs	r2, #84	; 0x54
 8006698:	4905      	ldr	r1, [pc, #20]	; (80066b0 <main+0x2c>)
 800669a:	4618      	mov	r0, r3
 800669c:	f7ff fed4 	bl	8006448 <_ZN12cHwI2Cmaster6DeviceC1ERS_h>
    

}
 80066a0:	2300      	movs	r3, #0
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	20000330 	.word	0x20000330
 80066b0:	20000338 	.word	0x20000338

080066b4 <_ZNK18cHwDisplayFontDataILt96ELh12EEcv14cHwDisplayFontEv>:

    //---------------------------------------------------------------
    /*! Convert properties and data 
     * 
     */
    operator cHwDisplayFont( void ) const
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
    {
      return( cHwDisplayFont( &prop, (BYTE*)data ) );
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	3305      	adds	r3, #5
 80066c4:	461a      	mov	r2, r3
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7fd ff10 	bl	80044ec <_ZN14cHwDisplayFontC1EPK24cHwDisplayFontPropertiesPKh>
    } 
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <_Z41__static_initialization_and_destruction_0ii>:
 80066d4:	b590      	push	{r4, r7, lr}
 80066d6:	b08b      	sub	sp, #44	; 0x2c
 80066d8:	af04      	add	r7, sp, #16
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	f040 8081 	bne.w	80067e8 <_Z41__static_initialization_and_destruction_0ii+0x114>
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d17b      	bne.n	80067e8 <_Z41__static_initialization_and_destruction_0ii+0x114>

//*******************************************************************
#include "Com/Hardware/Display/Font/Font_8x12.h"

//*******************************************************************
cSystem sys;
 80066f0:	2100      	movs	r1, #0
 80066f2:	483f      	ldr	r0, [pc, #252]	; (80067f0 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80066f4:	f7fb f9fa 	bl	8001aec <_ZN7cSystemC1Eh>

	END_OF_TABLE
};


cHwPort_N            portA        ( cHwPort_N::PA );
 80066f8:	2100      	movs	r1, #0
 80066fa:	483e      	ldr	r0, [pc, #248]	; (80067f4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80066fc:	f7fb ff76 	bl	80025ec <_ZN9cHwPort_NC1ENS_6PortIdE>
cHwPort_N            portB        ( cHwPort_N::PB );
 8006700:	2101      	movs	r1, #1
 8006702:	483d      	ldr	r0, [pc, #244]	; (80067f8 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8006704:	f7fb ff72 	bl	80025ec <_ZN9cHwPort_NC1ENS_6PortIdE>
cHwPort_N            portC        ( cHwPort_N::PC );
 8006708:	2102      	movs	r1, #2
 800670a:	483c      	ldr	r0, [pc, #240]	; (80067fc <_Z41__static_initialization_and_destruction_0ii+0x128>)
 800670c:	f7fb ff6e 	bl	80025ec <_ZN9cHwPort_NC1ENS_6PortIdE>
cHwPort_N            portD        ( cHwPort_N::PD );
 8006710:	2103      	movs	r1, #3
 8006712:	483b      	ldr	r0, [pc, #236]	; (8006800 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8006714:	f7fb ff6a 	bl	80025ec <_ZN9cHwPort_NC1ENS_6PortIdE>
cHwPort_N            portE        ( cHwPort_N::PE );
 8006718:	2104      	movs	r1, #4
 800671a:	483a      	ldr	r0, [pc, #232]	; (8006804 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 800671c:	f7fb ff66 	bl	80025ec <_ZN9cHwPort_NC1ENS_6PortIdE>
cHwPort_N            portI        ( cHwPort_N::PI );      
 8006720:	2108      	movs	r1, #8
 8006722:	4839      	ldr	r0, [pc, #228]	; (8006808 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8006724:	f7fb ff62 	bl	80025ec <_ZN9cHwPort_NC1ENS_6PortIdE>
cHwPort_N            portJ        ( cHwPort_N::PJ );
 8006728:	2109      	movs	r1, #9
 800672a:	4838      	ldr	r0, [pc, #224]	; (800680c <_Z41__static_initialization_and_destruction_0ii+0x138>)
 800672c:	f7fb ff5e 	bl	80025ec <_ZN9cHwPort_NC1ENS_6PortIdE>
	
cHwTimer_N           timer        ( cHwTimer_N::TIM_3, 10000 );
 8006730:	f242 7210 	movw	r2, #10000	; 0x2710
 8006734:	2103      	movs	r1, #3
 8006736:	4836      	ldr	r0, [pc, #216]	; (8006810 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8006738:	f7fc fae6 	bl	8002d08 <_ZN10cHwTimer_NC1ENS_7TimerIdEm>

cHwUART_N            uart         ( cHwUART_N::USART_1,
                                    cHwUART::BR_115200,
                                    255,
                                    255 );
 800673c:	23ff      	movs	r3, #255	; 0xff
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	23ff      	movs	r3, #255	; 0xff
 8006742:	2206      	movs	r2, #6
 8006744:	2101      	movs	r1, #1
 8006746:	4833      	ldr	r0, [pc, #204]	; (8006814 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8006748:	f7fc fec4 	bl	80034d4 <_ZN9cHwUART_NC1ENS_8USART_IdEmhh>

cHwRTC_0 rtc(cHwRTC_0::LSI);
 800674c:	2100      	movs	r1, #0
 800674e:	4832      	ldr	r0, [pc, #200]	; (8006818 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8006750:	f7fc f88c 	bl	800286c <_ZN8cHwRTC_0C1ENS_17RTC_ClockConfig_tE>

//*******************************************************************
cHwPort::Pin     LD1       ( portJ, 13 );
 8006754:	220d      	movs	r2, #13
 8006756:	492d      	ldr	r1, [pc, #180]	; (800680c <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8006758:	4830      	ldr	r0, [pc, #192]	; (800681c <_Z41__static_initialization_and_destruction_0ii+0x148>)
 800675a:	f7fe fc51 	bl	8005000 <_ZN7cHwPort3PinC1ERS_h>
cHwPort::Pin     LD2       ( portJ,  5 );
 800675e:	2205      	movs	r2, #5
 8006760:	492a      	ldr	r1, [pc, #168]	; (800680c <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8006762:	482f      	ldr	r0, [pc, #188]	; (8006820 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8006764:	f7fe fc4c 	bl	8005000 <_ZN7cHwPort3PinC1ERS_h>

cHwPort::Pin     B1        ( portA, 0 );
 8006768:	2200      	movs	r2, #0
 800676a:	4922      	ldr	r1, [pc, #136]	; (80067f4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 800676c:	482d      	ldr	r0, [pc, #180]	; (8006824 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800676e:	f7fe fc47 	bl	8005000 <_ZN7cHwPort3PinC1ERS_h>

//*******************************************************************
// UART (via USB)
//*******************************************************************
cDevTextIO_UART com ( uart, 255, 255 );
 8006772:	4b2d      	ldr	r3, [pc, #180]	; (8006828 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8006774:	9301      	str	r3, [sp, #4]
 8006776:	4b2d      	ldr	r3, [pc, #180]	; (800682c <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	23ff      	movs	r3, #255	; 0xff
 800677c:	22ff      	movs	r2, #255	; 0xff
 800677e:	4925      	ldr	r1, [pc, #148]	; (8006814 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8006780:	482b      	ldr	r0, [pc, #172]	; (8006830 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8006782:	f7ff fa13 	bl	8005bac <_ZN15cDevTextIO_UARTC1ER7cHwUARThhPKcS3_>

//*******************************************************************
// LCD
//*******************************************************************
cHwFMC              fmc        ( cHwFMC::SDRAM_Bank1 );  
 8006786:	2200      	movs	r2, #0
 8006788:	2102      	movs	r1, #2
 800678a:	482a      	ldr	r0, [pc, #168]	; (8006834 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 800678c:	f7ff fb9e 	bl	8005ecc <_ZN6cHwFMCC1ENS_7FMCtypeEb>
cHwDSI              hwDSI      ( fmc.startAddr()     );
 8006790:	4828      	ldr	r0, [pc, #160]	; (8006834 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8006792:	f7ff fceb 	bl	800616c <_ZN6cHwFMC9startAddrEv>
 8006796:	4603      	mov	r3, r0
 8006798:	4619      	mov	r1, r3
 800679a:	4827      	ldr	r0, [pc, #156]	; (8006838 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 800679c:	f7ff fdb8 	bl	8006310 <_ZN6cHwDSIC1Em>
cHwPort::Pin        lcdResetPin( portJ, 15 );
 80067a0:	220f      	movs	r2, #15
 80067a2:	491a      	ldr	r1, [pc, #104]	; (800680c <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80067a4:	4825      	ldr	r0, [pc, #148]	; (800683c <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80067a6:	f7fe fc2b 	bl	8005000 <_ZN7cHwPort3PinC1ERS_h>
                         
cHwDisp_OTM8009Aram disp       ( hwDSI,lcdResetPin, 
                                 cHwDisp_OTM8009A::LANDSCAPE_90, 
                                 fontFont_8x12, 2 );
 80067aa:	f107 030c 	add.w	r3, r7, #12
 80067ae:	4924      	ldr	r1, [pc, #144]	; (8006840 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7ff ff7f 	bl	80066b4 <_ZNK18cHwDisplayFontDataILt96ELh12EEcv14cHwDisplayFontEv>
 80067b6:	2302      	movs	r3, #2
 80067b8:	9303      	str	r3, [sp, #12]
 80067ba:	466c      	mov	r4, sp
 80067bc:	f107 030c 	add.w	r3, r7, #12
 80067c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80067c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80067c8:	2301      	movs	r3, #1
 80067ca:	4a1c      	ldr	r2, [pc, #112]	; (800683c <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80067cc:	491a      	ldr	r1, [pc, #104]	; (8006838 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 80067ce:	481d      	ldr	r0, [pc, #116]	; (8006844 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 80067d0:	f7fa feba 	bl	8001548 <_ZN19cHwDisp_OTM8009AramC1ER6cHwDSIRN7cHwPort3PinEN16cHwDisp_OTM8009A11OrientationE14cHwDisplayFonth>
cDevDisplayGraphic  lcd        ( disp );
 80067d4:	491b      	ldr	r1, [pc, #108]	; (8006844 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 80067d6:	481c      	ldr	r0, [pc, #112]	; (8006848 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 80067d8:	f7fe fdc2 	bl	8005360 <_ZN18cDevDisplayGraphicC1ER17cHwDisplayGraphic>

//*******************************************************************
// Touch
//*******************************************************************
cHwI2Cmaster_N      i2c        ( cHwI2Cmaster_N::I2C_4,
                                 cHwI2Cmaster::CR_400kHz );
 80067dc:	2301      	movs	r3, #1
 80067de:	2203      	movs	r2, #3
 80067e0:	2104      	movs	r1, #4
 80067e2:	481a      	ldr	r0, [pc, #104]	; (800684c <_Z41__static_initialization_and_destruction_0ii+0x178>)
 80067e4:	f7fb fcc2 	bl	800216c <_ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh>
 80067e8:	bf00      	nop
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd90      	pop	{r4, r7, pc}
 80067f0:	20000208 	.word	0x20000208
 80067f4:	2000020c 	.word	0x2000020c
 80067f8:	20000214 	.word	0x20000214
 80067fc:	2000021c 	.word	0x2000021c
 8006800:	20000224 	.word	0x20000224
 8006804:	2000022c 	.word	0x2000022c
 8006808:	20000234 	.word	0x20000234
 800680c:	2000023c 	.word	0x2000023c
 8006810:	20000244 	.word	0x20000244
 8006814:	2000025c 	.word	0x2000025c
 8006818:	20000278 	.word	0x20000278
 800681c:	2000027c 	.word	0x2000027c
 8006820:	2000028c 	.word	0x2000028c
 8006824:	2000029c 	.word	0x2000029c
 8006828:	08007418 	.word	0x08007418
 800682c:	0800741c 	.word	0x0800741c
 8006830:	200002ac 	.word	0x200002ac
 8006834:	200002cc 	.word	0x200002cc
 8006838:	200002d0 	.word	0x200002d0
 800683c:	200002d8 	.word	0x200002d8
 8006840:	08007784 	.word	0x08007784
 8006844:	200002e8 	.word	0x200002e8
 8006848:	20000330 	.word	0x20000330
 800684c:	20000338 	.word	0x20000338

08006850 <_GLOBAL__sub_I_sys>:
 8006850:	b580      	push	{r7, lr}
 8006852:	af00      	add	r7, sp, #0
 8006854:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006858:	2001      	movs	r0, #1
 800685a:	f7ff ff3b 	bl	80066d4 <_Z41__static_initialization_and_destruction_0ii>
 800685e:	bd80      	pop	{r7, pc}

08006860 <sqrtf>:
 8006860:	b508      	push	{r3, lr}
 8006862:	ed2d 8b02 	vpush	{d8}
 8006866:	eeb0 8a40 	vmov.f32	s16, s0
 800686a:	f000 f81f 	bl	80068ac <__ieee754_sqrtf>
 800686e:	4b0d      	ldr	r3, [pc, #52]	; (80068a4 <sqrtf+0x44>)
 8006870:	f993 3000 	ldrsb.w	r3, [r3]
 8006874:	3301      	adds	r3, #1
 8006876:	d011      	beq.n	800689c <sqrtf+0x3c>
 8006878:	eeb4 8a48 	vcmp.f32	s16, s16
 800687c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006880:	d60c      	bvs.n	800689c <sqrtf+0x3c>
 8006882:	eddf 8a09 	vldr	s17, [pc, #36]	; 80068a8 <sqrtf+0x48>
 8006886:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800688a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800688e:	d505      	bpl.n	800689c <sqrtf+0x3c>
 8006890:	f000 f816 	bl	80068c0 <__errno>
 8006894:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006898:	2321      	movs	r3, #33	; 0x21
 800689a:	6003      	str	r3, [r0, #0]
 800689c:	ecbd 8b02 	vpop	{d8}
 80068a0:	bd08      	pop	{r3, pc}
 80068a2:	bf00      	nop
 80068a4:	20000124 	.word	0x20000124
 80068a8:	00000000 	.word	0x00000000

080068ac <__ieee754_sqrtf>:
 80068ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80068b0:	4770      	bx	lr

080068b2 <abort>:
 80068b2:	b508      	push	{r3, lr}
 80068b4:	2006      	movs	r0, #6
 80068b6:	f000 f925 	bl	8006b04 <raise>
 80068ba:	2001      	movs	r0, #1
 80068bc:	f000 fcfc 	bl	80072b8 <_exit>

080068c0 <__errno>:
 80068c0:	4b01      	ldr	r3, [pc, #4]	; (80068c8 <__errno+0x8>)
 80068c2:	6818      	ldr	r0, [r3, #0]
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	20000128 	.word	0x20000128

080068cc <__libc_init_array>:
 80068cc:	b570      	push	{r4, r5, r6, lr}
 80068ce:	4d0d      	ldr	r5, [pc, #52]	; (8006904 <__libc_init_array+0x38>)
 80068d0:	4c0d      	ldr	r4, [pc, #52]	; (8006908 <__libc_init_array+0x3c>)
 80068d2:	1b64      	subs	r4, r4, r5
 80068d4:	10a4      	asrs	r4, r4, #2
 80068d6:	2600      	movs	r6, #0
 80068d8:	42a6      	cmp	r6, r4
 80068da:	d109      	bne.n	80068f0 <__libc_init_array+0x24>
 80068dc:	4d0b      	ldr	r5, [pc, #44]	; (800690c <__libc_init_array+0x40>)
 80068de:	4c0c      	ldr	r4, [pc, #48]	; (8006910 <__libc_init_array+0x44>)
 80068e0:	f000 fcec 	bl	80072bc <_init>
 80068e4:	1b64      	subs	r4, r4, r5
 80068e6:	10a4      	asrs	r4, r4, #2
 80068e8:	2600      	movs	r6, #0
 80068ea:	42a6      	cmp	r6, r4
 80068ec:	d105      	bne.n	80068fa <__libc_init_array+0x2e>
 80068ee:	bd70      	pop	{r4, r5, r6, pc}
 80068f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068f4:	4798      	blx	r3
 80068f6:	3601      	adds	r6, #1
 80068f8:	e7ee      	b.n	80068d8 <__libc_init_array+0xc>
 80068fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80068fe:	4798      	blx	r3
 8006900:	3601      	adds	r6, #1
 8006902:	e7f2      	b.n	80068ea <__libc_init_array+0x1e>
 8006904:	08007c50 	.word	0x08007c50
 8006908:	08007c50 	.word	0x08007c50
 800690c:	08007c50 	.word	0x08007c50
 8006910:	08007c58 	.word	0x08007c58

08006914 <malloc>:
 8006914:	4b02      	ldr	r3, [pc, #8]	; (8006920 <malloc+0xc>)
 8006916:	4601      	mov	r1, r0
 8006918:	6818      	ldr	r0, [r3, #0]
 800691a:	f000 b861 	b.w	80069e0 <_malloc_r>
 800691e:	bf00      	nop
 8006920:	20000128 	.word	0x20000128

08006924 <memcpy>:
 8006924:	440a      	add	r2, r1
 8006926:	4291      	cmp	r1, r2
 8006928:	f100 33ff 	add.w	r3, r0, #4294967295
 800692c:	d100      	bne.n	8006930 <memcpy+0xc>
 800692e:	4770      	bx	lr
 8006930:	b510      	push	{r4, lr}
 8006932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800693a:	4291      	cmp	r1, r2
 800693c:	d1f9      	bne.n	8006932 <memcpy+0xe>
 800693e:	bd10      	pop	{r4, pc}

08006940 <_free_r>:
 8006940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006942:	2900      	cmp	r1, #0
 8006944:	d048      	beq.n	80069d8 <_free_r+0x98>
 8006946:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800694a:	9001      	str	r0, [sp, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	f1a1 0404 	sub.w	r4, r1, #4
 8006952:	bfb8      	it	lt
 8006954:	18e4      	addlt	r4, r4, r3
 8006956:	f000 f94b 	bl	8006bf0 <__malloc_lock>
 800695a:	4a20      	ldr	r2, [pc, #128]	; (80069dc <_free_r+0x9c>)
 800695c:	9801      	ldr	r0, [sp, #4]
 800695e:	6813      	ldr	r3, [r2, #0]
 8006960:	4615      	mov	r5, r2
 8006962:	b933      	cbnz	r3, 8006972 <_free_r+0x32>
 8006964:	6063      	str	r3, [r4, #4]
 8006966:	6014      	str	r4, [r2, #0]
 8006968:	b003      	add	sp, #12
 800696a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800696e:	f000 b945 	b.w	8006bfc <__malloc_unlock>
 8006972:	42a3      	cmp	r3, r4
 8006974:	d90b      	bls.n	800698e <_free_r+0x4e>
 8006976:	6821      	ldr	r1, [r4, #0]
 8006978:	1862      	adds	r2, r4, r1
 800697a:	4293      	cmp	r3, r2
 800697c:	bf04      	itt	eq
 800697e:	681a      	ldreq	r2, [r3, #0]
 8006980:	685b      	ldreq	r3, [r3, #4]
 8006982:	6063      	str	r3, [r4, #4]
 8006984:	bf04      	itt	eq
 8006986:	1852      	addeq	r2, r2, r1
 8006988:	6022      	streq	r2, [r4, #0]
 800698a:	602c      	str	r4, [r5, #0]
 800698c:	e7ec      	b.n	8006968 <_free_r+0x28>
 800698e:	461a      	mov	r2, r3
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	b10b      	cbz	r3, 8006998 <_free_r+0x58>
 8006994:	42a3      	cmp	r3, r4
 8006996:	d9fa      	bls.n	800698e <_free_r+0x4e>
 8006998:	6811      	ldr	r1, [r2, #0]
 800699a:	1855      	adds	r5, r2, r1
 800699c:	42a5      	cmp	r5, r4
 800699e:	d10b      	bne.n	80069b8 <_free_r+0x78>
 80069a0:	6824      	ldr	r4, [r4, #0]
 80069a2:	4421      	add	r1, r4
 80069a4:	1854      	adds	r4, r2, r1
 80069a6:	42a3      	cmp	r3, r4
 80069a8:	6011      	str	r1, [r2, #0]
 80069aa:	d1dd      	bne.n	8006968 <_free_r+0x28>
 80069ac:	681c      	ldr	r4, [r3, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	6053      	str	r3, [r2, #4]
 80069b2:	4421      	add	r1, r4
 80069b4:	6011      	str	r1, [r2, #0]
 80069b6:	e7d7      	b.n	8006968 <_free_r+0x28>
 80069b8:	d902      	bls.n	80069c0 <_free_r+0x80>
 80069ba:	230c      	movs	r3, #12
 80069bc:	6003      	str	r3, [r0, #0]
 80069be:	e7d3      	b.n	8006968 <_free_r+0x28>
 80069c0:	6825      	ldr	r5, [r4, #0]
 80069c2:	1961      	adds	r1, r4, r5
 80069c4:	428b      	cmp	r3, r1
 80069c6:	bf04      	itt	eq
 80069c8:	6819      	ldreq	r1, [r3, #0]
 80069ca:	685b      	ldreq	r3, [r3, #4]
 80069cc:	6063      	str	r3, [r4, #4]
 80069ce:	bf04      	itt	eq
 80069d0:	1949      	addeq	r1, r1, r5
 80069d2:	6021      	streq	r1, [r4, #0]
 80069d4:	6054      	str	r4, [r2, #4]
 80069d6:	e7c7      	b.n	8006968 <_free_r+0x28>
 80069d8:	b003      	add	sp, #12
 80069da:	bd30      	pop	{r4, r5, pc}
 80069dc:	20000344 	.word	0x20000344

080069e0 <_malloc_r>:
 80069e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e2:	1ccd      	adds	r5, r1, #3
 80069e4:	f025 0503 	bic.w	r5, r5, #3
 80069e8:	3508      	adds	r5, #8
 80069ea:	2d0c      	cmp	r5, #12
 80069ec:	bf38      	it	cc
 80069ee:	250c      	movcc	r5, #12
 80069f0:	2d00      	cmp	r5, #0
 80069f2:	4606      	mov	r6, r0
 80069f4:	db01      	blt.n	80069fa <_malloc_r+0x1a>
 80069f6:	42a9      	cmp	r1, r5
 80069f8:	d903      	bls.n	8006a02 <_malloc_r+0x22>
 80069fa:	230c      	movs	r3, #12
 80069fc:	6033      	str	r3, [r6, #0]
 80069fe:	2000      	movs	r0, #0
 8006a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a02:	f000 f8f5 	bl	8006bf0 <__malloc_lock>
 8006a06:	4921      	ldr	r1, [pc, #132]	; (8006a8c <_malloc_r+0xac>)
 8006a08:	680a      	ldr	r2, [r1, #0]
 8006a0a:	4614      	mov	r4, r2
 8006a0c:	b99c      	cbnz	r4, 8006a36 <_malloc_r+0x56>
 8006a0e:	4f20      	ldr	r7, [pc, #128]	; (8006a90 <_malloc_r+0xb0>)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	b923      	cbnz	r3, 8006a1e <_malloc_r+0x3e>
 8006a14:	4621      	mov	r1, r4
 8006a16:	4630      	mov	r0, r6
 8006a18:	f000 f83c 	bl	8006a94 <_sbrk_r>
 8006a1c:	6038      	str	r0, [r7, #0]
 8006a1e:	4629      	mov	r1, r5
 8006a20:	4630      	mov	r0, r6
 8006a22:	f000 f837 	bl	8006a94 <_sbrk_r>
 8006a26:	1c43      	adds	r3, r0, #1
 8006a28:	d123      	bne.n	8006a72 <_malloc_r+0x92>
 8006a2a:	230c      	movs	r3, #12
 8006a2c:	6033      	str	r3, [r6, #0]
 8006a2e:	4630      	mov	r0, r6
 8006a30:	f000 f8e4 	bl	8006bfc <__malloc_unlock>
 8006a34:	e7e3      	b.n	80069fe <_malloc_r+0x1e>
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	1b5b      	subs	r3, r3, r5
 8006a3a:	d417      	bmi.n	8006a6c <_malloc_r+0x8c>
 8006a3c:	2b0b      	cmp	r3, #11
 8006a3e:	d903      	bls.n	8006a48 <_malloc_r+0x68>
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	441c      	add	r4, r3
 8006a44:	6025      	str	r5, [r4, #0]
 8006a46:	e004      	b.n	8006a52 <_malloc_r+0x72>
 8006a48:	6863      	ldr	r3, [r4, #4]
 8006a4a:	42a2      	cmp	r2, r4
 8006a4c:	bf0c      	ite	eq
 8006a4e:	600b      	streq	r3, [r1, #0]
 8006a50:	6053      	strne	r3, [r2, #4]
 8006a52:	4630      	mov	r0, r6
 8006a54:	f000 f8d2 	bl	8006bfc <__malloc_unlock>
 8006a58:	f104 000b 	add.w	r0, r4, #11
 8006a5c:	1d23      	adds	r3, r4, #4
 8006a5e:	f020 0007 	bic.w	r0, r0, #7
 8006a62:	1ac2      	subs	r2, r0, r3
 8006a64:	d0cc      	beq.n	8006a00 <_malloc_r+0x20>
 8006a66:	1a1b      	subs	r3, r3, r0
 8006a68:	50a3      	str	r3, [r4, r2]
 8006a6a:	e7c9      	b.n	8006a00 <_malloc_r+0x20>
 8006a6c:	4622      	mov	r2, r4
 8006a6e:	6864      	ldr	r4, [r4, #4]
 8006a70:	e7cc      	b.n	8006a0c <_malloc_r+0x2c>
 8006a72:	1cc4      	adds	r4, r0, #3
 8006a74:	f024 0403 	bic.w	r4, r4, #3
 8006a78:	42a0      	cmp	r0, r4
 8006a7a:	d0e3      	beq.n	8006a44 <_malloc_r+0x64>
 8006a7c:	1a21      	subs	r1, r4, r0
 8006a7e:	4630      	mov	r0, r6
 8006a80:	f000 f808 	bl	8006a94 <_sbrk_r>
 8006a84:	3001      	adds	r0, #1
 8006a86:	d1dd      	bne.n	8006a44 <_malloc_r+0x64>
 8006a88:	e7cf      	b.n	8006a2a <_malloc_r+0x4a>
 8006a8a:	bf00      	nop
 8006a8c:	20000344 	.word	0x20000344
 8006a90:	20000348 	.word	0x20000348

08006a94 <_sbrk_r>:
 8006a94:	b538      	push	{r3, r4, r5, lr}
 8006a96:	4d06      	ldr	r5, [pc, #24]	; (8006ab0 <_sbrk_r+0x1c>)
 8006a98:	2300      	movs	r3, #0
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	4608      	mov	r0, r1
 8006a9e:	602b      	str	r3, [r5, #0]
 8006aa0:	f000 fbfc 	bl	800729c <_sbrk>
 8006aa4:	1c43      	adds	r3, r0, #1
 8006aa6:	d102      	bne.n	8006aae <_sbrk_r+0x1a>
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	b103      	cbz	r3, 8006aae <_sbrk_r+0x1a>
 8006aac:	6023      	str	r3, [r4, #0]
 8006aae:	bd38      	pop	{r3, r4, r5, pc}
 8006ab0:	20000350 	.word	0x20000350

08006ab4 <_raise_r>:
 8006ab4:	291f      	cmp	r1, #31
 8006ab6:	b538      	push	{r3, r4, r5, lr}
 8006ab8:	4604      	mov	r4, r0
 8006aba:	460d      	mov	r5, r1
 8006abc:	d904      	bls.n	8006ac8 <_raise_r+0x14>
 8006abe:	2316      	movs	r3, #22
 8006ac0:	6003      	str	r3, [r0, #0]
 8006ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac6:	bd38      	pop	{r3, r4, r5, pc}
 8006ac8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006aca:	b112      	cbz	r2, 8006ad2 <_raise_r+0x1e>
 8006acc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ad0:	b94b      	cbnz	r3, 8006ae6 <_raise_r+0x32>
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f000 f830 	bl	8006b38 <_getpid_r>
 8006ad8:	462a      	mov	r2, r5
 8006ada:	4601      	mov	r1, r0
 8006adc:	4620      	mov	r0, r4
 8006ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ae2:	f000 b817 	b.w	8006b14 <_kill_r>
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d00a      	beq.n	8006b00 <_raise_r+0x4c>
 8006aea:	1c59      	adds	r1, r3, #1
 8006aec:	d103      	bne.n	8006af6 <_raise_r+0x42>
 8006aee:	2316      	movs	r3, #22
 8006af0:	6003      	str	r3, [r0, #0]
 8006af2:	2001      	movs	r0, #1
 8006af4:	e7e7      	b.n	8006ac6 <_raise_r+0x12>
 8006af6:	2400      	movs	r4, #0
 8006af8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006afc:	4628      	mov	r0, r5
 8006afe:	4798      	blx	r3
 8006b00:	2000      	movs	r0, #0
 8006b02:	e7e0      	b.n	8006ac6 <_raise_r+0x12>

08006b04 <raise>:
 8006b04:	4b02      	ldr	r3, [pc, #8]	; (8006b10 <raise+0xc>)
 8006b06:	4601      	mov	r1, r0
 8006b08:	6818      	ldr	r0, [r3, #0]
 8006b0a:	f7ff bfd3 	b.w	8006ab4 <_raise_r>
 8006b0e:	bf00      	nop
 8006b10:	20000128 	.word	0x20000128

08006b14 <_kill_r>:
 8006b14:	b538      	push	{r3, r4, r5, lr}
 8006b16:	4d07      	ldr	r5, [pc, #28]	; (8006b34 <_kill_r+0x20>)
 8006b18:	2300      	movs	r3, #0
 8006b1a:	4604      	mov	r4, r0
 8006b1c:	4608      	mov	r0, r1
 8006b1e:	4611      	mov	r1, r2
 8006b20:	602b      	str	r3, [r5, #0]
 8006b22:	f000 fbb3 	bl	800728c <_kill>
 8006b26:	1c43      	adds	r3, r0, #1
 8006b28:	d102      	bne.n	8006b30 <_kill_r+0x1c>
 8006b2a:	682b      	ldr	r3, [r5, #0]
 8006b2c:	b103      	cbz	r3, 8006b30 <_kill_r+0x1c>
 8006b2e:	6023      	str	r3, [r4, #0]
 8006b30:	bd38      	pop	{r3, r4, r5, pc}
 8006b32:	bf00      	nop
 8006b34:	20000350 	.word	0x20000350

08006b38 <_getpid_r>:
 8006b38:	f000 bba0 	b.w	800727c <_getpid>

08006b3c <_vsniprintf_r>:
 8006b3c:	b530      	push	{r4, r5, lr}
 8006b3e:	1e14      	subs	r4, r2, #0
 8006b40:	4605      	mov	r5, r0
 8006b42:	b09b      	sub	sp, #108	; 0x6c
 8006b44:	4618      	mov	r0, r3
 8006b46:	da05      	bge.n	8006b54 <_vsniprintf_r+0x18>
 8006b48:	238b      	movs	r3, #139	; 0x8b
 8006b4a:	602b      	str	r3, [r5, #0]
 8006b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b50:	b01b      	add	sp, #108	; 0x6c
 8006b52:	bd30      	pop	{r4, r5, pc}
 8006b54:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006b58:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006b5c:	bf14      	ite	ne
 8006b5e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006b62:	4623      	moveq	r3, r4
 8006b64:	9302      	str	r3, [sp, #8]
 8006b66:	9305      	str	r3, [sp, #20]
 8006b68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b6c:	9100      	str	r1, [sp, #0]
 8006b6e:	9104      	str	r1, [sp, #16]
 8006b70:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006b74:	4602      	mov	r2, r0
 8006b76:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006b78:	4669      	mov	r1, sp
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	f000 f8a0 	bl	8006cc0 <_svfiprintf_r>
 8006b80:	1c43      	adds	r3, r0, #1
 8006b82:	bfbc      	itt	lt
 8006b84:	238b      	movlt	r3, #139	; 0x8b
 8006b86:	602b      	strlt	r3, [r5, #0]
 8006b88:	2c00      	cmp	r4, #0
 8006b8a:	d0e1      	beq.n	8006b50 <_vsniprintf_r+0x14>
 8006b8c:	9b00      	ldr	r3, [sp, #0]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	e7dd      	b.n	8006b50 <_vsniprintf_r+0x14>

08006b94 <vsniprintf>:
 8006b94:	b507      	push	{r0, r1, r2, lr}
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	460a      	mov	r2, r1
 8006b9c:	4601      	mov	r1, r0
 8006b9e:	4803      	ldr	r0, [pc, #12]	; (8006bac <vsniprintf+0x18>)
 8006ba0:	6800      	ldr	r0, [r0, #0]
 8006ba2:	f7ff ffcb 	bl	8006b3c <_vsniprintf_r>
 8006ba6:	b003      	add	sp, #12
 8006ba8:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bac:	20000128 	.word	0x20000128

08006bb0 <_vsiprintf_r>:
 8006bb0:	b500      	push	{lr}
 8006bb2:	b09b      	sub	sp, #108	; 0x6c
 8006bb4:	9100      	str	r1, [sp, #0]
 8006bb6:	9104      	str	r1, [sp, #16]
 8006bb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006bbc:	9105      	str	r1, [sp, #20]
 8006bbe:	9102      	str	r1, [sp, #8]
 8006bc0:	4905      	ldr	r1, [pc, #20]	; (8006bd8 <_vsiprintf_r+0x28>)
 8006bc2:	9103      	str	r1, [sp, #12]
 8006bc4:	4669      	mov	r1, sp
 8006bc6:	f000 f87b 	bl	8006cc0 <_svfiprintf_r>
 8006bca:	9b00      	ldr	r3, [sp, #0]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	701a      	strb	r2, [r3, #0]
 8006bd0:	b01b      	add	sp, #108	; 0x6c
 8006bd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bd6:	bf00      	nop
 8006bd8:	ffff0208 	.word	0xffff0208

08006bdc <vsiprintf>:
 8006bdc:	4613      	mov	r3, r2
 8006bde:	460a      	mov	r2, r1
 8006be0:	4601      	mov	r1, r0
 8006be2:	4802      	ldr	r0, [pc, #8]	; (8006bec <vsiprintf+0x10>)
 8006be4:	6800      	ldr	r0, [r0, #0]
 8006be6:	f7ff bfe3 	b.w	8006bb0 <_vsiprintf_r>
 8006bea:	bf00      	nop
 8006bec:	20000128 	.word	0x20000128

08006bf0 <__malloc_lock>:
 8006bf0:	4801      	ldr	r0, [pc, #4]	; (8006bf8 <__malloc_lock+0x8>)
 8006bf2:	f000 baf9 	b.w	80071e8 <__retarget_lock_acquire_recursive>
 8006bf6:	bf00      	nop
 8006bf8:	20000358 	.word	0x20000358

08006bfc <__malloc_unlock>:
 8006bfc:	4801      	ldr	r0, [pc, #4]	; (8006c04 <__malloc_unlock+0x8>)
 8006bfe:	f000 baf4 	b.w	80071ea <__retarget_lock_release_recursive>
 8006c02:	bf00      	nop
 8006c04:	20000358 	.word	0x20000358

08006c08 <__ssputs_r>:
 8006c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c0c:	688e      	ldr	r6, [r1, #8]
 8006c0e:	429e      	cmp	r6, r3
 8006c10:	4682      	mov	sl, r0
 8006c12:	460c      	mov	r4, r1
 8006c14:	4690      	mov	r8, r2
 8006c16:	461f      	mov	r7, r3
 8006c18:	d838      	bhi.n	8006c8c <__ssputs_r+0x84>
 8006c1a:	898a      	ldrh	r2, [r1, #12]
 8006c1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c20:	d032      	beq.n	8006c88 <__ssputs_r+0x80>
 8006c22:	6825      	ldr	r5, [r4, #0]
 8006c24:	6909      	ldr	r1, [r1, #16]
 8006c26:	eba5 0901 	sub.w	r9, r5, r1
 8006c2a:	6965      	ldr	r5, [r4, #20]
 8006c2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c34:	3301      	adds	r3, #1
 8006c36:	444b      	add	r3, r9
 8006c38:	106d      	asrs	r5, r5, #1
 8006c3a:	429d      	cmp	r5, r3
 8006c3c:	bf38      	it	cc
 8006c3e:	461d      	movcc	r5, r3
 8006c40:	0553      	lsls	r3, r2, #21
 8006c42:	d531      	bpl.n	8006ca8 <__ssputs_r+0xa0>
 8006c44:	4629      	mov	r1, r5
 8006c46:	f7ff fecb 	bl	80069e0 <_malloc_r>
 8006c4a:	4606      	mov	r6, r0
 8006c4c:	b950      	cbnz	r0, 8006c64 <__ssputs_r+0x5c>
 8006c4e:	230c      	movs	r3, #12
 8006c50:	f8ca 3000 	str.w	r3, [sl]
 8006c54:	89a3      	ldrh	r3, [r4, #12]
 8006c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c5a:	81a3      	strh	r3, [r4, #12]
 8006c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c64:	6921      	ldr	r1, [r4, #16]
 8006c66:	464a      	mov	r2, r9
 8006c68:	f7ff fe5c 	bl	8006924 <memcpy>
 8006c6c:	89a3      	ldrh	r3, [r4, #12]
 8006c6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c76:	81a3      	strh	r3, [r4, #12]
 8006c78:	6126      	str	r6, [r4, #16]
 8006c7a:	6165      	str	r5, [r4, #20]
 8006c7c:	444e      	add	r6, r9
 8006c7e:	eba5 0509 	sub.w	r5, r5, r9
 8006c82:	6026      	str	r6, [r4, #0]
 8006c84:	60a5      	str	r5, [r4, #8]
 8006c86:	463e      	mov	r6, r7
 8006c88:	42be      	cmp	r6, r7
 8006c8a:	d900      	bls.n	8006c8e <__ssputs_r+0x86>
 8006c8c:	463e      	mov	r6, r7
 8006c8e:	4632      	mov	r2, r6
 8006c90:	6820      	ldr	r0, [r4, #0]
 8006c92:	4641      	mov	r1, r8
 8006c94:	f000 faaa 	bl	80071ec <memmove>
 8006c98:	68a3      	ldr	r3, [r4, #8]
 8006c9a:	6822      	ldr	r2, [r4, #0]
 8006c9c:	1b9b      	subs	r3, r3, r6
 8006c9e:	4432      	add	r2, r6
 8006ca0:	60a3      	str	r3, [r4, #8]
 8006ca2:	6022      	str	r2, [r4, #0]
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	e7db      	b.n	8006c60 <__ssputs_r+0x58>
 8006ca8:	462a      	mov	r2, r5
 8006caa:	f000 fab9 	bl	8007220 <_realloc_r>
 8006cae:	4606      	mov	r6, r0
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d1e1      	bne.n	8006c78 <__ssputs_r+0x70>
 8006cb4:	6921      	ldr	r1, [r4, #16]
 8006cb6:	4650      	mov	r0, sl
 8006cb8:	f7ff fe42 	bl	8006940 <_free_r>
 8006cbc:	e7c7      	b.n	8006c4e <__ssputs_r+0x46>
	...

08006cc0 <_svfiprintf_r>:
 8006cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc4:	4698      	mov	r8, r3
 8006cc6:	898b      	ldrh	r3, [r1, #12]
 8006cc8:	061b      	lsls	r3, r3, #24
 8006cca:	b09d      	sub	sp, #116	; 0x74
 8006ccc:	4607      	mov	r7, r0
 8006cce:	460d      	mov	r5, r1
 8006cd0:	4614      	mov	r4, r2
 8006cd2:	d50e      	bpl.n	8006cf2 <_svfiprintf_r+0x32>
 8006cd4:	690b      	ldr	r3, [r1, #16]
 8006cd6:	b963      	cbnz	r3, 8006cf2 <_svfiprintf_r+0x32>
 8006cd8:	2140      	movs	r1, #64	; 0x40
 8006cda:	f7ff fe81 	bl	80069e0 <_malloc_r>
 8006cde:	6028      	str	r0, [r5, #0]
 8006ce0:	6128      	str	r0, [r5, #16]
 8006ce2:	b920      	cbnz	r0, 8006cee <_svfiprintf_r+0x2e>
 8006ce4:	230c      	movs	r3, #12
 8006ce6:	603b      	str	r3, [r7, #0]
 8006ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cec:	e0d1      	b.n	8006e92 <_svfiprintf_r+0x1d2>
 8006cee:	2340      	movs	r3, #64	; 0x40
 8006cf0:	616b      	str	r3, [r5, #20]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8006cf6:	2320      	movs	r3, #32
 8006cf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d00:	2330      	movs	r3, #48	; 0x30
 8006d02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006eac <_svfiprintf_r+0x1ec>
 8006d06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d0a:	f04f 0901 	mov.w	r9, #1
 8006d0e:	4623      	mov	r3, r4
 8006d10:	469a      	mov	sl, r3
 8006d12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d16:	b10a      	cbz	r2, 8006d1c <_svfiprintf_r+0x5c>
 8006d18:	2a25      	cmp	r2, #37	; 0x25
 8006d1a:	d1f9      	bne.n	8006d10 <_svfiprintf_r+0x50>
 8006d1c:	ebba 0b04 	subs.w	fp, sl, r4
 8006d20:	d00b      	beq.n	8006d3a <_svfiprintf_r+0x7a>
 8006d22:	465b      	mov	r3, fp
 8006d24:	4622      	mov	r2, r4
 8006d26:	4629      	mov	r1, r5
 8006d28:	4638      	mov	r0, r7
 8006d2a:	f7ff ff6d 	bl	8006c08 <__ssputs_r>
 8006d2e:	3001      	adds	r0, #1
 8006d30:	f000 80aa 	beq.w	8006e88 <_svfiprintf_r+0x1c8>
 8006d34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d36:	445a      	add	r2, fp
 8006d38:	9209      	str	r2, [sp, #36]	; 0x24
 8006d3a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f000 80a2 	beq.w	8006e88 <_svfiprintf_r+0x1c8>
 8006d44:	2300      	movs	r3, #0
 8006d46:	f04f 32ff 	mov.w	r2, #4294967295
 8006d4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d4e:	f10a 0a01 	add.w	sl, sl, #1
 8006d52:	9304      	str	r3, [sp, #16]
 8006d54:	9307      	str	r3, [sp, #28]
 8006d56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d5a:	931a      	str	r3, [sp, #104]	; 0x68
 8006d5c:	4654      	mov	r4, sl
 8006d5e:	2205      	movs	r2, #5
 8006d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d64:	4851      	ldr	r0, [pc, #324]	; (8006eac <_svfiprintf_r+0x1ec>)
 8006d66:	f7f9 fa93 	bl	8000290 <memchr>
 8006d6a:	9a04      	ldr	r2, [sp, #16]
 8006d6c:	b9d8      	cbnz	r0, 8006da6 <_svfiprintf_r+0xe6>
 8006d6e:	06d0      	lsls	r0, r2, #27
 8006d70:	bf44      	itt	mi
 8006d72:	2320      	movmi	r3, #32
 8006d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d78:	0711      	lsls	r1, r2, #28
 8006d7a:	bf44      	itt	mi
 8006d7c:	232b      	movmi	r3, #43	; 0x2b
 8006d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d82:	f89a 3000 	ldrb.w	r3, [sl]
 8006d86:	2b2a      	cmp	r3, #42	; 0x2a
 8006d88:	d015      	beq.n	8006db6 <_svfiprintf_r+0xf6>
 8006d8a:	9a07      	ldr	r2, [sp, #28]
 8006d8c:	4654      	mov	r4, sl
 8006d8e:	2000      	movs	r0, #0
 8006d90:	f04f 0c0a 	mov.w	ip, #10
 8006d94:	4621      	mov	r1, r4
 8006d96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d9a:	3b30      	subs	r3, #48	; 0x30
 8006d9c:	2b09      	cmp	r3, #9
 8006d9e:	d94e      	bls.n	8006e3e <_svfiprintf_r+0x17e>
 8006da0:	b1b0      	cbz	r0, 8006dd0 <_svfiprintf_r+0x110>
 8006da2:	9207      	str	r2, [sp, #28]
 8006da4:	e014      	b.n	8006dd0 <_svfiprintf_r+0x110>
 8006da6:	eba0 0308 	sub.w	r3, r0, r8
 8006daa:	fa09 f303 	lsl.w	r3, r9, r3
 8006dae:	4313      	orrs	r3, r2
 8006db0:	9304      	str	r3, [sp, #16]
 8006db2:	46a2      	mov	sl, r4
 8006db4:	e7d2      	b.n	8006d5c <_svfiprintf_r+0x9c>
 8006db6:	9b03      	ldr	r3, [sp, #12]
 8006db8:	1d19      	adds	r1, r3, #4
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	9103      	str	r1, [sp, #12]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	bfbb      	ittet	lt
 8006dc2:	425b      	neglt	r3, r3
 8006dc4:	f042 0202 	orrlt.w	r2, r2, #2
 8006dc8:	9307      	strge	r3, [sp, #28]
 8006dca:	9307      	strlt	r3, [sp, #28]
 8006dcc:	bfb8      	it	lt
 8006dce:	9204      	strlt	r2, [sp, #16]
 8006dd0:	7823      	ldrb	r3, [r4, #0]
 8006dd2:	2b2e      	cmp	r3, #46	; 0x2e
 8006dd4:	d10c      	bne.n	8006df0 <_svfiprintf_r+0x130>
 8006dd6:	7863      	ldrb	r3, [r4, #1]
 8006dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8006dda:	d135      	bne.n	8006e48 <_svfiprintf_r+0x188>
 8006ddc:	9b03      	ldr	r3, [sp, #12]
 8006dde:	1d1a      	adds	r2, r3, #4
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	9203      	str	r2, [sp, #12]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	bfb8      	it	lt
 8006de8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006dec:	3402      	adds	r4, #2
 8006dee:	9305      	str	r3, [sp, #20]
 8006df0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ebc <_svfiprintf_r+0x1fc>
 8006df4:	7821      	ldrb	r1, [r4, #0]
 8006df6:	2203      	movs	r2, #3
 8006df8:	4650      	mov	r0, sl
 8006dfa:	f7f9 fa49 	bl	8000290 <memchr>
 8006dfe:	b140      	cbz	r0, 8006e12 <_svfiprintf_r+0x152>
 8006e00:	2340      	movs	r3, #64	; 0x40
 8006e02:	eba0 000a 	sub.w	r0, r0, sl
 8006e06:	fa03 f000 	lsl.w	r0, r3, r0
 8006e0a:	9b04      	ldr	r3, [sp, #16]
 8006e0c:	4303      	orrs	r3, r0
 8006e0e:	3401      	adds	r4, #1
 8006e10:	9304      	str	r3, [sp, #16]
 8006e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e16:	4826      	ldr	r0, [pc, #152]	; (8006eb0 <_svfiprintf_r+0x1f0>)
 8006e18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e1c:	2206      	movs	r2, #6
 8006e1e:	f7f9 fa37 	bl	8000290 <memchr>
 8006e22:	2800      	cmp	r0, #0
 8006e24:	d038      	beq.n	8006e98 <_svfiprintf_r+0x1d8>
 8006e26:	4b23      	ldr	r3, [pc, #140]	; (8006eb4 <_svfiprintf_r+0x1f4>)
 8006e28:	bb1b      	cbnz	r3, 8006e72 <_svfiprintf_r+0x1b2>
 8006e2a:	9b03      	ldr	r3, [sp, #12]
 8006e2c:	3307      	adds	r3, #7
 8006e2e:	f023 0307 	bic.w	r3, r3, #7
 8006e32:	3308      	adds	r3, #8
 8006e34:	9303      	str	r3, [sp, #12]
 8006e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e38:	4433      	add	r3, r6
 8006e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e3c:	e767      	b.n	8006d0e <_svfiprintf_r+0x4e>
 8006e3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e42:	460c      	mov	r4, r1
 8006e44:	2001      	movs	r0, #1
 8006e46:	e7a5      	b.n	8006d94 <_svfiprintf_r+0xd4>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	3401      	adds	r4, #1
 8006e4c:	9305      	str	r3, [sp, #20]
 8006e4e:	4619      	mov	r1, r3
 8006e50:	f04f 0c0a 	mov.w	ip, #10
 8006e54:	4620      	mov	r0, r4
 8006e56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e5a:	3a30      	subs	r2, #48	; 0x30
 8006e5c:	2a09      	cmp	r2, #9
 8006e5e:	d903      	bls.n	8006e68 <_svfiprintf_r+0x1a8>
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d0c5      	beq.n	8006df0 <_svfiprintf_r+0x130>
 8006e64:	9105      	str	r1, [sp, #20]
 8006e66:	e7c3      	b.n	8006df0 <_svfiprintf_r+0x130>
 8006e68:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e7f0      	b.n	8006e54 <_svfiprintf_r+0x194>
 8006e72:	ab03      	add	r3, sp, #12
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	462a      	mov	r2, r5
 8006e78:	4b0f      	ldr	r3, [pc, #60]	; (8006eb8 <_svfiprintf_r+0x1f8>)
 8006e7a:	a904      	add	r1, sp, #16
 8006e7c:	4638      	mov	r0, r7
 8006e7e:	f3af 8000 	nop.w
 8006e82:	1c42      	adds	r2, r0, #1
 8006e84:	4606      	mov	r6, r0
 8006e86:	d1d6      	bne.n	8006e36 <_svfiprintf_r+0x176>
 8006e88:	89ab      	ldrh	r3, [r5, #12]
 8006e8a:	065b      	lsls	r3, r3, #25
 8006e8c:	f53f af2c 	bmi.w	8006ce8 <_svfiprintf_r+0x28>
 8006e90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e92:	b01d      	add	sp, #116	; 0x74
 8006e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e98:	ab03      	add	r3, sp, #12
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	462a      	mov	r2, r5
 8006e9e:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <_svfiprintf_r+0x1f8>)
 8006ea0:	a904      	add	r1, sp, #16
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	f000 f87a 	bl	8006f9c <_printf_i>
 8006ea8:	e7eb      	b.n	8006e82 <_svfiprintf_r+0x1c2>
 8006eaa:	bf00      	nop
 8006eac:	08007c1c 	.word	0x08007c1c
 8006eb0:	08007c26 	.word	0x08007c26
 8006eb4:	00000000 	.word	0x00000000
 8006eb8:	08006c09 	.word	0x08006c09
 8006ebc:	08007c22 	.word	0x08007c22

08006ec0 <_printf_common>:
 8006ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ec4:	4616      	mov	r6, r2
 8006ec6:	4699      	mov	r9, r3
 8006ec8:	688a      	ldr	r2, [r1, #8]
 8006eca:	690b      	ldr	r3, [r1, #16]
 8006ecc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	bfb8      	it	lt
 8006ed4:	4613      	movlt	r3, r2
 8006ed6:	6033      	str	r3, [r6, #0]
 8006ed8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006edc:	4607      	mov	r7, r0
 8006ede:	460c      	mov	r4, r1
 8006ee0:	b10a      	cbz	r2, 8006ee6 <_printf_common+0x26>
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	6033      	str	r3, [r6, #0]
 8006ee6:	6823      	ldr	r3, [r4, #0]
 8006ee8:	0699      	lsls	r1, r3, #26
 8006eea:	bf42      	ittt	mi
 8006eec:	6833      	ldrmi	r3, [r6, #0]
 8006eee:	3302      	addmi	r3, #2
 8006ef0:	6033      	strmi	r3, [r6, #0]
 8006ef2:	6825      	ldr	r5, [r4, #0]
 8006ef4:	f015 0506 	ands.w	r5, r5, #6
 8006ef8:	d106      	bne.n	8006f08 <_printf_common+0x48>
 8006efa:	f104 0a19 	add.w	sl, r4, #25
 8006efe:	68e3      	ldr	r3, [r4, #12]
 8006f00:	6832      	ldr	r2, [r6, #0]
 8006f02:	1a9b      	subs	r3, r3, r2
 8006f04:	42ab      	cmp	r3, r5
 8006f06:	dc26      	bgt.n	8006f56 <_printf_common+0x96>
 8006f08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f0c:	1e13      	subs	r3, r2, #0
 8006f0e:	6822      	ldr	r2, [r4, #0]
 8006f10:	bf18      	it	ne
 8006f12:	2301      	movne	r3, #1
 8006f14:	0692      	lsls	r2, r2, #26
 8006f16:	d42b      	bmi.n	8006f70 <_printf_common+0xb0>
 8006f18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f1c:	4649      	mov	r1, r9
 8006f1e:	4638      	mov	r0, r7
 8006f20:	47c0      	blx	r8
 8006f22:	3001      	adds	r0, #1
 8006f24:	d01e      	beq.n	8006f64 <_printf_common+0xa4>
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	68e5      	ldr	r5, [r4, #12]
 8006f2a:	6832      	ldr	r2, [r6, #0]
 8006f2c:	f003 0306 	and.w	r3, r3, #6
 8006f30:	2b04      	cmp	r3, #4
 8006f32:	bf08      	it	eq
 8006f34:	1aad      	subeq	r5, r5, r2
 8006f36:	68a3      	ldr	r3, [r4, #8]
 8006f38:	6922      	ldr	r2, [r4, #16]
 8006f3a:	bf0c      	ite	eq
 8006f3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f40:	2500      	movne	r5, #0
 8006f42:	4293      	cmp	r3, r2
 8006f44:	bfc4      	itt	gt
 8006f46:	1a9b      	subgt	r3, r3, r2
 8006f48:	18ed      	addgt	r5, r5, r3
 8006f4a:	2600      	movs	r6, #0
 8006f4c:	341a      	adds	r4, #26
 8006f4e:	42b5      	cmp	r5, r6
 8006f50:	d11a      	bne.n	8006f88 <_printf_common+0xc8>
 8006f52:	2000      	movs	r0, #0
 8006f54:	e008      	b.n	8006f68 <_printf_common+0xa8>
 8006f56:	2301      	movs	r3, #1
 8006f58:	4652      	mov	r2, sl
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	4638      	mov	r0, r7
 8006f5e:	47c0      	blx	r8
 8006f60:	3001      	adds	r0, #1
 8006f62:	d103      	bne.n	8006f6c <_printf_common+0xac>
 8006f64:	f04f 30ff 	mov.w	r0, #4294967295
 8006f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f6c:	3501      	adds	r5, #1
 8006f6e:	e7c6      	b.n	8006efe <_printf_common+0x3e>
 8006f70:	18e1      	adds	r1, r4, r3
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	2030      	movs	r0, #48	; 0x30
 8006f76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f7a:	4422      	add	r2, r4
 8006f7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f84:	3302      	adds	r3, #2
 8006f86:	e7c7      	b.n	8006f18 <_printf_common+0x58>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	4622      	mov	r2, r4
 8006f8c:	4649      	mov	r1, r9
 8006f8e:	4638      	mov	r0, r7
 8006f90:	47c0      	blx	r8
 8006f92:	3001      	adds	r0, #1
 8006f94:	d0e6      	beq.n	8006f64 <_printf_common+0xa4>
 8006f96:	3601      	adds	r6, #1
 8006f98:	e7d9      	b.n	8006f4e <_printf_common+0x8e>
	...

08006f9c <_printf_i>:
 8006f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa0:	460c      	mov	r4, r1
 8006fa2:	4691      	mov	r9, r2
 8006fa4:	7e27      	ldrb	r7, [r4, #24]
 8006fa6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006fa8:	2f78      	cmp	r7, #120	; 0x78
 8006faa:	4680      	mov	r8, r0
 8006fac:	469a      	mov	sl, r3
 8006fae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fb2:	d807      	bhi.n	8006fc4 <_printf_i+0x28>
 8006fb4:	2f62      	cmp	r7, #98	; 0x62
 8006fb6:	d80a      	bhi.n	8006fce <_printf_i+0x32>
 8006fb8:	2f00      	cmp	r7, #0
 8006fba:	f000 80d8 	beq.w	800716e <_printf_i+0x1d2>
 8006fbe:	2f58      	cmp	r7, #88	; 0x58
 8006fc0:	f000 80a3 	beq.w	800710a <_printf_i+0x16e>
 8006fc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006fc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fcc:	e03a      	b.n	8007044 <_printf_i+0xa8>
 8006fce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fd2:	2b15      	cmp	r3, #21
 8006fd4:	d8f6      	bhi.n	8006fc4 <_printf_i+0x28>
 8006fd6:	a001      	add	r0, pc, #4	; (adr r0, 8006fdc <_printf_i+0x40>)
 8006fd8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006fdc:	08007035 	.word	0x08007035
 8006fe0:	08007049 	.word	0x08007049
 8006fe4:	08006fc5 	.word	0x08006fc5
 8006fe8:	08006fc5 	.word	0x08006fc5
 8006fec:	08006fc5 	.word	0x08006fc5
 8006ff0:	08006fc5 	.word	0x08006fc5
 8006ff4:	08007049 	.word	0x08007049
 8006ff8:	08006fc5 	.word	0x08006fc5
 8006ffc:	08006fc5 	.word	0x08006fc5
 8007000:	08006fc5 	.word	0x08006fc5
 8007004:	08006fc5 	.word	0x08006fc5
 8007008:	08007155 	.word	0x08007155
 800700c:	08007079 	.word	0x08007079
 8007010:	08007137 	.word	0x08007137
 8007014:	08006fc5 	.word	0x08006fc5
 8007018:	08006fc5 	.word	0x08006fc5
 800701c:	08007177 	.word	0x08007177
 8007020:	08006fc5 	.word	0x08006fc5
 8007024:	08007079 	.word	0x08007079
 8007028:	08006fc5 	.word	0x08006fc5
 800702c:	08006fc5 	.word	0x08006fc5
 8007030:	0800713f 	.word	0x0800713f
 8007034:	680b      	ldr	r3, [r1, #0]
 8007036:	1d1a      	adds	r2, r3, #4
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	600a      	str	r2, [r1, #0]
 800703c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007040:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007044:	2301      	movs	r3, #1
 8007046:	e0a3      	b.n	8007190 <_printf_i+0x1f4>
 8007048:	6825      	ldr	r5, [r4, #0]
 800704a:	6808      	ldr	r0, [r1, #0]
 800704c:	062e      	lsls	r6, r5, #24
 800704e:	f100 0304 	add.w	r3, r0, #4
 8007052:	d50a      	bpl.n	800706a <_printf_i+0xce>
 8007054:	6805      	ldr	r5, [r0, #0]
 8007056:	600b      	str	r3, [r1, #0]
 8007058:	2d00      	cmp	r5, #0
 800705a:	da03      	bge.n	8007064 <_printf_i+0xc8>
 800705c:	232d      	movs	r3, #45	; 0x2d
 800705e:	426d      	negs	r5, r5
 8007060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007064:	485e      	ldr	r0, [pc, #376]	; (80071e0 <_printf_i+0x244>)
 8007066:	230a      	movs	r3, #10
 8007068:	e019      	b.n	800709e <_printf_i+0x102>
 800706a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800706e:	6805      	ldr	r5, [r0, #0]
 8007070:	600b      	str	r3, [r1, #0]
 8007072:	bf18      	it	ne
 8007074:	b22d      	sxthne	r5, r5
 8007076:	e7ef      	b.n	8007058 <_printf_i+0xbc>
 8007078:	680b      	ldr	r3, [r1, #0]
 800707a:	6825      	ldr	r5, [r4, #0]
 800707c:	1d18      	adds	r0, r3, #4
 800707e:	6008      	str	r0, [r1, #0]
 8007080:	0628      	lsls	r0, r5, #24
 8007082:	d501      	bpl.n	8007088 <_printf_i+0xec>
 8007084:	681d      	ldr	r5, [r3, #0]
 8007086:	e002      	b.n	800708e <_printf_i+0xf2>
 8007088:	0669      	lsls	r1, r5, #25
 800708a:	d5fb      	bpl.n	8007084 <_printf_i+0xe8>
 800708c:	881d      	ldrh	r5, [r3, #0]
 800708e:	4854      	ldr	r0, [pc, #336]	; (80071e0 <_printf_i+0x244>)
 8007090:	2f6f      	cmp	r7, #111	; 0x6f
 8007092:	bf0c      	ite	eq
 8007094:	2308      	moveq	r3, #8
 8007096:	230a      	movne	r3, #10
 8007098:	2100      	movs	r1, #0
 800709a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800709e:	6866      	ldr	r6, [r4, #4]
 80070a0:	60a6      	str	r6, [r4, #8]
 80070a2:	2e00      	cmp	r6, #0
 80070a4:	bfa2      	ittt	ge
 80070a6:	6821      	ldrge	r1, [r4, #0]
 80070a8:	f021 0104 	bicge.w	r1, r1, #4
 80070ac:	6021      	strge	r1, [r4, #0]
 80070ae:	b90d      	cbnz	r5, 80070b4 <_printf_i+0x118>
 80070b0:	2e00      	cmp	r6, #0
 80070b2:	d04d      	beq.n	8007150 <_printf_i+0x1b4>
 80070b4:	4616      	mov	r6, r2
 80070b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80070ba:	fb03 5711 	mls	r7, r3, r1, r5
 80070be:	5dc7      	ldrb	r7, [r0, r7]
 80070c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070c4:	462f      	mov	r7, r5
 80070c6:	42bb      	cmp	r3, r7
 80070c8:	460d      	mov	r5, r1
 80070ca:	d9f4      	bls.n	80070b6 <_printf_i+0x11a>
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	d10b      	bne.n	80070e8 <_printf_i+0x14c>
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	07df      	lsls	r7, r3, #31
 80070d4:	d508      	bpl.n	80070e8 <_printf_i+0x14c>
 80070d6:	6923      	ldr	r3, [r4, #16]
 80070d8:	6861      	ldr	r1, [r4, #4]
 80070da:	4299      	cmp	r1, r3
 80070dc:	bfde      	ittt	le
 80070de:	2330      	movle	r3, #48	; 0x30
 80070e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070e8:	1b92      	subs	r2, r2, r6
 80070ea:	6122      	str	r2, [r4, #16]
 80070ec:	f8cd a000 	str.w	sl, [sp]
 80070f0:	464b      	mov	r3, r9
 80070f2:	aa03      	add	r2, sp, #12
 80070f4:	4621      	mov	r1, r4
 80070f6:	4640      	mov	r0, r8
 80070f8:	f7ff fee2 	bl	8006ec0 <_printf_common>
 80070fc:	3001      	adds	r0, #1
 80070fe:	d14c      	bne.n	800719a <_printf_i+0x1fe>
 8007100:	f04f 30ff 	mov.w	r0, #4294967295
 8007104:	b004      	add	sp, #16
 8007106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800710a:	4835      	ldr	r0, [pc, #212]	; (80071e0 <_printf_i+0x244>)
 800710c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007110:	6823      	ldr	r3, [r4, #0]
 8007112:	680e      	ldr	r6, [r1, #0]
 8007114:	061f      	lsls	r7, r3, #24
 8007116:	f856 5b04 	ldr.w	r5, [r6], #4
 800711a:	600e      	str	r6, [r1, #0]
 800711c:	d514      	bpl.n	8007148 <_printf_i+0x1ac>
 800711e:	07d9      	lsls	r1, r3, #31
 8007120:	bf44      	itt	mi
 8007122:	f043 0320 	orrmi.w	r3, r3, #32
 8007126:	6023      	strmi	r3, [r4, #0]
 8007128:	b91d      	cbnz	r5, 8007132 <_printf_i+0x196>
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	f023 0320 	bic.w	r3, r3, #32
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	2310      	movs	r3, #16
 8007134:	e7b0      	b.n	8007098 <_printf_i+0xfc>
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	f043 0320 	orr.w	r3, r3, #32
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	2378      	movs	r3, #120	; 0x78
 8007140:	4828      	ldr	r0, [pc, #160]	; (80071e4 <_printf_i+0x248>)
 8007142:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007146:	e7e3      	b.n	8007110 <_printf_i+0x174>
 8007148:	065e      	lsls	r6, r3, #25
 800714a:	bf48      	it	mi
 800714c:	b2ad      	uxthmi	r5, r5
 800714e:	e7e6      	b.n	800711e <_printf_i+0x182>
 8007150:	4616      	mov	r6, r2
 8007152:	e7bb      	b.n	80070cc <_printf_i+0x130>
 8007154:	680b      	ldr	r3, [r1, #0]
 8007156:	6826      	ldr	r6, [r4, #0]
 8007158:	6960      	ldr	r0, [r4, #20]
 800715a:	1d1d      	adds	r5, r3, #4
 800715c:	600d      	str	r5, [r1, #0]
 800715e:	0635      	lsls	r5, r6, #24
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	d501      	bpl.n	8007168 <_printf_i+0x1cc>
 8007164:	6018      	str	r0, [r3, #0]
 8007166:	e002      	b.n	800716e <_printf_i+0x1d2>
 8007168:	0671      	lsls	r1, r6, #25
 800716a:	d5fb      	bpl.n	8007164 <_printf_i+0x1c8>
 800716c:	8018      	strh	r0, [r3, #0]
 800716e:	2300      	movs	r3, #0
 8007170:	6123      	str	r3, [r4, #16]
 8007172:	4616      	mov	r6, r2
 8007174:	e7ba      	b.n	80070ec <_printf_i+0x150>
 8007176:	680b      	ldr	r3, [r1, #0]
 8007178:	1d1a      	adds	r2, r3, #4
 800717a:	600a      	str	r2, [r1, #0]
 800717c:	681e      	ldr	r6, [r3, #0]
 800717e:	6862      	ldr	r2, [r4, #4]
 8007180:	2100      	movs	r1, #0
 8007182:	4630      	mov	r0, r6
 8007184:	f7f9 f884 	bl	8000290 <memchr>
 8007188:	b108      	cbz	r0, 800718e <_printf_i+0x1f2>
 800718a:	1b80      	subs	r0, r0, r6
 800718c:	6060      	str	r0, [r4, #4]
 800718e:	6863      	ldr	r3, [r4, #4]
 8007190:	6123      	str	r3, [r4, #16]
 8007192:	2300      	movs	r3, #0
 8007194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007198:	e7a8      	b.n	80070ec <_printf_i+0x150>
 800719a:	6923      	ldr	r3, [r4, #16]
 800719c:	4632      	mov	r2, r6
 800719e:	4649      	mov	r1, r9
 80071a0:	4640      	mov	r0, r8
 80071a2:	47d0      	blx	sl
 80071a4:	3001      	adds	r0, #1
 80071a6:	d0ab      	beq.n	8007100 <_printf_i+0x164>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	079b      	lsls	r3, r3, #30
 80071ac:	d413      	bmi.n	80071d6 <_printf_i+0x23a>
 80071ae:	68e0      	ldr	r0, [r4, #12]
 80071b0:	9b03      	ldr	r3, [sp, #12]
 80071b2:	4298      	cmp	r0, r3
 80071b4:	bfb8      	it	lt
 80071b6:	4618      	movlt	r0, r3
 80071b8:	e7a4      	b.n	8007104 <_printf_i+0x168>
 80071ba:	2301      	movs	r3, #1
 80071bc:	4632      	mov	r2, r6
 80071be:	4649      	mov	r1, r9
 80071c0:	4640      	mov	r0, r8
 80071c2:	47d0      	blx	sl
 80071c4:	3001      	adds	r0, #1
 80071c6:	d09b      	beq.n	8007100 <_printf_i+0x164>
 80071c8:	3501      	adds	r5, #1
 80071ca:	68e3      	ldr	r3, [r4, #12]
 80071cc:	9903      	ldr	r1, [sp, #12]
 80071ce:	1a5b      	subs	r3, r3, r1
 80071d0:	42ab      	cmp	r3, r5
 80071d2:	dcf2      	bgt.n	80071ba <_printf_i+0x21e>
 80071d4:	e7eb      	b.n	80071ae <_printf_i+0x212>
 80071d6:	2500      	movs	r5, #0
 80071d8:	f104 0619 	add.w	r6, r4, #25
 80071dc:	e7f5      	b.n	80071ca <_printf_i+0x22e>
 80071de:	bf00      	nop
 80071e0:	08007c2d 	.word	0x08007c2d
 80071e4:	08007c3e 	.word	0x08007c3e

080071e8 <__retarget_lock_acquire_recursive>:
 80071e8:	4770      	bx	lr

080071ea <__retarget_lock_release_recursive>:
 80071ea:	4770      	bx	lr

080071ec <memmove>:
 80071ec:	4288      	cmp	r0, r1
 80071ee:	b510      	push	{r4, lr}
 80071f0:	eb01 0402 	add.w	r4, r1, r2
 80071f4:	d902      	bls.n	80071fc <memmove+0x10>
 80071f6:	4284      	cmp	r4, r0
 80071f8:	4623      	mov	r3, r4
 80071fa:	d807      	bhi.n	800720c <memmove+0x20>
 80071fc:	1e43      	subs	r3, r0, #1
 80071fe:	42a1      	cmp	r1, r4
 8007200:	d008      	beq.n	8007214 <memmove+0x28>
 8007202:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007206:	f803 2f01 	strb.w	r2, [r3, #1]!
 800720a:	e7f8      	b.n	80071fe <memmove+0x12>
 800720c:	4402      	add	r2, r0
 800720e:	4601      	mov	r1, r0
 8007210:	428a      	cmp	r2, r1
 8007212:	d100      	bne.n	8007216 <memmove+0x2a>
 8007214:	bd10      	pop	{r4, pc}
 8007216:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800721a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800721e:	e7f7      	b.n	8007210 <memmove+0x24>

08007220 <_realloc_r>:
 8007220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007222:	4607      	mov	r7, r0
 8007224:	4614      	mov	r4, r2
 8007226:	460e      	mov	r6, r1
 8007228:	b921      	cbnz	r1, 8007234 <_realloc_r+0x14>
 800722a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800722e:	4611      	mov	r1, r2
 8007230:	f7ff bbd6 	b.w	80069e0 <_malloc_r>
 8007234:	b922      	cbnz	r2, 8007240 <_realloc_r+0x20>
 8007236:	f7ff fb83 	bl	8006940 <_free_r>
 800723a:	4625      	mov	r5, r4
 800723c:	4628      	mov	r0, r5
 800723e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007240:	f000 f814 	bl	800726c <_malloc_usable_size_r>
 8007244:	42a0      	cmp	r0, r4
 8007246:	d20f      	bcs.n	8007268 <_realloc_r+0x48>
 8007248:	4621      	mov	r1, r4
 800724a:	4638      	mov	r0, r7
 800724c:	f7ff fbc8 	bl	80069e0 <_malloc_r>
 8007250:	4605      	mov	r5, r0
 8007252:	2800      	cmp	r0, #0
 8007254:	d0f2      	beq.n	800723c <_realloc_r+0x1c>
 8007256:	4631      	mov	r1, r6
 8007258:	4622      	mov	r2, r4
 800725a:	f7ff fb63 	bl	8006924 <memcpy>
 800725e:	4631      	mov	r1, r6
 8007260:	4638      	mov	r0, r7
 8007262:	f7ff fb6d 	bl	8006940 <_free_r>
 8007266:	e7e9      	b.n	800723c <_realloc_r+0x1c>
 8007268:	4635      	mov	r5, r6
 800726a:	e7e7      	b.n	800723c <_realloc_r+0x1c>

0800726c <_malloc_usable_size_r>:
 800726c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007270:	1f18      	subs	r0, r3, #4
 8007272:	2b00      	cmp	r3, #0
 8007274:	bfbc      	itt	lt
 8007276:	580b      	ldrlt	r3, [r1, r0]
 8007278:	18c0      	addlt	r0, r0, r3
 800727a:	4770      	bx	lr

0800727c <_getpid>:
 800727c:	4b02      	ldr	r3, [pc, #8]	; (8007288 <_getpid+0xc>)
 800727e:	2258      	movs	r2, #88	; 0x58
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	f04f 30ff 	mov.w	r0, #4294967295
 8007286:	4770      	bx	lr
 8007288:	20000350 	.word	0x20000350

0800728c <_kill>:
 800728c:	4b02      	ldr	r3, [pc, #8]	; (8007298 <_kill+0xc>)
 800728e:	2258      	movs	r2, #88	; 0x58
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	f04f 30ff 	mov.w	r0, #4294967295
 8007296:	4770      	bx	lr
 8007298:	20000350 	.word	0x20000350

0800729c <_sbrk>:
 800729c:	4b04      	ldr	r3, [pc, #16]	; (80072b0 <_sbrk+0x14>)
 800729e:	6819      	ldr	r1, [r3, #0]
 80072a0:	4602      	mov	r2, r0
 80072a2:	b909      	cbnz	r1, 80072a8 <_sbrk+0xc>
 80072a4:	4903      	ldr	r1, [pc, #12]	; (80072b4 <_sbrk+0x18>)
 80072a6:	6019      	str	r1, [r3, #0]
 80072a8:	6818      	ldr	r0, [r3, #0]
 80072aa:	4402      	add	r2, r0
 80072ac:	601a      	str	r2, [r3, #0]
 80072ae:	4770      	bx	lr
 80072b0:	2000034c 	.word	0x2000034c
 80072b4:	20000360 	.word	0x20000360

080072b8 <_exit>:
 80072b8:	e7fe      	b.n	80072b8 <_exit>
	...

080072bc <_init>:
 80072bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072be:	bf00      	nop
 80072c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072c2:	bc08      	pop	{r3}
 80072c4:	469e      	mov	lr, r3
 80072c6:	4770      	bx	lr

080072c8 <_fini>:
 80072c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ca:	bf00      	nop
 80072cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ce:	bc08      	pop	{r3}
 80072d0:	469e      	mov	lr, r3
 80072d2:	4770      	bx	lr
