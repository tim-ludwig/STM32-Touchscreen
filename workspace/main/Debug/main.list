
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001794  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001934  08001934  00011934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001970  08001970  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08001970  08001970  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001970  08001970  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001970  08001970  00011970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001974  08001974  00011974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08001978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000248  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002c4  200002c4  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000259b  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00003ab7  00000000  00000000  00022647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000c1f  00000000  00000000  000260fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000160  00000000  00000000  00026d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00080c65  00000000  00000000  00026e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000000e8  00000000  00000000  000a7ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00016b78  00000000  00000000  000a7bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000be748  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000007ec  00000000  00000000  000be79c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800191c 	.word	0x0800191c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	0800191c 	.word	0x0800191c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008ec:	480c      	ldr	r0, [pc, #48]	; (8000920 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 80008f0:	480c      	ldr	r0, [pc, #48]	; (8000924 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f2:	490d      	ldr	r1, [pc, #52]	; (8000928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f4:	4a0d      	ldr	r2, [pc, #52]	; (800092c <LoopForever+0xe>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000908:	4c0a      	ldr	r4, [pc, #40]	; (8000934 <LoopForever+0x16>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000916:	f000 f83d 	bl	8000994 <SystemInit>
/* Call static constructors */
//  bl __libc_init_array
/* Call the application's entry point.*/

  bl main
 800091a:	f000 fb81 	bl	8001020 <main>

0800091e <LoopForever>:

LoopForever:
    b LoopForever
 800091e:	e7fe      	b.n	800091e <LoopForever>
  ldr   r0, =_estack
 8000920:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000928:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800092c:	08001978 	.word	0x08001978
  ldr r2, =_sbss
 8000930:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000934:	200002c4 	.word	0x200002c4

08000938 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC1_IRQHandler>
	...

0800093c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <_sbrk+0x50>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d102      	bne.n	8000952 <_sbrk+0x16>
		heap_end = &end;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <_sbrk+0x50>)
 800094e:	4a10      	ldr	r2, [pc, #64]	; (8000990 <_sbrk+0x54>)
 8000950:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <_sbrk+0x50>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <_sbrk+0x50>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4413      	add	r3, r2
 8000960:	466a      	mov	r2, sp
 8000962:	4293      	cmp	r3, r2
 8000964:	d907      	bls.n	8000976 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000966:	f000 fb8b 	bl	8001080 <__errno>
 800096a:	4603      	mov	r3, r0
 800096c:	220c      	movs	r2, #12
 800096e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
 8000974:	e006      	b.n	8000984 <_sbrk+0x48>
	}

	heap_end += incr;
 8000976:	4b05      	ldr	r3, [pc, #20]	; (800098c <_sbrk+0x50>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	4a03      	ldr	r2, [pc, #12]	; (800098c <_sbrk+0x50>)
 8000980:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000098 	.word	0x20000098
 8000990:	200002c8 	.word	0x200002c8

08000994 <SystemInit>:

\see STMicroelectronics, AN3309 Clock configuration tool for
STM32L1xx microcontrollers, Doc ID 18200 Rev 2, January 2012
*/
void SystemInit( void )
{
 8000994:	b480      	push	{r7}
 8000996:	b087      	sub	sp, #28
 8000998:	af00      	add	r7, sp, #0
  // Set FPU
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)

    // System Control Block (SCB), Coprocessor Access Control Register
    SCB->CPACR |=   (3UL << 10*2)  // CP10: Full access
 800099a:	4b4f      	ldr	r3, [pc, #316]	; (8000ad8 <SystemInit+0x144>)
 800099c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a0:	4a4d      	ldr	r2, [pc, #308]	; (8000ad8 <SystemInit+0x144>)
 80009a2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                  | (3UL << 11*2); // CP11: Full access

  #endif

  // Clock control register
  RCC->CR |= RCC_CR_MSION;
 80009aa:	4b4c      	ldr	r3, [pc, #304]	; (8000adc <SystemInit+0x148>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a4b      	ldr	r2, [pc, #300]	; (8000adc <SystemInit+0x148>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6013      	str	r3, [r2, #0]

  // Clock configuration register
  RCC->CFGR = 0x00000000;       // reset ...
 80009b6:	4b49      	ldr	r3, [pc, #292]	; (8000adc <SystemInit+0x148>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]

  // Clock control register
  RCC->CR &= ~(   RCC_CR_PLLON  // reset ...
 80009bc:	4b47      	ldr	r3, [pc, #284]	; (8000adc <SystemInit+0x148>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a46      	ldr	r2, [pc, #280]	; (8000adc <SystemInit+0x148>)
 80009c2:	f023 2301 	bic.w	r3, r3, #16777472	; 0x1000100
 80009c6:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009ca:	6013      	str	r3, [r2, #0]
                | RCC_CR_CSSON
                | RCC_CR_HSEON
                | RCC_CR_HSION );

  // PLL configuration register
  RCC->PLLCFGR = 0x00001000;   // Reset value,
 80009cc:	4b43      	ldr	r3, [pc, #268]	; (8000adc <SystemInit+0x148>)
 80009ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009d2:	60da      	str	r2, [r3, #12]
                               // see Reference manual

  // Clock control register
  RCC->CR &= ~(RCC_CR_HSEBYP); // reset ...
 80009d4:	4b41      	ldr	r3, [pc, #260]	; (8000adc <SystemInit+0x148>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a40      	ldr	r2, [pc, #256]	; (8000adc <SystemInit+0x148>)
 80009da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009de:	6013      	str	r3, [r2, #0]

  // Clock interrupt register
  RCC->CIER = 0;                // Disable all interrupts
 80009e0:	4b3e      	ldr	r3, [pc, #248]	; (8000adc <SystemInit+0x148>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
//  #endif

  //-----------------------------------------------------------------
  //! \todo Check code
  // Clock control register
  RCC->CR |= RCC_CR_MSION;   // Need HSION in ADC (only?)
 80009e6:	4b3d      	ldr	r3, [pc, #244]	; (8000adc <SystemInit+0x148>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a3c      	ldr	r2, [pc, #240]	; (8000adc <SystemInit+0x148>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6013      	str	r3, [r2, #0]

  // Wait until MSI is ready or timeout
  for( unsigned i = 0; i < HSE_STARTUP_TIMEOUT; i++ )
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	e008      	b.n	8000a0a <SystemInit+0x76>
  {
    if( RCC->CR & RCC_CR_MSIRDY )
 80009f8:	4b38      	ldr	r3, [pc, #224]	; (8000adc <SystemInit+0x148>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f003 0302 	and.w	r3, r3, #2
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d107      	bne.n	8000a14 <SystemInit+0x80>
  for( unsigned i = 0; i < HSE_STARTUP_TIMEOUT; i++ )
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	3301      	adds	r3, #1
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000a10:	d3f2      	bcc.n	80009f8 <SystemInit+0x64>
 8000a12:	e000      	b.n	8000a16 <SystemInit+0x82>
      break;
 8000a14:	bf00      	nop
  }

  if( RCC->CR & RCC_CR_MSIRDY )
 8000a16:	4b31      	ldr	r3, [pc, #196]	; (8000adc <SystemInit+0x148>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d050      	beq.n	8000ac4 <SystemInit+0x130>
  {
    // Flash Acess Control Register
    FLASH->ACR =   FLASH_ACR_ICEN          // Instruction cache enable
 8000a22:	4b2f      	ldr	r3, [pc, #188]	; (8000ae0 <SystemInit+0x14c>)
 8000a24:	f240 6204 	movw	r2, #1540	; 0x604
 8000a28:	601a      	str	r2, [r3, #0]
                 | FLASH_ACR_DCEN          // Data cache enable
                 | FLASH_ACR_LATENCY_4WS;  // Latency: 4 wait states

    // Advanced Peripheral Bus Enable Register
    RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN;    // Power interface clock: enable
 8000a2a:	4b2c      	ldr	r3, [pc, #176]	; (8000adc <SystemInit+0x148>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	4a2b      	ldr	r2, [pc, #172]	; (8000adc <SystemInit+0x148>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6593      	str	r3, [r2, #88]	; 0x58

    // Clock Configuration Register
    //! \todo Check clock configuration
    RCC->CFGR |=   RCC_CFGR_HPRE_DIV1     // AHB prescaler:                   HCLK  = SYSCLK
 8000a36:	4b29      	ldr	r3, [pc, #164]	; (8000adc <SystemInit+0x148>)
 8000a38:	4a28      	ldr	r2, [pc, #160]	; (8000adc <SystemInit+0x148>)
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	6093      	str	r3, [r2, #8]
        f_out = 96, 192, 288, 384
            Q =  2    4    6    8
    */
    //---------------------------------------------------------------

    const DWORD pll_M =  1; ///(_MSI_CLK)/1000UL; // -> f_in         =     4 MHz
 8000a3e:	2301      	movs	r3, #1
 8000a40:	613b      	str	r3, [r7, #16]
    const DWORD pll_N = 72; ///336;               // -> f_out        =  72*4 MHz = 288 MHz
 8000a42:	2348      	movs	r3, #72	; 0x48
 8000a44:	60fb      	str	r3, [r7, #12]
    const DWORD pll_P =  4; ///4;                 // -> f_pllsai1clk = 288/4 MHz =  72 MHz
 8000a46:	2304      	movs	r3, #4
 8000a48:	60bb      	str	r3, [r7, #8]
    const DWORD pll_Q =  6; ///7;                 // -> f_pll48m1clk = 288/6 MHz =  48 MHz
 8000a4a:	2306      	movs	r3, #6
 8000a4c:	607b      	str	r3, [r7, #4]
    const DWORD pll_R =  4; ///7;                 // -> f_pllclk     = 288/4 MHz =  72 MHz
 8000a4e:	2304      	movs	r3, #4
 8000a50:	603b      	str	r3, [r7, #0]
    // PLL configuration register
    RCC->PLLCFGR =   RCC_PLLCFGR_PLLSRC_MSI
                   | RCC_PLLCFGR_PLLPEN
                   | RCC_PLLCFGR_PLLQEN
                   | RCC_PLLCFGR_PLLREN
                   | ( (pll_M-1)      <<  4 )
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	3b01      	subs	r3, #1
 8000a56:	011a      	lsls	r2, r3, #4
                   | ( (pll_N  )      <<  8 )
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	021b      	lsls	r3, r3, #8
 8000a5c:	431a      	orrs	r2, r3
                   | ( (pll_P)        << 27 )
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	06db      	lsls	r3, r3, #27
 8000a62:	431a      	orrs	r2, r3
                   | ( (pll_Q/2-1)    << 21 )
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	085b      	lsrs	r3, r3, #1
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	055b      	lsls	r3, r3, #21
 8000a6c:	431a      	orrs	r2, r3
                   | ( (pll_R/2-1)    << 25 );
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	085b      	lsrs	r3, r3, #1
 8000a72:	3b01      	subs	r3, #1
 8000a74:	065b      	lsls	r3, r3, #25
 8000a76:	4313      	orrs	r3, r2
    RCC->PLLCFGR =   RCC_PLLCFGR_PLLSRC_MSI
 8000a78:	4a18      	ldr	r2, [pc, #96]	; (8000adc <SystemInit+0x148>)
                   | ( (pll_R/2-1)    << 25 );
 8000a7a:	f043 7388 	orr.w	r3, r3, #17825792	; 0x1100000
 8000a7e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    RCC->PLLCFGR =   RCC_PLLCFGR_PLLSRC_MSI
 8000a82:	60d3      	str	r3, [r2, #12]

    // Clock control register
    RCC->CR |= RCC_CR_PLLON;            // PLL enable: ON
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <SystemInit+0x148>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a14      	ldr	r2, [pc, #80]	; (8000adc <SystemInit+0x148>)
 8000a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a8e:	6013      	str	r3, [r2, #0]
    while( !(RCC->CR & RCC_CR_PLLRDY) );// Wait until PLL is ready
 8000a90:	bf00      	nop
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <SystemInit+0x148>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f9      	beq.n	8000a92 <SystemInit+0xfe>

    // Clock Configuration Register
    RCC->CFGR &= ~RCC_CFGR_SW;          // reset system clock switch
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <SystemInit+0x148>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <SystemInit+0x148>)
 8000aa4:	f023 0303 	bic.w	r3, r3, #3
 8000aa8:	6093      	str	r3, [r2, #8]
    RCC->CFGR |=  RCC_CFGR_SW_PLL;      // System clock switch:
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <SystemInit+0x148>)
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <SystemInit+0x148>)
 8000ab0:	f043 0303 	orr.w	r3, r3, #3
 8000ab4:	6093      	str	r3, [r2, #8]
                                        //  PLL selected as system clock

    // Wait for system clock switch is ready
    while( (RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL );
 8000ab6:	bf00      	nop
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <SystemInit+0x148>)
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	f003 030c 	and.w	r3, r3, #12
 8000ac0:	2b0c      	cmp	r3, #12
 8000ac2:	d1f9      	bne.n	8000ab8 <SystemInit+0x124>
  {
    // Error: Wrong clock configuration
  }

  // System Control Block
  SCB->VTOR = FLASH_BASE | 0x00; // Vector Table Relocation in internal FLASH
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <SystemInit+0x144>)
 8000ac6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aca:	609a      	str	r2, [r3, #8]

}
 8000acc:	bf00      	nop
 8000ace:	371c      	adds	r7, #28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40022000 	.word	0x40022000

08000ae4 <nucleoPortpinInit>:
 */

#include "nucleoPin.h"
#include "port.h"

void nucleoPortpinInit(NucleoPin_t pin, unsigned mode, unsigned af) {
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	f107 0408 	add.w	r4, r7, #8
 8000aee:	e884 0003 	stmia.w	r4, {r0, r1}
 8000af2:	607a      	str	r2, [r7, #4]
 8000af4:	603b      	str	r3, [r7, #0]
	portpinInit(pin.ptr, pin.pin, mode, af);
 8000af6:	68b8      	ldr	r0, [r7, #8]
 8000af8:	68f9      	ldr	r1, [r7, #12]
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	f000 f817 	bl	8000b30 <portpinInit>
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd90      	pop	{r4, r7, pc}

08000b0a <nucleoPortpinSet>:

void nucleoPortpinSet(NucleoPin_t pin, unsigned value) {
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b084      	sub	sp, #16
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b18:	607a      	str	r2, [r7, #4]
	portpinSet(pin.ptr, pin.pin, value);
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	68f9      	ldr	r1, [r7, #12]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 f88d 	bl	8000c40 <portpinSet>
}
 8000b26:	bf00      	nop
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <portpinInit>:
//-------------------------------------------------------------------
#include "port.h"

//-------------------------------------------------------------------
void portpinInit( GPIO_TypeDef *ptr, unsigned pin, unsigned mode, unsigned af)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b08f      	sub	sp, #60	; 0x3c
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
 8000b3c:	603b      	str	r3, [r7, #0]
  unsigned pin2 = 2*pin;
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	637b      	str	r3, [r7, #52]	; 0x34
  unsigned pin3 = pin>>3;
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	08db      	lsrs	r3, r3, #3
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30

  unsigned bitmask1 = ~((unsigned)0x01 <<     pin    );
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  unsigned bitmask2 = ~((unsigned)0x03 <<     pin2   );
 8000b56:	2203      	movs	r2, #3
 8000b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned bitmask3 = ~((unsigned)0x0F << (4*(pin%8)));
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	f003 0307 	and.w	r3, r3, #7
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	220f      	movs	r2, #15
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24

  unsigned moder   = (unsigned)((mode    )&0x03) << pin2;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0203 	and.w	r2, r3, #3
 8000b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	623b      	str	r3, [r7, #32]
  unsigned pupdr   = (unsigned)((mode>> 8)&0x03) << pin2;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0203 	and.w	r2, r3, #3
 8000b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	61fb      	str	r3, [r7, #28]
  unsigned otyper  = (unsigned)((mode>> 4)&0x01) << pin;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	091b      	lsrs	r3, r3, #4
 8000b96:	f003 0201 	and.w	r2, r3, #1
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	61bb      	str	r3, [r7, #24]
  unsigned ospeedr = (unsigned)((mode>>12)&0x03) << pin2;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	0b1b      	lsrs	r3, r3, #12
 8000ba6:	f003 0203 	and.w	r2, r3, #3
 8000baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	617b      	str	r3, [r7, #20]
  unsigned afr     = (unsigned)((af      )&0x0F) << (4*(pin%8));
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	f003 020f 	and.w	r2, r3, #15
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	613b      	str	r3, [r7, #16]
  
  RCC->AHB2ENR |= 0xFF;
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <portpinInit+0x10c>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	4a1c      	ldr	r2, [pc, #112]	; (8000c3c <portpinInit+0x10c>)
 8000bcc:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
  
  ptr->MODER     = ( ptr->MODER     & bitmask2 ) | moder;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd8:	401a      	ands	r2, r3
 8000bda:	6a3b      	ldr	r3, [r7, #32]
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	601a      	str	r2, [r3, #0]
  ptr->PUPDR     = ( ptr->PUPDR     & bitmask2 ) | pupdr;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	68da      	ldr	r2, [r3, #12]
 8000be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be8:	401a      	ands	r2, r3
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	431a      	orrs	r2, r3
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	60da      	str	r2, [r3, #12]
  ptr->OTYPER    = ( ptr->OTYPER    & bitmask1 ) | otyper;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf8:	401a      	ands	r2, r3
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	431a      	orrs	r2, r3
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	605a      	str	r2, [r3, #4]
  ptr->OSPEEDR   = ( ptr->OSPEEDR   & bitmask2 ) | ospeedr;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	689a      	ldr	r2, [r3, #8]
 8000c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c08:	401a      	ands	r2, r3
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	609a      	str	r2, [r3, #8]
  ptr->AFR[pin3] = ( ptr->AFR[pin3] & bitmask3 ) | afr;  
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c16:	3208      	adds	r2, #8
 8000c18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1e:	401a      	ands	r2, r3
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	ea42 0103 	orr.w	r1, r2, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c2a:	3208      	adds	r2, #8
 8000c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000c30:	bf00      	nop
 8000c32:	373c      	adds	r7, #60	; 0x3c
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	40021000 	.word	0x40021000

08000c40 <portpinSet>:

//-------------------------------------------------------------------
void portpinSet( GPIO_TypeDef *ptr, unsigned pin, unsigned value )
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  if( value )    
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d007      	beq.n	8000c62 <portpinSet+0x22>
  {
    ptr->BSRR = (1<<pin);
 8000c52:	2201      	movs	r2, #1
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    ptr->BSRR = (1<<pin)<<16;
  }
}
 8000c60:	e007      	b.n	8000c72 <portpinSet+0x32>
    ptr->BSRR = (1<<pin)<<16;
 8000c62:	2201      	movs	r2, #1
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	041b      	lsls	r3, r3, #16
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	619a      	str	r2, [r3, #24]
}
 8000c72:	bf00      	nop
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	db0b      	blt.n	8000caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	f003 021f 	and.w	r2, r3, #31
 8000c98:	4907      	ldr	r1, [pc, #28]	; (8000cb8 <__NVIC_EnableIRQ+0x38>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	095b      	lsrs	r3, r3, #5
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000e100 	.word	0xe000e100

08000cbc <timerInit>:
//*******************************************************************
void (*isr)(void) = 0;

//-------------------------------------------------------------------
void timerInit( unsigned cycleTime,  void (*isrIn)(void))
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  float    tics = 72.0 /*MHz*/ * cycleTime /* us */;
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff fd46 	bl	8000758 <__aeabi_ui2d>
 8000ccc:	f04f 0200 	mov.w	r2, #0
 8000cd0:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <timerInit+0xb4>)
 8000cd2:	f7ff fad5 	bl	8000280 <__aeabi_dmul>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	460b      	mov	r3, r1
 8000cda:	4610      	mov	r0, r2
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f7ff fdb5 	bl	800084c <__aeabi_d2f>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	60fb      	str	r3, [r7, #12]
  unsigned ps   = 1;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	60bb      	str	r3, [r7, #8]

  // calculate tics and prescaler
  while( tics > 0xFFFF ) // tics must be < 16Bits
 8000cea:	e00d      	b.n	8000d08 <timerInit+0x4c>
  {
    ps   *= 10;
 8000cec:	68ba      	ldr	r2, [r7, #8]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
    tics /= 10;
 8000cf8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cfc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000d00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d04:	edc7 7a03 	vstr	s15, [r7, #12]
  while( tics > 0xFFFF ) // tics must be < 16Bits
 8000d08:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d0c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000d74 <timerInit+0xb8>
 8000d10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d18:	dce8      	bgt.n	8000cec <timerInit+0x30>
  }

  RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8000d1a:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <timerInit+0xbc>)
 8000d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1e:	4a16      	ldr	r2, [pc, #88]	; (8000d78 <timerInit+0xbc>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6593      	str	r3, [r2, #88]	; 0x58

  TIM2->CR1  = TIM_CR1_CEN;  // counter enable
 8000d26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	601a      	str	r2, [r3, #0]
  TIM2->DIER = TIM_DIER_UIE; // update interrupt enable
 8000d2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d32:	2201      	movs	r2, #1
 8000d34:	60da      	str	r2, [r3, #12]
  TIM2->EGR  = TIM_EGR_UG;   // re-initialize timer
 8000d36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	615a      	str	r2, [r3, #20]
  TIM2->PSC  = ps - 1;
 8000d3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	6293      	str	r3, [r2, #40]	; 0x28
  TIM2->ARR  = (unsigned)tics;
 8000d48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d54:	ee17 2a90 	vmov	r2, s15
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  isr = isrIn;
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <timerInit+0xc0>)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	6013      	str	r3, [r2, #0]
  
  NVIC_EnableIRQ( TIM2_IRQn );
 8000d60:	201c      	movs	r0, #28
 8000d62:	f7ff ff8d 	bl	8000c80 <__NVIC_EnableIRQ>
}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40520000 	.word	0x40520000
 8000d74:	477fff00 	.word	0x477fff00
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	2000009c 	.word	0x2000009c

08000d80 <TIM2_IRQHandler>:

//-------------------------------------------------------------------
  void TIM2_IRQHandler(void)
  {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
    TIM2->SR &= ~TIM_SR_UIF;
 8000d84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8e:	f023 0301 	bic.w	r3, r3, #1
 8000d92:	6113      	str	r3, [r2, #16]
    if( isr )
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <TIM2_IRQHandler+0x28>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d002      	beq.n	8000da2 <TIM2_IRQHandler+0x22>
    {
      isr();
 8000d9c:	4b02      	ldr	r3, [pc, #8]	; (8000da8 <TIM2_IRQHandler+0x28>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4798      	blx	r3
    }
  }
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000009c 	.word	0x2000009c

08000dac <__NVIC_EnableIRQ>:
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db0b      	blt.n	8000dd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 021f 	and.w	r2, r3, #31
 8000dc4:	4907      	ldr	r1, [pc, #28]	; (8000de4 <__NVIC_EnableIRQ+0x38>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	2001      	movs	r0, #1
 8000dce:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <uartInit>:

static unsigned char txRunning = 0;

//-------------------------------------------------------------------
void uartInit( void )
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // enable USART clock
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <uartInit+0x68>)
 8000dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df0:	4a17      	ldr	r2, [pc, #92]	; (8000e50 <uartInit+0x68>)
 8000df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df6:	6593      	str	r3, [r2, #88]	; 0x58
 // RCC->AHB1ENR  |= AHB1ENR(1 << 0);
  portpinInit( GPIOA, 15, ALTERNATE_FUNC, 3 ); // USART 2 RX
 8000df8:	2303      	movs	r3, #3
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	210f      	movs	r1, #15
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e02:	f7ff fe95 	bl	8000b30 <portpinInit>
  portpinInit( GPIOA,  2, ALTERNATE_FUNC, 7 ); // USART 2 TX
 8000e06:	2307      	movs	r3, #7
 8000e08:	2202      	movs	r2, #2
 8000e0a:	2102      	movs	r1, #2
 8000e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e10:	f7ff fe8e 	bl	8000b30 <portpinInit>

  NVIC_EnableIRQ( USART2_IRQn );
 8000e14:	2026      	movs	r0, #38	; 0x26
 8000e16:	f7ff ffc9 	bl	8000dac <__NVIC_EnableIRQ>

  USART2->CR2 |=  (0<<12);           // 0: 1 stop bit
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <uartInit+0x6c>)
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <uartInit+0x6c>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	6053      	str	r3, [r2, #4]

  USART2->CR1 |=  (  !USART_CR1_M    // 8 Bit
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <uartInit+0x6c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <uartInit+0x6c>)
 8000e28:	f043 030c 	orr.w	r3, r3, #12
 8000e2c:	6013      	str	r3, [r2, #0]
              | !USART_CR1_PCE       // no parity
              |  USART_CR1_RE        // RX mode
              |  USART_CR1_TE );     // TX mode

  USART2->CR3 |=  (  !USART_CR3_RTSE
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <uartInit+0x6c>)
 8000e30:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <uartInit+0x6c>)
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	6093      	str	r3, [r2, #8]
              | !USART_CR3_CTSE );   // no hardware flow control

  USART2->BRR  = (unsigned)(72000000L / 19200);
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <uartInit+0x6c>)
 8000e38:	f640 62a6 	movw	r2, #3750	; 0xea6
 8000e3c:	60da      	str	r2, [r3, #12]

  USART2->CR1 |= (  USART_CR1_UE     // Enable USART
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <uartInit+0x6c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <uartInit+0x6c>)
 8000e44:	f043 0361 	orr.w	r3, r3, #97	; 0x61
 8000e48:	6013      	str	r3, [r2, #0]
              | USART_CR1_TCIE       // Transm. complete interr. enable
              | USART_CR1_RXNEIE );  // Receive reg. not empty interr. enable
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40004400 	.word	0x40004400

08000e58 <uartPrintf>:

//-------------------------------------------------------------------
void uartPrintf( const char *format, ... )
{
 8000e58:	b40f      	push	{r0, r1, r2, r3}
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b0c4      	sub	sp, #272	; 0x110
 8000e5e:	af00      	add	r7, sp, #0
  unsigned  i;
  char str[ UART_BUFFER_SIZE+2 ]; // ein paar Zeichen als Reserve

  va_list argzeiger;
  va_start( argzeiger, format );
 8000e60:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	601a      	str	r2, [r3, #0]
  vsnprintf( str, UART_BUFFER_SIZE, format, argzeiger );
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	f107 0008 	add.w	r0, r7, #8
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000e74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e78:	f000 f934 	bl	80010e4 <vsniprintf>
  va_end( argzeiger);
  
  // Zeichenweise an Display-Speicher uebertragen
  for (i=0; str[i]!=0 && i<UART_BUFFER_SIZE; i++) 
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000e82:	e033      	b.n	8000eec <uartPrintf+0x94>
  {    
    txBuffer[txWriteIdx] = str[i];
 8000e84:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <uartPrintf+0xbc>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f107 0208 	add.w	r2, r7, #8
 8000e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e92:	4413      	add	r3, r2
 8000e94:	781a      	ldrb	r2, [r3, #0]
 8000e96:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <uartPrintf+0xc0>)
 8000e98:	545a      	strb	r2, [r3, r1]
    txWriteIdx++;
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <uartPrintf+0xbc>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <uartPrintf+0xbc>)
 8000ea4:	701a      	strb	r2, [r3, #0]

    if( !txRunning ) // Interrupt ausloesen, falls erforderlich
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <uartPrintf+0xc4>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d110      	bne.n	8000ed0 <uartPrintf+0x78>
    {
      txRunning = 1;  
 8000eae:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <uartPrintf+0xc4>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	701a      	strb	r2, [r3, #0]
      
      USART2->TDR = txBuffer[txReadIdx];
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <uartPrintf+0xc8>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <uartPrintf+0xc0>)
 8000ebc:	5c9a      	ldrb	r2, [r3, r2]
 8000ebe:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <uartPrintf+0xcc>)
 8000ec0:	b292      	uxth	r2, r2
 8000ec2:	851a      	strh	r2, [r3, #40]	; 0x28
      txReadIdx++;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <uartPrintf+0xc8>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <uartPrintf+0xc8>)
 8000ece:	701a      	strb	r2, [r3, #0]
    }
    while( txReadIdx == (unsigned char)(txWriteIdx+1) ); // warten bis FIFO nicht voll
 8000ed0:	bf00      	nop
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <uartPrintf+0xbc>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <uartPrintf+0xc8>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d0f7      	beq.n	8000ed2 <uartPrintf+0x7a>
  for (i=0; str[i]!=0 && i<UART_BUFFER_SIZE; i++) 
 8000ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000eec:	f107 0208 	add.w	r2, r7, #8
 8000ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ef4:	4413      	add	r3, r2
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <uartPrintf+0xac>
 8000efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f00:	2bff      	cmp	r3, #255	; 0xff
 8000f02:	d9bf      	bls.n	8000e84 <uartPrintf+0x2c>
  }
}
 8000f04:	bf00      	nop
 8000f06:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f10:	b004      	add	sp, #16
 8000f12:	4770      	bx	lr
 8000f14:	200002a1 	.word	0x200002a1
 8000f18:	200001a0 	.word	0x200001a0
 8000f1c:	200002a4 	.word	0x200002a4
 8000f20:	200002a0 	.word	0x200002a0
 8000f24:	40004400 	.word	0x40004400

08000f28 <USART2_IRQHandler>:
  return( NULL );
}

//-------------------------------------------------------------------
void USART2_IRQHandler( void )
{  
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
	unsigned char c;
	
  if( USART2->ISR  & USART_ISR_TC ) // transmission complete?
 8000f2e:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <USART2_IRQHandler+0xa4>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d01d      	beq.n	8000f76 <USART2_IRQHandler+0x4e>
  {
		USART2->ICR |= (USART_ICR_TCCF);
 8000f3a:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <USART2_IRQHandler+0xa4>)
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	4a23      	ldr	r2, [pc, #140]	; (8000fcc <USART2_IRQHandler+0xa4>)
 8000f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f44:	6213      	str	r3, [r2, #32]
    if( txReadIdx != txWriteIdx ) // FIFO not empty
 8000f46:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <USART2_IRQHandler+0xa8>)
 8000f48:	781a      	ldrb	r2, [r3, #0]
 8000f4a:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <USART2_IRQHandler+0xac>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d00e      	beq.n	8000f70 <USART2_IRQHandler+0x48>
    {
      USART2->TDR = txBuffer[txReadIdx];
 8000f52:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <USART2_IRQHandler+0xa8>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <USART2_IRQHandler+0xb0>)
 8000f5a:	5c9a      	ldrb	r2, [r3, r2]
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <USART2_IRQHandler+0xa4>)
 8000f5e:	b292      	uxth	r2, r2
 8000f60:	851a      	strh	r2, [r3, #40]	; 0x28
      txReadIdx++;
 8000f62:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <USART2_IRQHandler+0xa8>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	3301      	adds	r3, #1
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <USART2_IRQHandler+0xa8>)
 8000f6c:	701a      	strb	r2, [r3, #0]
 8000f6e:	e002      	b.n	8000f76 <USART2_IRQHandler+0x4e>
    }
    else
    {
      txRunning = 0;
 8000f70:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <USART2_IRQHandler+0xb4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
			
    }
  }
  
  if( (USART2->ISR  & USART_ISR_RXNE ) || (USART2->ISR & USART_ISR_ORE) ) // receive data register not empty
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <USART2_IRQHandler+0xa4>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	f003 0320 	and.w	r3, r3, #32
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d105      	bne.n	8000f8e <USART2_IRQHandler+0x66>
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <USART2_IRQHandler+0xa4>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d017      	beq.n	8000fbe <USART2_IRQHandler+0x96>
  {
		c = USART2->RDR;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <USART2_IRQHandler+0xa4>)
 8000f90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	71fb      	strb	r3, [r7, #7]
		
    if( rxReadIdx != (unsigned char)(rxWriteIdx+1) ) // FIFO not full
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <USART2_IRQHandler+0xb8>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <USART2_IRQHandler+0xbc>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d00b      	beq.n	8000fbe <USART2_IRQHandler+0x96>
    {
      rxBuffer[rxWriteIdx] = c;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <USART2_IRQHandler+0xb8>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	4619      	mov	r1, r3
 8000fac:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <USART2_IRQHandler+0xc0>)
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	5453      	strb	r3, [r2, r1]
      rxWriteIdx++;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <USART2_IRQHandler+0xb8>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <USART2_IRQHandler+0xb8>)
 8000fbc:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40004400 	.word	0x40004400
 8000fd0:	200002a0 	.word	0x200002a0
 8000fd4:	200002a1 	.word	0x200002a1
 8000fd8:	200001a0 	.word	0x200001a0
 8000fdc:	200002a4 	.word	0x200002a4
 8000fe0:	200002a3 	.word	0x200002a3
 8000fe4:	200002a2 	.word	0x200002a2
 8000fe8:	200000a0 	.word	0x200000a0

08000fec <switchLed>:

#define BUTTON PIN_D2

unsigned ledState = 0;

void switchLed(void) { nucleoPortpinSet(LED_LD3, ledState=!ledState); }
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <switchLed+0x2c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	bf0c      	ite	eq
 8000ff8:	2301      	moveq	r3, #1
 8000ffa:	2300      	movne	r3, #0
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <switchLed+0x2c>)
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <switchLed+0x2c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4904      	ldr	r1, [pc, #16]	; (800101c <switchLed+0x30>)
 800100a:	461a      	mov	r2, r3
 800100c:	c903      	ldmia	r1, {r0, r1}
 800100e:	f7ff fd7c 	bl	8000b0a <nucleoPortpinSet>
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200002a8 	.word	0x200002a8
 800101c:	20000010 	.word	0x20000010

08001020 <main>:

//--------------------------------------------
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  char *str;

  nucleoPortpinInit(BUTTON, INPUT|PULL_UP, 0);
 8001024:	4910      	ldr	r1, [pc, #64]	; (8001068 <main+0x48>)
 8001026:	2300      	movs	r3, #0
 8001028:	f44f 7280 	mov.w	r2, #256	; 0x100
 800102c:	c903      	ldmia	r1, {r0, r1}
 800102e:	f7ff fd59 	bl	8000ae4 <nucleoPortpinInit>
  nucleoPortpinInit(PIN_D3, INPUT|PULL_UP, 0);
 8001032:	490e      	ldr	r1, [pc, #56]	; (800106c <main+0x4c>)
 8001034:	2300      	movs	r3, #0
 8001036:	f44f 7280 	mov.w	r2, #256	; 0x100
 800103a:	c903      	ldmia	r1, {r0, r1}
 800103c:	f7ff fd52 	bl	8000ae4 <nucleoPortpinInit>
  nucleoPortpinInit(LED_LD3, OUTPUT, 0);
 8001040:	490b      	ldr	r1, [pc, #44]	; (8001070 <main+0x50>)
 8001042:	2300      	movs	r3, #0
 8001044:	2201      	movs	r2, #1
 8001046:	c903      	ldmia	r1, {r0, r1}
 8001048:	f7ff fd4c 	bl	8000ae4 <nucleoPortpinInit>

  timerInit(1000000, switchLed);
 800104c:	4909      	ldr	r1, [pc, #36]	; (8001074 <main+0x54>)
 800104e:	480a      	ldr	r0, [pc, #40]	; (8001078 <main+0x58>)
 8001050:	f7ff fe34 	bl	8000cbc <timerInit>
  uartInit();
 8001054:	f7ff fec8 	bl	8000de8 <uartInit>

  uartPrintf("TEST\r\n");
 8001058:	4808      	ldr	r0, [pc, #32]	; (800107c <main+0x5c>)
 800105a:	f7ff fefd 	bl	8000e58 <uartPrintf>

  while(0)
 800105e:	bf00      	nop
 8001060:	2300      	movs	r3, #0
    if( (str = uartGetString()) != 0 )
    {
      uartPrintf("<%s>\r\n",str);
    }
  }
}
 8001062:	4618      	mov	r0, r3
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000000 	.word	0x20000000
 800106c:	20000008 	.word	0x20000008
 8001070:	20000010 	.word	0x20000010
 8001074:	08000fed 	.word	0x08000fed
 8001078:	000f4240 	.word	0x000f4240
 800107c:	08001934 	.word	0x08001934

08001080 <__errno>:
 8001080:	4b01      	ldr	r3, [pc, #4]	; (8001088 <__errno+0x8>)
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000018 	.word	0x20000018

0800108c <_vsniprintf_r>:
 800108c:	b530      	push	{r4, r5, lr}
 800108e:	1e14      	subs	r4, r2, #0
 8001090:	4605      	mov	r5, r0
 8001092:	b09b      	sub	sp, #108	; 0x6c
 8001094:	4618      	mov	r0, r3
 8001096:	da05      	bge.n	80010a4 <_vsniprintf_r+0x18>
 8001098:	238b      	movs	r3, #139	; 0x8b
 800109a:	602b      	str	r3, [r5, #0]
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	b01b      	add	sp, #108	; 0x6c
 80010a2:	bd30      	pop	{r4, r5, pc}
 80010a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80010a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80010ac:	bf14      	ite	ne
 80010ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80010b2:	4623      	moveq	r3, r4
 80010b4:	9302      	str	r3, [sp, #8]
 80010b6:	9305      	str	r3, [sp, #20]
 80010b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010bc:	9100      	str	r1, [sp, #0]
 80010be:	9104      	str	r1, [sp, #16]
 80010c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80010c4:	4602      	mov	r2, r0
 80010c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80010c8:	4669      	mov	r1, sp
 80010ca:	4628      	mov	r0, r5
 80010cc:	f000 f874 	bl	80011b8 <_svfiprintf_r>
 80010d0:	1c43      	adds	r3, r0, #1
 80010d2:	bfbc      	itt	lt
 80010d4:	238b      	movlt	r3, #139	; 0x8b
 80010d6:	602b      	strlt	r3, [r5, #0]
 80010d8:	2c00      	cmp	r4, #0
 80010da:	d0e1      	beq.n	80010a0 <_vsniprintf_r+0x14>
 80010dc:	9b00      	ldr	r3, [sp, #0]
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
 80010e2:	e7dd      	b.n	80010a0 <_vsniprintf_r+0x14>

080010e4 <vsniprintf>:
 80010e4:	b507      	push	{r0, r1, r2, lr}
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	4613      	mov	r3, r2
 80010ea:	460a      	mov	r2, r1
 80010ec:	4601      	mov	r1, r0
 80010ee:	4803      	ldr	r0, [pc, #12]	; (80010fc <vsniprintf+0x18>)
 80010f0:	6800      	ldr	r0, [r0, #0]
 80010f2:	f7ff ffcb 	bl	800108c <_vsniprintf_r>
 80010f6:	b003      	add	sp, #12
 80010f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80010fc:	20000018 	.word	0x20000018

08001100 <__ssputs_r>:
 8001100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001104:	688e      	ldr	r6, [r1, #8]
 8001106:	429e      	cmp	r6, r3
 8001108:	4682      	mov	sl, r0
 800110a:	460c      	mov	r4, r1
 800110c:	4690      	mov	r8, r2
 800110e:	461f      	mov	r7, r3
 8001110:	d838      	bhi.n	8001184 <__ssputs_r+0x84>
 8001112:	898a      	ldrh	r2, [r1, #12]
 8001114:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001118:	d032      	beq.n	8001180 <__ssputs_r+0x80>
 800111a:	6825      	ldr	r5, [r4, #0]
 800111c:	6909      	ldr	r1, [r1, #16]
 800111e:	eba5 0901 	sub.w	r9, r5, r1
 8001122:	6965      	ldr	r5, [r4, #20]
 8001124:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001128:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800112c:	3301      	adds	r3, #1
 800112e:	444b      	add	r3, r9
 8001130:	106d      	asrs	r5, r5, #1
 8001132:	429d      	cmp	r5, r3
 8001134:	bf38      	it	cc
 8001136:	461d      	movcc	r5, r3
 8001138:	0553      	lsls	r3, r2, #21
 800113a:	d531      	bpl.n	80011a0 <__ssputs_r+0xa0>
 800113c:	4629      	mov	r1, r5
 800113e:	f000 fb47 	bl	80017d0 <_malloc_r>
 8001142:	4606      	mov	r6, r0
 8001144:	b950      	cbnz	r0, 800115c <__ssputs_r+0x5c>
 8001146:	230c      	movs	r3, #12
 8001148:	f8ca 3000 	str.w	r3, [sl]
 800114c:	89a3      	ldrh	r3, [r4, #12]
 800114e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001152:	81a3      	strh	r3, [r4, #12]
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115c:	6921      	ldr	r1, [r4, #16]
 800115e:	464a      	mov	r2, r9
 8001160:	f000 fabe 	bl	80016e0 <memcpy>
 8001164:	89a3      	ldrh	r3, [r4, #12]
 8001166:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800116a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800116e:	81a3      	strh	r3, [r4, #12]
 8001170:	6126      	str	r6, [r4, #16]
 8001172:	6165      	str	r5, [r4, #20]
 8001174:	444e      	add	r6, r9
 8001176:	eba5 0509 	sub.w	r5, r5, r9
 800117a:	6026      	str	r6, [r4, #0]
 800117c:	60a5      	str	r5, [r4, #8]
 800117e:	463e      	mov	r6, r7
 8001180:	42be      	cmp	r6, r7
 8001182:	d900      	bls.n	8001186 <__ssputs_r+0x86>
 8001184:	463e      	mov	r6, r7
 8001186:	4632      	mov	r2, r6
 8001188:	6820      	ldr	r0, [r4, #0]
 800118a:	4641      	mov	r1, r8
 800118c:	f000 fab6 	bl	80016fc <memmove>
 8001190:	68a3      	ldr	r3, [r4, #8]
 8001192:	6822      	ldr	r2, [r4, #0]
 8001194:	1b9b      	subs	r3, r3, r6
 8001196:	4432      	add	r2, r6
 8001198:	60a3      	str	r3, [r4, #8]
 800119a:	6022      	str	r2, [r4, #0]
 800119c:	2000      	movs	r0, #0
 800119e:	e7db      	b.n	8001158 <__ssputs_r+0x58>
 80011a0:	462a      	mov	r2, r5
 80011a2:	f000 fb6f 	bl	8001884 <_realloc_r>
 80011a6:	4606      	mov	r6, r0
 80011a8:	2800      	cmp	r0, #0
 80011aa:	d1e1      	bne.n	8001170 <__ssputs_r+0x70>
 80011ac:	6921      	ldr	r1, [r4, #16]
 80011ae:	4650      	mov	r0, sl
 80011b0:	f000 fabe 	bl	8001730 <_free_r>
 80011b4:	e7c7      	b.n	8001146 <__ssputs_r+0x46>
	...

080011b8 <_svfiprintf_r>:
 80011b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011bc:	4698      	mov	r8, r3
 80011be:	898b      	ldrh	r3, [r1, #12]
 80011c0:	061b      	lsls	r3, r3, #24
 80011c2:	b09d      	sub	sp, #116	; 0x74
 80011c4:	4607      	mov	r7, r0
 80011c6:	460d      	mov	r5, r1
 80011c8:	4614      	mov	r4, r2
 80011ca:	d50e      	bpl.n	80011ea <_svfiprintf_r+0x32>
 80011cc:	690b      	ldr	r3, [r1, #16]
 80011ce:	b963      	cbnz	r3, 80011ea <_svfiprintf_r+0x32>
 80011d0:	2140      	movs	r1, #64	; 0x40
 80011d2:	f000 fafd 	bl	80017d0 <_malloc_r>
 80011d6:	6028      	str	r0, [r5, #0]
 80011d8:	6128      	str	r0, [r5, #16]
 80011da:	b920      	cbnz	r0, 80011e6 <_svfiprintf_r+0x2e>
 80011dc:	230c      	movs	r3, #12
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	e0d1      	b.n	800138a <_svfiprintf_r+0x1d2>
 80011e6:	2340      	movs	r3, #64	; 0x40
 80011e8:	616b      	str	r3, [r5, #20]
 80011ea:	2300      	movs	r3, #0
 80011ec:	9309      	str	r3, [sp, #36]	; 0x24
 80011ee:	2320      	movs	r3, #32
 80011f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80011f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80011f8:	2330      	movs	r3, #48	; 0x30
 80011fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80013a4 <_svfiprintf_r+0x1ec>
 80011fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001202:	f04f 0901 	mov.w	r9, #1
 8001206:	4623      	mov	r3, r4
 8001208:	469a      	mov	sl, r3
 800120a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800120e:	b10a      	cbz	r2, 8001214 <_svfiprintf_r+0x5c>
 8001210:	2a25      	cmp	r2, #37	; 0x25
 8001212:	d1f9      	bne.n	8001208 <_svfiprintf_r+0x50>
 8001214:	ebba 0b04 	subs.w	fp, sl, r4
 8001218:	d00b      	beq.n	8001232 <_svfiprintf_r+0x7a>
 800121a:	465b      	mov	r3, fp
 800121c:	4622      	mov	r2, r4
 800121e:	4629      	mov	r1, r5
 8001220:	4638      	mov	r0, r7
 8001222:	f7ff ff6d 	bl	8001100 <__ssputs_r>
 8001226:	3001      	adds	r0, #1
 8001228:	f000 80aa 	beq.w	8001380 <_svfiprintf_r+0x1c8>
 800122c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800122e:	445a      	add	r2, fp
 8001230:	9209      	str	r2, [sp, #36]	; 0x24
 8001232:	f89a 3000 	ldrb.w	r3, [sl]
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 80a2 	beq.w	8001380 <_svfiprintf_r+0x1c8>
 800123c:	2300      	movs	r3, #0
 800123e:	f04f 32ff 	mov.w	r2, #4294967295
 8001242:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001246:	f10a 0a01 	add.w	sl, sl, #1
 800124a:	9304      	str	r3, [sp, #16]
 800124c:	9307      	str	r3, [sp, #28]
 800124e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001252:	931a      	str	r3, [sp, #104]	; 0x68
 8001254:	4654      	mov	r4, sl
 8001256:	2205      	movs	r2, #5
 8001258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800125c:	4851      	ldr	r0, [pc, #324]	; (80013a4 <_svfiprintf_r+0x1ec>)
 800125e:	f7fe ffbf 	bl	80001e0 <memchr>
 8001262:	9a04      	ldr	r2, [sp, #16]
 8001264:	b9d8      	cbnz	r0, 800129e <_svfiprintf_r+0xe6>
 8001266:	06d0      	lsls	r0, r2, #27
 8001268:	bf44      	itt	mi
 800126a:	2320      	movmi	r3, #32
 800126c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001270:	0711      	lsls	r1, r2, #28
 8001272:	bf44      	itt	mi
 8001274:	232b      	movmi	r3, #43	; 0x2b
 8001276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800127a:	f89a 3000 	ldrb.w	r3, [sl]
 800127e:	2b2a      	cmp	r3, #42	; 0x2a
 8001280:	d015      	beq.n	80012ae <_svfiprintf_r+0xf6>
 8001282:	9a07      	ldr	r2, [sp, #28]
 8001284:	4654      	mov	r4, sl
 8001286:	2000      	movs	r0, #0
 8001288:	f04f 0c0a 	mov.w	ip, #10
 800128c:	4621      	mov	r1, r4
 800128e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001292:	3b30      	subs	r3, #48	; 0x30
 8001294:	2b09      	cmp	r3, #9
 8001296:	d94e      	bls.n	8001336 <_svfiprintf_r+0x17e>
 8001298:	b1b0      	cbz	r0, 80012c8 <_svfiprintf_r+0x110>
 800129a:	9207      	str	r2, [sp, #28]
 800129c:	e014      	b.n	80012c8 <_svfiprintf_r+0x110>
 800129e:	eba0 0308 	sub.w	r3, r0, r8
 80012a2:	fa09 f303 	lsl.w	r3, r9, r3
 80012a6:	4313      	orrs	r3, r2
 80012a8:	9304      	str	r3, [sp, #16]
 80012aa:	46a2      	mov	sl, r4
 80012ac:	e7d2      	b.n	8001254 <_svfiprintf_r+0x9c>
 80012ae:	9b03      	ldr	r3, [sp, #12]
 80012b0:	1d19      	adds	r1, r3, #4
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	9103      	str	r1, [sp, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	bfbb      	ittet	lt
 80012ba:	425b      	neglt	r3, r3
 80012bc:	f042 0202 	orrlt.w	r2, r2, #2
 80012c0:	9307      	strge	r3, [sp, #28]
 80012c2:	9307      	strlt	r3, [sp, #28]
 80012c4:	bfb8      	it	lt
 80012c6:	9204      	strlt	r2, [sp, #16]
 80012c8:	7823      	ldrb	r3, [r4, #0]
 80012ca:	2b2e      	cmp	r3, #46	; 0x2e
 80012cc:	d10c      	bne.n	80012e8 <_svfiprintf_r+0x130>
 80012ce:	7863      	ldrb	r3, [r4, #1]
 80012d0:	2b2a      	cmp	r3, #42	; 0x2a
 80012d2:	d135      	bne.n	8001340 <_svfiprintf_r+0x188>
 80012d4:	9b03      	ldr	r3, [sp, #12]
 80012d6:	1d1a      	adds	r2, r3, #4
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	9203      	str	r2, [sp, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bfb8      	it	lt
 80012e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80012e4:	3402      	adds	r4, #2
 80012e6:	9305      	str	r3, [sp, #20]
 80012e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80013b4 <_svfiprintf_r+0x1fc>
 80012ec:	7821      	ldrb	r1, [r4, #0]
 80012ee:	2203      	movs	r2, #3
 80012f0:	4650      	mov	r0, sl
 80012f2:	f7fe ff75 	bl	80001e0 <memchr>
 80012f6:	b140      	cbz	r0, 800130a <_svfiprintf_r+0x152>
 80012f8:	2340      	movs	r3, #64	; 0x40
 80012fa:	eba0 000a 	sub.w	r0, r0, sl
 80012fe:	fa03 f000 	lsl.w	r0, r3, r0
 8001302:	9b04      	ldr	r3, [sp, #16]
 8001304:	4303      	orrs	r3, r0
 8001306:	3401      	adds	r4, #1
 8001308:	9304      	str	r3, [sp, #16]
 800130a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800130e:	4826      	ldr	r0, [pc, #152]	; (80013a8 <_svfiprintf_r+0x1f0>)
 8001310:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001314:	2206      	movs	r2, #6
 8001316:	f7fe ff63 	bl	80001e0 <memchr>
 800131a:	2800      	cmp	r0, #0
 800131c:	d038      	beq.n	8001390 <_svfiprintf_r+0x1d8>
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <_svfiprintf_r+0x1f4>)
 8001320:	bb1b      	cbnz	r3, 800136a <_svfiprintf_r+0x1b2>
 8001322:	9b03      	ldr	r3, [sp, #12]
 8001324:	3307      	adds	r3, #7
 8001326:	f023 0307 	bic.w	r3, r3, #7
 800132a:	3308      	adds	r3, #8
 800132c:	9303      	str	r3, [sp, #12]
 800132e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001330:	4433      	add	r3, r6
 8001332:	9309      	str	r3, [sp, #36]	; 0x24
 8001334:	e767      	b.n	8001206 <_svfiprintf_r+0x4e>
 8001336:	fb0c 3202 	mla	r2, ip, r2, r3
 800133a:	460c      	mov	r4, r1
 800133c:	2001      	movs	r0, #1
 800133e:	e7a5      	b.n	800128c <_svfiprintf_r+0xd4>
 8001340:	2300      	movs	r3, #0
 8001342:	3401      	adds	r4, #1
 8001344:	9305      	str	r3, [sp, #20]
 8001346:	4619      	mov	r1, r3
 8001348:	f04f 0c0a 	mov.w	ip, #10
 800134c:	4620      	mov	r0, r4
 800134e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001352:	3a30      	subs	r2, #48	; 0x30
 8001354:	2a09      	cmp	r2, #9
 8001356:	d903      	bls.n	8001360 <_svfiprintf_r+0x1a8>
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0c5      	beq.n	80012e8 <_svfiprintf_r+0x130>
 800135c:	9105      	str	r1, [sp, #20]
 800135e:	e7c3      	b.n	80012e8 <_svfiprintf_r+0x130>
 8001360:	fb0c 2101 	mla	r1, ip, r1, r2
 8001364:	4604      	mov	r4, r0
 8001366:	2301      	movs	r3, #1
 8001368:	e7f0      	b.n	800134c <_svfiprintf_r+0x194>
 800136a:	ab03      	add	r3, sp, #12
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	462a      	mov	r2, r5
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <_svfiprintf_r+0x1f8>)
 8001372:	a904      	add	r1, sp, #16
 8001374:	4638      	mov	r0, r7
 8001376:	f3af 8000 	nop.w
 800137a:	1c42      	adds	r2, r0, #1
 800137c:	4606      	mov	r6, r0
 800137e:	d1d6      	bne.n	800132e <_svfiprintf_r+0x176>
 8001380:	89ab      	ldrh	r3, [r5, #12]
 8001382:	065b      	lsls	r3, r3, #25
 8001384:	f53f af2c 	bmi.w	80011e0 <_svfiprintf_r+0x28>
 8001388:	9809      	ldr	r0, [sp, #36]	; 0x24
 800138a:	b01d      	add	sp, #116	; 0x74
 800138c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001390:	ab03      	add	r3, sp, #12
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	462a      	mov	r2, r5
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <_svfiprintf_r+0x1f8>)
 8001398:	a904      	add	r1, sp, #16
 800139a:	4638      	mov	r0, r7
 800139c:	f000 f87a 	bl	8001494 <_printf_i>
 80013a0:	e7eb      	b.n	800137a <_svfiprintf_r+0x1c2>
 80013a2:	bf00      	nop
 80013a4:	0800193b 	.word	0x0800193b
 80013a8:	08001945 	.word	0x08001945
 80013ac:	00000000 	.word	0x00000000
 80013b0:	08001101 	.word	0x08001101
 80013b4:	08001941 	.word	0x08001941

080013b8 <_printf_common>:
 80013b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013bc:	4616      	mov	r6, r2
 80013be:	4699      	mov	r9, r3
 80013c0:	688a      	ldr	r2, [r1, #8]
 80013c2:	690b      	ldr	r3, [r1, #16]
 80013c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80013c8:	4293      	cmp	r3, r2
 80013ca:	bfb8      	it	lt
 80013cc:	4613      	movlt	r3, r2
 80013ce:	6033      	str	r3, [r6, #0]
 80013d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80013d4:	4607      	mov	r7, r0
 80013d6:	460c      	mov	r4, r1
 80013d8:	b10a      	cbz	r2, 80013de <_printf_common+0x26>
 80013da:	3301      	adds	r3, #1
 80013dc:	6033      	str	r3, [r6, #0]
 80013de:	6823      	ldr	r3, [r4, #0]
 80013e0:	0699      	lsls	r1, r3, #26
 80013e2:	bf42      	ittt	mi
 80013e4:	6833      	ldrmi	r3, [r6, #0]
 80013e6:	3302      	addmi	r3, #2
 80013e8:	6033      	strmi	r3, [r6, #0]
 80013ea:	6825      	ldr	r5, [r4, #0]
 80013ec:	f015 0506 	ands.w	r5, r5, #6
 80013f0:	d106      	bne.n	8001400 <_printf_common+0x48>
 80013f2:	f104 0a19 	add.w	sl, r4, #25
 80013f6:	68e3      	ldr	r3, [r4, #12]
 80013f8:	6832      	ldr	r2, [r6, #0]
 80013fa:	1a9b      	subs	r3, r3, r2
 80013fc:	42ab      	cmp	r3, r5
 80013fe:	dc26      	bgt.n	800144e <_printf_common+0x96>
 8001400:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001404:	1e13      	subs	r3, r2, #0
 8001406:	6822      	ldr	r2, [r4, #0]
 8001408:	bf18      	it	ne
 800140a:	2301      	movne	r3, #1
 800140c:	0692      	lsls	r2, r2, #26
 800140e:	d42b      	bmi.n	8001468 <_printf_common+0xb0>
 8001410:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001414:	4649      	mov	r1, r9
 8001416:	4638      	mov	r0, r7
 8001418:	47c0      	blx	r8
 800141a:	3001      	adds	r0, #1
 800141c:	d01e      	beq.n	800145c <_printf_common+0xa4>
 800141e:	6823      	ldr	r3, [r4, #0]
 8001420:	68e5      	ldr	r5, [r4, #12]
 8001422:	6832      	ldr	r2, [r6, #0]
 8001424:	f003 0306 	and.w	r3, r3, #6
 8001428:	2b04      	cmp	r3, #4
 800142a:	bf08      	it	eq
 800142c:	1aad      	subeq	r5, r5, r2
 800142e:	68a3      	ldr	r3, [r4, #8]
 8001430:	6922      	ldr	r2, [r4, #16]
 8001432:	bf0c      	ite	eq
 8001434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001438:	2500      	movne	r5, #0
 800143a:	4293      	cmp	r3, r2
 800143c:	bfc4      	itt	gt
 800143e:	1a9b      	subgt	r3, r3, r2
 8001440:	18ed      	addgt	r5, r5, r3
 8001442:	2600      	movs	r6, #0
 8001444:	341a      	adds	r4, #26
 8001446:	42b5      	cmp	r5, r6
 8001448:	d11a      	bne.n	8001480 <_printf_common+0xc8>
 800144a:	2000      	movs	r0, #0
 800144c:	e008      	b.n	8001460 <_printf_common+0xa8>
 800144e:	2301      	movs	r3, #1
 8001450:	4652      	mov	r2, sl
 8001452:	4649      	mov	r1, r9
 8001454:	4638      	mov	r0, r7
 8001456:	47c0      	blx	r8
 8001458:	3001      	adds	r0, #1
 800145a:	d103      	bne.n	8001464 <_printf_common+0xac>
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001464:	3501      	adds	r5, #1
 8001466:	e7c6      	b.n	80013f6 <_printf_common+0x3e>
 8001468:	18e1      	adds	r1, r4, r3
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	2030      	movs	r0, #48	; 0x30
 800146e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001472:	4422      	add	r2, r4
 8001474:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001478:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800147c:	3302      	adds	r3, #2
 800147e:	e7c7      	b.n	8001410 <_printf_common+0x58>
 8001480:	2301      	movs	r3, #1
 8001482:	4622      	mov	r2, r4
 8001484:	4649      	mov	r1, r9
 8001486:	4638      	mov	r0, r7
 8001488:	47c0      	blx	r8
 800148a:	3001      	adds	r0, #1
 800148c:	d0e6      	beq.n	800145c <_printf_common+0xa4>
 800148e:	3601      	adds	r6, #1
 8001490:	e7d9      	b.n	8001446 <_printf_common+0x8e>
	...

08001494 <_printf_i>:
 8001494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001498:	460c      	mov	r4, r1
 800149a:	4691      	mov	r9, r2
 800149c:	7e27      	ldrb	r7, [r4, #24]
 800149e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80014a0:	2f78      	cmp	r7, #120	; 0x78
 80014a2:	4680      	mov	r8, r0
 80014a4:	469a      	mov	sl, r3
 80014a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80014aa:	d807      	bhi.n	80014bc <_printf_i+0x28>
 80014ac:	2f62      	cmp	r7, #98	; 0x62
 80014ae:	d80a      	bhi.n	80014c6 <_printf_i+0x32>
 80014b0:	2f00      	cmp	r7, #0
 80014b2:	f000 80d8 	beq.w	8001666 <_printf_i+0x1d2>
 80014b6:	2f58      	cmp	r7, #88	; 0x58
 80014b8:	f000 80a3 	beq.w	8001602 <_printf_i+0x16e>
 80014bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80014c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80014c4:	e03a      	b.n	800153c <_printf_i+0xa8>
 80014c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80014ca:	2b15      	cmp	r3, #21
 80014cc:	d8f6      	bhi.n	80014bc <_printf_i+0x28>
 80014ce:	a001      	add	r0, pc, #4	; (adr r0, 80014d4 <_printf_i+0x40>)
 80014d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80014d4:	0800152d 	.word	0x0800152d
 80014d8:	08001541 	.word	0x08001541
 80014dc:	080014bd 	.word	0x080014bd
 80014e0:	080014bd 	.word	0x080014bd
 80014e4:	080014bd 	.word	0x080014bd
 80014e8:	080014bd 	.word	0x080014bd
 80014ec:	08001541 	.word	0x08001541
 80014f0:	080014bd 	.word	0x080014bd
 80014f4:	080014bd 	.word	0x080014bd
 80014f8:	080014bd 	.word	0x080014bd
 80014fc:	080014bd 	.word	0x080014bd
 8001500:	0800164d 	.word	0x0800164d
 8001504:	08001571 	.word	0x08001571
 8001508:	0800162f 	.word	0x0800162f
 800150c:	080014bd 	.word	0x080014bd
 8001510:	080014bd 	.word	0x080014bd
 8001514:	0800166f 	.word	0x0800166f
 8001518:	080014bd 	.word	0x080014bd
 800151c:	08001571 	.word	0x08001571
 8001520:	080014bd 	.word	0x080014bd
 8001524:	080014bd 	.word	0x080014bd
 8001528:	08001637 	.word	0x08001637
 800152c:	680b      	ldr	r3, [r1, #0]
 800152e:	1d1a      	adds	r2, r3, #4
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	600a      	str	r2, [r1, #0]
 8001534:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800153c:	2301      	movs	r3, #1
 800153e:	e0a3      	b.n	8001688 <_printf_i+0x1f4>
 8001540:	6825      	ldr	r5, [r4, #0]
 8001542:	6808      	ldr	r0, [r1, #0]
 8001544:	062e      	lsls	r6, r5, #24
 8001546:	f100 0304 	add.w	r3, r0, #4
 800154a:	d50a      	bpl.n	8001562 <_printf_i+0xce>
 800154c:	6805      	ldr	r5, [r0, #0]
 800154e:	600b      	str	r3, [r1, #0]
 8001550:	2d00      	cmp	r5, #0
 8001552:	da03      	bge.n	800155c <_printf_i+0xc8>
 8001554:	232d      	movs	r3, #45	; 0x2d
 8001556:	426d      	negs	r5, r5
 8001558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800155c:	485e      	ldr	r0, [pc, #376]	; (80016d8 <_printf_i+0x244>)
 800155e:	230a      	movs	r3, #10
 8001560:	e019      	b.n	8001596 <_printf_i+0x102>
 8001562:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001566:	6805      	ldr	r5, [r0, #0]
 8001568:	600b      	str	r3, [r1, #0]
 800156a:	bf18      	it	ne
 800156c:	b22d      	sxthne	r5, r5
 800156e:	e7ef      	b.n	8001550 <_printf_i+0xbc>
 8001570:	680b      	ldr	r3, [r1, #0]
 8001572:	6825      	ldr	r5, [r4, #0]
 8001574:	1d18      	adds	r0, r3, #4
 8001576:	6008      	str	r0, [r1, #0]
 8001578:	0628      	lsls	r0, r5, #24
 800157a:	d501      	bpl.n	8001580 <_printf_i+0xec>
 800157c:	681d      	ldr	r5, [r3, #0]
 800157e:	e002      	b.n	8001586 <_printf_i+0xf2>
 8001580:	0669      	lsls	r1, r5, #25
 8001582:	d5fb      	bpl.n	800157c <_printf_i+0xe8>
 8001584:	881d      	ldrh	r5, [r3, #0]
 8001586:	4854      	ldr	r0, [pc, #336]	; (80016d8 <_printf_i+0x244>)
 8001588:	2f6f      	cmp	r7, #111	; 0x6f
 800158a:	bf0c      	ite	eq
 800158c:	2308      	moveq	r3, #8
 800158e:	230a      	movne	r3, #10
 8001590:	2100      	movs	r1, #0
 8001592:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001596:	6866      	ldr	r6, [r4, #4]
 8001598:	60a6      	str	r6, [r4, #8]
 800159a:	2e00      	cmp	r6, #0
 800159c:	bfa2      	ittt	ge
 800159e:	6821      	ldrge	r1, [r4, #0]
 80015a0:	f021 0104 	bicge.w	r1, r1, #4
 80015a4:	6021      	strge	r1, [r4, #0]
 80015a6:	b90d      	cbnz	r5, 80015ac <_printf_i+0x118>
 80015a8:	2e00      	cmp	r6, #0
 80015aa:	d04d      	beq.n	8001648 <_printf_i+0x1b4>
 80015ac:	4616      	mov	r6, r2
 80015ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80015b2:	fb03 5711 	mls	r7, r3, r1, r5
 80015b6:	5dc7      	ldrb	r7, [r0, r7]
 80015b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80015bc:	462f      	mov	r7, r5
 80015be:	42bb      	cmp	r3, r7
 80015c0:	460d      	mov	r5, r1
 80015c2:	d9f4      	bls.n	80015ae <_printf_i+0x11a>
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d10b      	bne.n	80015e0 <_printf_i+0x14c>
 80015c8:	6823      	ldr	r3, [r4, #0]
 80015ca:	07df      	lsls	r7, r3, #31
 80015cc:	d508      	bpl.n	80015e0 <_printf_i+0x14c>
 80015ce:	6923      	ldr	r3, [r4, #16]
 80015d0:	6861      	ldr	r1, [r4, #4]
 80015d2:	4299      	cmp	r1, r3
 80015d4:	bfde      	ittt	le
 80015d6:	2330      	movle	r3, #48	; 0x30
 80015d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80015dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80015e0:	1b92      	subs	r2, r2, r6
 80015e2:	6122      	str	r2, [r4, #16]
 80015e4:	f8cd a000 	str.w	sl, [sp]
 80015e8:	464b      	mov	r3, r9
 80015ea:	aa03      	add	r2, sp, #12
 80015ec:	4621      	mov	r1, r4
 80015ee:	4640      	mov	r0, r8
 80015f0:	f7ff fee2 	bl	80013b8 <_printf_common>
 80015f4:	3001      	adds	r0, #1
 80015f6:	d14c      	bne.n	8001692 <_printf_i+0x1fe>
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	b004      	add	sp, #16
 80015fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001602:	4835      	ldr	r0, [pc, #212]	; (80016d8 <_printf_i+0x244>)
 8001604:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001608:	6823      	ldr	r3, [r4, #0]
 800160a:	680e      	ldr	r6, [r1, #0]
 800160c:	061f      	lsls	r7, r3, #24
 800160e:	f856 5b04 	ldr.w	r5, [r6], #4
 8001612:	600e      	str	r6, [r1, #0]
 8001614:	d514      	bpl.n	8001640 <_printf_i+0x1ac>
 8001616:	07d9      	lsls	r1, r3, #31
 8001618:	bf44      	itt	mi
 800161a:	f043 0320 	orrmi.w	r3, r3, #32
 800161e:	6023      	strmi	r3, [r4, #0]
 8001620:	b91d      	cbnz	r5, 800162a <_printf_i+0x196>
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	f023 0320 	bic.w	r3, r3, #32
 8001628:	6023      	str	r3, [r4, #0]
 800162a:	2310      	movs	r3, #16
 800162c:	e7b0      	b.n	8001590 <_printf_i+0xfc>
 800162e:	6823      	ldr	r3, [r4, #0]
 8001630:	f043 0320 	orr.w	r3, r3, #32
 8001634:	6023      	str	r3, [r4, #0]
 8001636:	2378      	movs	r3, #120	; 0x78
 8001638:	4828      	ldr	r0, [pc, #160]	; (80016dc <_printf_i+0x248>)
 800163a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800163e:	e7e3      	b.n	8001608 <_printf_i+0x174>
 8001640:	065e      	lsls	r6, r3, #25
 8001642:	bf48      	it	mi
 8001644:	b2ad      	uxthmi	r5, r5
 8001646:	e7e6      	b.n	8001616 <_printf_i+0x182>
 8001648:	4616      	mov	r6, r2
 800164a:	e7bb      	b.n	80015c4 <_printf_i+0x130>
 800164c:	680b      	ldr	r3, [r1, #0]
 800164e:	6826      	ldr	r6, [r4, #0]
 8001650:	6960      	ldr	r0, [r4, #20]
 8001652:	1d1d      	adds	r5, r3, #4
 8001654:	600d      	str	r5, [r1, #0]
 8001656:	0635      	lsls	r5, r6, #24
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	d501      	bpl.n	8001660 <_printf_i+0x1cc>
 800165c:	6018      	str	r0, [r3, #0]
 800165e:	e002      	b.n	8001666 <_printf_i+0x1d2>
 8001660:	0671      	lsls	r1, r6, #25
 8001662:	d5fb      	bpl.n	800165c <_printf_i+0x1c8>
 8001664:	8018      	strh	r0, [r3, #0]
 8001666:	2300      	movs	r3, #0
 8001668:	6123      	str	r3, [r4, #16]
 800166a:	4616      	mov	r6, r2
 800166c:	e7ba      	b.n	80015e4 <_printf_i+0x150>
 800166e:	680b      	ldr	r3, [r1, #0]
 8001670:	1d1a      	adds	r2, r3, #4
 8001672:	600a      	str	r2, [r1, #0]
 8001674:	681e      	ldr	r6, [r3, #0]
 8001676:	6862      	ldr	r2, [r4, #4]
 8001678:	2100      	movs	r1, #0
 800167a:	4630      	mov	r0, r6
 800167c:	f7fe fdb0 	bl	80001e0 <memchr>
 8001680:	b108      	cbz	r0, 8001686 <_printf_i+0x1f2>
 8001682:	1b80      	subs	r0, r0, r6
 8001684:	6060      	str	r0, [r4, #4]
 8001686:	6863      	ldr	r3, [r4, #4]
 8001688:	6123      	str	r3, [r4, #16]
 800168a:	2300      	movs	r3, #0
 800168c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001690:	e7a8      	b.n	80015e4 <_printf_i+0x150>
 8001692:	6923      	ldr	r3, [r4, #16]
 8001694:	4632      	mov	r2, r6
 8001696:	4649      	mov	r1, r9
 8001698:	4640      	mov	r0, r8
 800169a:	47d0      	blx	sl
 800169c:	3001      	adds	r0, #1
 800169e:	d0ab      	beq.n	80015f8 <_printf_i+0x164>
 80016a0:	6823      	ldr	r3, [r4, #0]
 80016a2:	079b      	lsls	r3, r3, #30
 80016a4:	d413      	bmi.n	80016ce <_printf_i+0x23a>
 80016a6:	68e0      	ldr	r0, [r4, #12]
 80016a8:	9b03      	ldr	r3, [sp, #12]
 80016aa:	4298      	cmp	r0, r3
 80016ac:	bfb8      	it	lt
 80016ae:	4618      	movlt	r0, r3
 80016b0:	e7a4      	b.n	80015fc <_printf_i+0x168>
 80016b2:	2301      	movs	r3, #1
 80016b4:	4632      	mov	r2, r6
 80016b6:	4649      	mov	r1, r9
 80016b8:	4640      	mov	r0, r8
 80016ba:	47d0      	blx	sl
 80016bc:	3001      	adds	r0, #1
 80016be:	d09b      	beq.n	80015f8 <_printf_i+0x164>
 80016c0:	3501      	adds	r5, #1
 80016c2:	68e3      	ldr	r3, [r4, #12]
 80016c4:	9903      	ldr	r1, [sp, #12]
 80016c6:	1a5b      	subs	r3, r3, r1
 80016c8:	42ab      	cmp	r3, r5
 80016ca:	dcf2      	bgt.n	80016b2 <_printf_i+0x21e>
 80016cc:	e7eb      	b.n	80016a6 <_printf_i+0x212>
 80016ce:	2500      	movs	r5, #0
 80016d0:	f104 0619 	add.w	r6, r4, #25
 80016d4:	e7f5      	b.n	80016c2 <_printf_i+0x22e>
 80016d6:	bf00      	nop
 80016d8:	0800194c 	.word	0x0800194c
 80016dc:	0800195d 	.word	0x0800195d

080016e0 <memcpy>:
 80016e0:	440a      	add	r2, r1
 80016e2:	4291      	cmp	r1, r2
 80016e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80016e8:	d100      	bne.n	80016ec <memcpy+0xc>
 80016ea:	4770      	bx	lr
 80016ec:	b510      	push	{r4, lr}
 80016ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80016f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80016f6:	4291      	cmp	r1, r2
 80016f8:	d1f9      	bne.n	80016ee <memcpy+0xe>
 80016fa:	bd10      	pop	{r4, pc}

080016fc <memmove>:
 80016fc:	4288      	cmp	r0, r1
 80016fe:	b510      	push	{r4, lr}
 8001700:	eb01 0402 	add.w	r4, r1, r2
 8001704:	d902      	bls.n	800170c <memmove+0x10>
 8001706:	4284      	cmp	r4, r0
 8001708:	4623      	mov	r3, r4
 800170a:	d807      	bhi.n	800171c <memmove+0x20>
 800170c:	1e43      	subs	r3, r0, #1
 800170e:	42a1      	cmp	r1, r4
 8001710:	d008      	beq.n	8001724 <memmove+0x28>
 8001712:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001716:	f803 2f01 	strb.w	r2, [r3, #1]!
 800171a:	e7f8      	b.n	800170e <memmove+0x12>
 800171c:	4402      	add	r2, r0
 800171e:	4601      	mov	r1, r0
 8001720:	428a      	cmp	r2, r1
 8001722:	d100      	bne.n	8001726 <memmove+0x2a>
 8001724:	bd10      	pop	{r4, pc}
 8001726:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800172a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800172e:	e7f7      	b.n	8001720 <memmove+0x24>

08001730 <_free_r>:
 8001730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001732:	2900      	cmp	r1, #0
 8001734:	d048      	beq.n	80017c8 <_free_r+0x98>
 8001736:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800173a:	9001      	str	r0, [sp, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	f1a1 0404 	sub.w	r4, r1, #4
 8001742:	bfb8      	it	lt
 8001744:	18e4      	addlt	r4, r4, r3
 8001746:	f000 f8d3 	bl	80018f0 <__malloc_lock>
 800174a:	4a20      	ldr	r2, [pc, #128]	; (80017cc <_free_r+0x9c>)
 800174c:	9801      	ldr	r0, [sp, #4]
 800174e:	6813      	ldr	r3, [r2, #0]
 8001750:	4615      	mov	r5, r2
 8001752:	b933      	cbnz	r3, 8001762 <_free_r+0x32>
 8001754:	6063      	str	r3, [r4, #4]
 8001756:	6014      	str	r4, [r2, #0]
 8001758:	b003      	add	sp, #12
 800175a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800175e:	f000 b8cd 	b.w	80018fc <__malloc_unlock>
 8001762:	42a3      	cmp	r3, r4
 8001764:	d90b      	bls.n	800177e <_free_r+0x4e>
 8001766:	6821      	ldr	r1, [r4, #0]
 8001768:	1862      	adds	r2, r4, r1
 800176a:	4293      	cmp	r3, r2
 800176c:	bf04      	itt	eq
 800176e:	681a      	ldreq	r2, [r3, #0]
 8001770:	685b      	ldreq	r3, [r3, #4]
 8001772:	6063      	str	r3, [r4, #4]
 8001774:	bf04      	itt	eq
 8001776:	1852      	addeq	r2, r2, r1
 8001778:	6022      	streq	r2, [r4, #0]
 800177a:	602c      	str	r4, [r5, #0]
 800177c:	e7ec      	b.n	8001758 <_free_r+0x28>
 800177e:	461a      	mov	r2, r3
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	b10b      	cbz	r3, 8001788 <_free_r+0x58>
 8001784:	42a3      	cmp	r3, r4
 8001786:	d9fa      	bls.n	800177e <_free_r+0x4e>
 8001788:	6811      	ldr	r1, [r2, #0]
 800178a:	1855      	adds	r5, r2, r1
 800178c:	42a5      	cmp	r5, r4
 800178e:	d10b      	bne.n	80017a8 <_free_r+0x78>
 8001790:	6824      	ldr	r4, [r4, #0]
 8001792:	4421      	add	r1, r4
 8001794:	1854      	adds	r4, r2, r1
 8001796:	42a3      	cmp	r3, r4
 8001798:	6011      	str	r1, [r2, #0]
 800179a:	d1dd      	bne.n	8001758 <_free_r+0x28>
 800179c:	681c      	ldr	r4, [r3, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	6053      	str	r3, [r2, #4]
 80017a2:	4421      	add	r1, r4
 80017a4:	6011      	str	r1, [r2, #0]
 80017a6:	e7d7      	b.n	8001758 <_free_r+0x28>
 80017a8:	d902      	bls.n	80017b0 <_free_r+0x80>
 80017aa:	230c      	movs	r3, #12
 80017ac:	6003      	str	r3, [r0, #0]
 80017ae:	e7d3      	b.n	8001758 <_free_r+0x28>
 80017b0:	6825      	ldr	r5, [r4, #0]
 80017b2:	1961      	adds	r1, r4, r5
 80017b4:	428b      	cmp	r3, r1
 80017b6:	bf04      	itt	eq
 80017b8:	6819      	ldreq	r1, [r3, #0]
 80017ba:	685b      	ldreq	r3, [r3, #4]
 80017bc:	6063      	str	r3, [r4, #4]
 80017be:	bf04      	itt	eq
 80017c0:	1949      	addeq	r1, r1, r5
 80017c2:	6021      	streq	r1, [r4, #0]
 80017c4:	6054      	str	r4, [r2, #4]
 80017c6:	e7c7      	b.n	8001758 <_free_r+0x28>
 80017c8:	b003      	add	sp, #12
 80017ca:	bd30      	pop	{r4, r5, pc}
 80017cc:	200002ac 	.word	0x200002ac

080017d0 <_malloc_r>:
 80017d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017d2:	1ccd      	adds	r5, r1, #3
 80017d4:	f025 0503 	bic.w	r5, r5, #3
 80017d8:	3508      	adds	r5, #8
 80017da:	2d0c      	cmp	r5, #12
 80017dc:	bf38      	it	cc
 80017de:	250c      	movcc	r5, #12
 80017e0:	2d00      	cmp	r5, #0
 80017e2:	4606      	mov	r6, r0
 80017e4:	db01      	blt.n	80017ea <_malloc_r+0x1a>
 80017e6:	42a9      	cmp	r1, r5
 80017e8:	d903      	bls.n	80017f2 <_malloc_r+0x22>
 80017ea:	230c      	movs	r3, #12
 80017ec:	6033      	str	r3, [r6, #0]
 80017ee:	2000      	movs	r0, #0
 80017f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017f2:	f000 f87d 	bl	80018f0 <__malloc_lock>
 80017f6:	4921      	ldr	r1, [pc, #132]	; (800187c <_malloc_r+0xac>)
 80017f8:	680a      	ldr	r2, [r1, #0]
 80017fa:	4614      	mov	r4, r2
 80017fc:	b99c      	cbnz	r4, 8001826 <_malloc_r+0x56>
 80017fe:	4f20      	ldr	r7, [pc, #128]	; (8001880 <_malloc_r+0xb0>)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	b923      	cbnz	r3, 800180e <_malloc_r+0x3e>
 8001804:	4621      	mov	r1, r4
 8001806:	4630      	mov	r0, r6
 8001808:	f000 f862 	bl	80018d0 <_sbrk_r>
 800180c:	6038      	str	r0, [r7, #0]
 800180e:	4629      	mov	r1, r5
 8001810:	4630      	mov	r0, r6
 8001812:	f000 f85d 	bl	80018d0 <_sbrk_r>
 8001816:	1c43      	adds	r3, r0, #1
 8001818:	d123      	bne.n	8001862 <_malloc_r+0x92>
 800181a:	230c      	movs	r3, #12
 800181c:	6033      	str	r3, [r6, #0]
 800181e:	4630      	mov	r0, r6
 8001820:	f000 f86c 	bl	80018fc <__malloc_unlock>
 8001824:	e7e3      	b.n	80017ee <_malloc_r+0x1e>
 8001826:	6823      	ldr	r3, [r4, #0]
 8001828:	1b5b      	subs	r3, r3, r5
 800182a:	d417      	bmi.n	800185c <_malloc_r+0x8c>
 800182c:	2b0b      	cmp	r3, #11
 800182e:	d903      	bls.n	8001838 <_malloc_r+0x68>
 8001830:	6023      	str	r3, [r4, #0]
 8001832:	441c      	add	r4, r3
 8001834:	6025      	str	r5, [r4, #0]
 8001836:	e004      	b.n	8001842 <_malloc_r+0x72>
 8001838:	6863      	ldr	r3, [r4, #4]
 800183a:	42a2      	cmp	r2, r4
 800183c:	bf0c      	ite	eq
 800183e:	600b      	streq	r3, [r1, #0]
 8001840:	6053      	strne	r3, [r2, #4]
 8001842:	4630      	mov	r0, r6
 8001844:	f000 f85a 	bl	80018fc <__malloc_unlock>
 8001848:	f104 000b 	add.w	r0, r4, #11
 800184c:	1d23      	adds	r3, r4, #4
 800184e:	f020 0007 	bic.w	r0, r0, #7
 8001852:	1ac2      	subs	r2, r0, r3
 8001854:	d0cc      	beq.n	80017f0 <_malloc_r+0x20>
 8001856:	1a1b      	subs	r3, r3, r0
 8001858:	50a3      	str	r3, [r4, r2]
 800185a:	e7c9      	b.n	80017f0 <_malloc_r+0x20>
 800185c:	4622      	mov	r2, r4
 800185e:	6864      	ldr	r4, [r4, #4]
 8001860:	e7cc      	b.n	80017fc <_malloc_r+0x2c>
 8001862:	1cc4      	adds	r4, r0, #3
 8001864:	f024 0403 	bic.w	r4, r4, #3
 8001868:	42a0      	cmp	r0, r4
 800186a:	d0e3      	beq.n	8001834 <_malloc_r+0x64>
 800186c:	1a21      	subs	r1, r4, r0
 800186e:	4630      	mov	r0, r6
 8001870:	f000 f82e 	bl	80018d0 <_sbrk_r>
 8001874:	3001      	adds	r0, #1
 8001876:	d1dd      	bne.n	8001834 <_malloc_r+0x64>
 8001878:	e7cf      	b.n	800181a <_malloc_r+0x4a>
 800187a:	bf00      	nop
 800187c:	200002ac 	.word	0x200002ac
 8001880:	200002b0 	.word	0x200002b0

08001884 <_realloc_r>:
 8001884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001886:	4607      	mov	r7, r0
 8001888:	4614      	mov	r4, r2
 800188a:	460e      	mov	r6, r1
 800188c:	b921      	cbnz	r1, 8001898 <_realloc_r+0x14>
 800188e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001892:	4611      	mov	r1, r2
 8001894:	f7ff bf9c 	b.w	80017d0 <_malloc_r>
 8001898:	b922      	cbnz	r2, 80018a4 <_realloc_r+0x20>
 800189a:	f7ff ff49 	bl	8001730 <_free_r>
 800189e:	4625      	mov	r5, r4
 80018a0:	4628      	mov	r0, r5
 80018a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018a4:	f000 f830 	bl	8001908 <_malloc_usable_size_r>
 80018a8:	42a0      	cmp	r0, r4
 80018aa:	d20f      	bcs.n	80018cc <_realloc_r+0x48>
 80018ac:	4621      	mov	r1, r4
 80018ae:	4638      	mov	r0, r7
 80018b0:	f7ff ff8e 	bl	80017d0 <_malloc_r>
 80018b4:	4605      	mov	r5, r0
 80018b6:	2800      	cmp	r0, #0
 80018b8:	d0f2      	beq.n	80018a0 <_realloc_r+0x1c>
 80018ba:	4631      	mov	r1, r6
 80018bc:	4622      	mov	r2, r4
 80018be:	f7ff ff0f 	bl	80016e0 <memcpy>
 80018c2:	4631      	mov	r1, r6
 80018c4:	4638      	mov	r0, r7
 80018c6:	f7ff ff33 	bl	8001730 <_free_r>
 80018ca:	e7e9      	b.n	80018a0 <_realloc_r+0x1c>
 80018cc:	4635      	mov	r5, r6
 80018ce:	e7e7      	b.n	80018a0 <_realloc_r+0x1c>

080018d0 <_sbrk_r>:
 80018d0:	b538      	push	{r3, r4, r5, lr}
 80018d2:	4d06      	ldr	r5, [pc, #24]	; (80018ec <_sbrk_r+0x1c>)
 80018d4:	2300      	movs	r3, #0
 80018d6:	4604      	mov	r4, r0
 80018d8:	4608      	mov	r0, r1
 80018da:	602b      	str	r3, [r5, #0]
 80018dc:	f7ff f82e 	bl	800093c <_sbrk>
 80018e0:	1c43      	adds	r3, r0, #1
 80018e2:	d102      	bne.n	80018ea <_sbrk_r+0x1a>
 80018e4:	682b      	ldr	r3, [r5, #0]
 80018e6:	b103      	cbz	r3, 80018ea <_sbrk_r+0x1a>
 80018e8:	6023      	str	r3, [r4, #0]
 80018ea:	bd38      	pop	{r3, r4, r5, pc}
 80018ec:	200002b4 	.word	0x200002b4

080018f0 <__malloc_lock>:
 80018f0:	4801      	ldr	r0, [pc, #4]	; (80018f8 <__malloc_lock+0x8>)
 80018f2:	f000 b811 	b.w	8001918 <__retarget_lock_acquire_recursive>
 80018f6:	bf00      	nop
 80018f8:	200002bc 	.word	0x200002bc

080018fc <__malloc_unlock>:
 80018fc:	4801      	ldr	r0, [pc, #4]	; (8001904 <__malloc_unlock+0x8>)
 80018fe:	f000 b80c 	b.w	800191a <__retarget_lock_release_recursive>
 8001902:	bf00      	nop
 8001904:	200002bc 	.word	0x200002bc

08001908 <_malloc_usable_size_r>:
 8001908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800190c:	1f18      	subs	r0, r3, #4
 800190e:	2b00      	cmp	r3, #0
 8001910:	bfbc      	itt	lt
 8001912:	580b      	ldrlt	r3, [r1, r0]
 8001914:	18c0      	addlt	r0, r0, r3
 8001916:	4770      	bx	lr

08001918 <__retarget_lock_acquire_recursive>:
 8001918:	4770      	bx	lr

0800191a <__retarget_lock_release_recursive>:
 800191a:	4770      	bx	lr

0800191c <_init>:
 800191c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800191e:	bf00      	nop
 8001920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001922:	bc08      	pop	{r3}
 8001924:	469e      	mov	lr, r3
 8001926:	4770      	bx	lr

08001928 <_fini>:
 8001928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800192a:	bf00      	nop
 800192c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800192e:	bc08      	pop	{r3}
 8001930:	469e      	mov	lr, r3
 8001932:	4770      	bx	lr
